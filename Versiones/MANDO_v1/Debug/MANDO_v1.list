
MANDO_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fe4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08005174  08005174  00015174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005204  08005204  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005204  08005204  00015204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800520c  0800520c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800520c  0800520c  0001520c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005210  08005210  00015210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005214  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000228  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000029c  2000029c  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ed40  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e84  00000000  00000000  0002ede4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e38  00000000  00000000  00030c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d68  00000000  00000000  00031aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002187d  00000000  00000000  00032808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fe1d  00000000  00000000  00054085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdb09  00000000  00000000  00063ea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001319ab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000040b4  00000000  00000000  001319fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800515c 	.word	0x0800515c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800515c 	.word	0x0800515c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <lcd_send_data>:
#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

#define LINES 2 //Dimensiones LCD
#define ROWS 16 //Dimensiones LCD

void lcd_send_data (char data){
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af02      	add	r7, sp, #8
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	f023 030f 	bic.w	r3, r3, #15
 8000594:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	011b      	lsls	r3, r3, #4
 800059a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 800059c:	7bfb      	ldrb	r3, [r7, #15]
 800059e:	f043 030d 	orr.w	r3, r3, #13
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
 80005a8:	f043 0309 	orr.w	r3, r3, #9
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80005b0:	7bbb      	ldrb	r3, [r7, #14]
 80005b2:	f043 030d 	orr.w	r3, r3, #13
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80005ba:	7bbb      	ldrb	r3, [r7, #14]
 80005bc:	f043 0309 	orr.w	r3, r3, #9
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, HAL_MAX_DELAY);
 80005c4:	f107 0208 	add.w	r2, r7, #8
 80005c8:	f04f 33ff 	mov.w	r3, #4294967295
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2304      	movs	r3, #4
 80005d0:	214e      	movs	r1, #78	; 0x4e
 80005d2:	4803      	ldr	r0, [pc, #12]	; (80005e0 <lcd_send_data+0x5c>)
 80005d4:	f002 fcd8 	bl	8002f88 <HAL_I2C_Master_Transmit>
}
 80005d8:	bf00      	nop
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	200000bc 	.word	0x200000bc

080005e4 <lcd_send_cmd>:

void lcd_send_cmd (char cmd){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af02      	add	r7, sp, #8
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	f023 030f 	bic.w	r3, r3, #15
 80005f4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	011b      	lsls	r3, r3, #4
 80005fa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
 80005fe:	f043 030c 	orr.w	r3, r3, #12
 8000602:	b2db      	uxtb	r3, r3
 8000604:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000606:	7bfb      	ldrb	r3, [r7, #15]
 8000608:	f043 0308 	orr.w	r3, r3, #8
 800060c:	b2db      	uxtb	r3, r3
 800060e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000610:	7bbb      	ldrb	r3, [r7, #14]
 8000612:	f043 030c 	orr.w	r3, r3, #12
 8000616:	b2db      	uxtb	r3, r3
 8000618:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800061a:	7bbb      	ldrb	r3, [r7, #14]
 800061c:	f043 0308 	orr.w	r3, r3, #8
 8000620:	b2db      	uxtb	r3, r3
 8000622:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, HAL_MAX_DELAY);
 8000624:	f107 0208 	add.w	r2, r7, #8
 8000628:	f04f 33ff 	mov.w	r3, #4294967295
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2304      	movs	r3, #4
 8000630:	214e      	movs	r1, #78	; 0x4e
 8000632:	4803      	ldr	r0, [pc, #12]	; (8000640 <lcd_send_cmd+0x5c>)
 8000634:	f002 fca8 	bl	8002f88 <HAL_I2C_Master_Transmit>
}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	200000bc 	.word	0x200000bc

08000644 <lcd_init>:

void lcd_init (void){
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	HAL_Delay(45); //Datasheet especifica espera de 40ms
 8000648:	202d      	movs	r0, #45	; 0x2d
 800064a:	f001 f98f 	bl	800196c <HAL_Delay>
	lcd_send_cmd (0x30); //Encendido del display y del cursor
 800064e:	2030      	movs	r0, #48	; 0x30
 8000650:	f7ff ffc8 	bl	80005e4 <lcd_send_cmd>
	HAL_Delay(5); //Datasheet especifica espera de 4.1ms
 8000654:	2005      	movs	r0, #5
 8000656:	f001 f989 	bl	800196c <HAL_Delay>
	lcd_send_cmd (0x30); //El datasheet especifica que se debe repetir el envio de esta instruccion
 800065a:	2030      	movs	r0, #48	; 0x30
 800065c:	f7ff ffc2 	bl	80005e4 <lcd_send_cmd>
	HAL_Delay(1); //Datasheet especifica espera de 100us
 8000660:	2001      	movs	r0, #1
 8000662:	f001 f983 	bl	800196c <HAL_Delay>
	lcd_send_cmd(0x30);
 8000666:	2030      	movs	r0, #48	; 0x30
 8000668:	f7ff ffbc 	bl	80005e4 <lcd_send_cmd>
	HAL_Delay(1);
 800066c:	2001      	movs	r0, #1
 800066e:	f001 f97d 	bl	800196c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000672:	2020      	movs	r0, #32
 8000674:	f7ff ffb6 	bl	80005e4 <lcd_send_cmd>
	HAL_Delay(1);
 8000678:	2001      	movs	r0, #1
 800067a:	f001 f977 	bl	800196c <HAL_Delay>
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800067e:	2028      	movs	r0, #40	; 0x28
 8000680:	f7ff ffb0 	bl	80005e4 <lcd_send_cmd>
	HAL_Delay(1);
 8000684:	2001      	movs	r0, #1
 8000686:	f001 f971 	bl	800196c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800068a:	2008      	movs	r0, #8
 800068c:	f7ff ffaa 	bl	80005e4 <lcd_send_cmd>
	HAL_Delay(1);
 8000690:	2001      	movs	r0, #1
 8000692:	f001 f96b 	bl	800196c <HAL_Delay>
	lcd_send_cmd (0x01);  //Clear
 8000696:	2001      	movs	r0, #1
 8000698:	f7ff ffa4 	bl	80005e4 <lcd_send_cmd>
	HAL_Delay(1);
 800069c:	2001      	movs	r0, #1
 800069e:	f001 f965 	bl	800196c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80006a2:	2006      	movs	r0, #6
 80006a4:	f7ff ff9e 	bl	80005e4 <lcd_send_cmd>
	HAL_Delay(1);
 80006a8:	2001      	movs	r0, #1
 80006aa:	f001 f95f 	bl	800196c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80006ae:	200c      	movs	r0, #12
 80006b0:	f7ff ff98 	bl	80005e4 <lcd_send_cmd>
	HAL_Delay(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f001 f959 	bl	800196c <HAL_Delay>
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <lcd_send_string>:

void lcd_send_string (char *str){
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	//Escribe a continuación de lo que haya
	static int contador_linea = 0; //Static para que no se borre entre ejecuciones de la función
	contador_linea = 0;
 80006c8:	4b17      	ldr	r3, [pc, #92]	; (8000728 <lcd_send_string+0x68>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
	while (*str){
 80006ce:	e021      	b.n	8000714 <lcd_send_string+0x54>
		lcd_send_data (*str++);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	1c5a      	adds	r2, r3, #1
 80006d4:	607a      	str	r2, [r7, #4]
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ff53 	bl	8000584 <lcd_send_data>
		contador_linea = (contador_linea) % (ROWS*LINES); //Contar hasta el número de caracteres máximo
 80006de:	4b12      	ldr	r3, [pc, #72]	; (8000728 <lcd_send_string+0x68>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	425a      	negs	r2, r3
 80006e4:	f003 031f 	and.w	r3, r3, #31
 80006e8:	f002 021f 	and.w	r2, r2, #31
 80006ec:	bf58      	it	pl
 80006ee:	4253      	negpl	r3, r2
 80006f0:	4a0d      	ldr	r2, [pc, #52]	; (8000728 <lcd_send_string+0x68>)
 80006f2:	6013      	str	r3, [r2, #0]
		contador_linea++;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <lcd_send_string+0x68>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	3301      	adds	r3, #1
 80006fa:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <lcd_send_string+0x68>)
 80006fc:	6013      	str	r3, [r2, #0]
		if (contador_linea == ROWS)
 80006fe:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <lcd_send_string+0x68>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	2b10      	cmp	r3, #16
 8000704:	d102      	bne.n	800070c <lcd_send_string+0x4c>
			lcd_send_cmd(0xc0); //Pasa a la segunda línea
 8000706:	20c0      	movs	r0, #192	; 0xc0
 8000708:	f7ff ff6c 	bl	80005e4 <lcd_send_cmd>
		if (contador_linea > ROWS*LINES)
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <lcd_send_string+0x68>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b20      	cmp	r3, #32
 8000712:	dc04      	bgt.n	800071e <lcd_send_string+0x5e>
	while (*str){
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d1d9      	bne.n	80006d0 <lcd_send_string+0x10>
 800071c:	e000      	b.n	8000720 <lcd_send_string+0x60>
			return; //No hace nada más porque no hay espacio
 800071e:	bf00      	nop
	}
}
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000090 	.word	0x20000090

0800072c <lcd_update>:

void lcd_update (char *str){
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]

	lcd_clear(); //Borra la pantalla y pone el cursor en la esquina superior izquierda
 8000734:	f000 f807 	bl	8000746 <lcd_clear>
	lcd_send_string(str);
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f7ff ffc1 	bl	80006c0 <lcd_send_string>

}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <lcd_clear>:

void lcd_clear(void){ //Tambien posiciona el cursor en la esquina superior izquierda. SOLO VALE PARA DISPLAY 16x2
 8000746:	b580      	push	{r7, lr}
 8000748:	b082      	sub	sp, #8
 800074a:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80); //Posiciona en el comienzo
 800074c:	2080      	movs	r0, #128	; 0x80
 800074e:	f7ff ff49 	bl	80005e4 <lcd_send_cmd>
	for (int i=0; i < LINES; i++){ //Recorrer todas las filas
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	e011      	b.n	800077c <lcd_clear+0x36>
		for (int j=0; j < ROWS; j++) //Recorrer todas las columnas
 8000758:	2300      	movs	r3, #0
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	e005      	b.n	800076a <lcd_clear+0x24>
			lcd_send_data(' '); //Poner espacios (borrar todo)
 800075e:	2020      	movs	r0, #32
 8000760:	f7ff ff10 	bl	8000584 <lcd_send_data>
		for (int j=0; j < ROWS; j++) //Recorrer todas las columnas
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	3301      	adds	r3, #1
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	2b0f      	cmp	r3, #15
 800076e:	ddf6      	ble.n	800075e <lcd_clear+0x18>
		lcd_send_cmd(0x0c); //Posicionar en la segunda linea
 8000770:	200c      	movs	r0, #12
 8000772:	f7ff ff37 	bl	80005e4 <lcd_send_cmd>
	for (int i=0; i < LINES; i++){ //Recorrer todas las filas
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	3301      	adds	r3, #1
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2b01      	cmp	r3, #1
 8000780:	ddea      	ble.n	8000758 <lcd_clear+0x12>
	}
	lcd_send_cmd(0x80); //Posicionar el cursor en el comienzo de nuevo
 8000782:	2080      	movs	r0, #128	; 0x80
 8000784:	f7ff ff2e 	bl	80005e4 <lcd_send_cmd>
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <SEND_MESSAGE>:
char t_rpm[6];

uint8_t highByte;
uint8_t lowByte;

void SEND_MESSAGE(){ //Mandar una secuencia de datos u otra segun el mapa activo
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
    TxHeader.DLC = 2; //Data length (envio 2 bytes)
 8000794:	4b35      	ldr	r3, [pc, #212]	; (800086c <SEND_MESSAGE+0xdc>)
 8000796:	2202      	movs	r2, #2
 8000798:	611a      	str	r2, [r3, #16]
    TxHeader.IDE = CAN_ID_STD;
 800079a:	4b34      	ldr	r3, [pc, #208]	; (800086c <SEND_MESSAGE+0xdc>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
    TxHeader.RTR = CAN_RTR_DATA;
 80007a0:	4b32      	ldr	r3, [pc, #200]	; (800086c <SEND_MESSAGE+0xdc>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
    TxHeader.StdId = 0x182; //ID (identificador del enviador)
 80007a6:	4b31      	ldr	r3, [pc, #196]	; (800086c <SEND_MESSAGE+0xdc>)
 80007a8:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80007ac:	601a      	str	r2, [r3, #0]

    switch (mapaACT){
 80007ae:	4b30      	ldr	r3, [pc, #192]	; (8000870 <SEND_MESSAGE+0xe0>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	2b04      	cmp	r3, #4
 80007b6:	d821      	bhi.n	80007fc <SEND_MESSAGE+0x6c>
 80007b8:	a201      	add	r2, pc, #4	; (adr r2, 80007c0 <SEND_MESSAGE+0x30>)
 80007ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007be:	bf00      	nop
 80007c0:	080007d5 	.word	0x080007d5
 80007c4:	080007dd 	.word	0x080007dd
 80007c8:	080007e5 	.word	0x080007e5
 80007cc:	080007ed 	.word	0x080007ed
 80007d0:	080007f5 	.word	0x080007f5
        case 1:
        	TxData[0] = 0x01;
 80007d4:	4b27      	ldr	r3, [pc, #156]	; (8000874 <SEND_MESSAGE+0xe4>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	701a      	strb	r2, [r3, #0]
        	break;
 80007da:	e00f      	b.n	80007fc <SEND_MESSAGE+0x6c>
        case 2:
        	TxData[0] = 0x02;
 80007dc:	4b25      	ldr	r3, [pc, #148]	; (8000874 <SEND_MESSAGE+0xe4>)
 80007de:	2202      	movs	r2, #2
 80007e0:	701a      	strb	r2, [r3, #0]
        	break;
 80007e2:	e00b      	b.n	80007fc <SEND_MESSAGE+0x6c>
        case 3:
        	TxData[0] = 0x04;
 80007e4:	4b23      	ldr	r3, [pc, #140]	; (8000874 <SEND_MESSAGE+0xe4>)
 80007e6:	2204      	movs	r2, #4
 80007e8:	701a      	strb	r2, [r3, #0]
        	break;
 80007ea:	e007      	b.n	80007fc <SEND_MESSAGE+0x6c>
        case 4:
        	TxData[0] = 0x08;
 80007ec:	4b21      	ldr	r3, [pc, #132]	; (8000874 <SEND_MESSAGE+0xe4>)
 80007ee:	2208      	movs	r2, #8
 80007f0:	701a      	strb	r2, [r3, #0]
        	break;
 80007f2:	e003      	b.n	80007fc <SEND_MESSAGE+0x6c>
        case 5:
        	TxData[0] = 0x10;
 80007f4:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <SEND_MESSAGE+0xe4>)
 80007f6:	2210      	movs	r2, #16
 80007f8:	701a      	strb	r2, [r3, #0]
        	break;
 80007fa:	bf00      	nop
        }

    if (TC == 0 && LC == 0){
 80007fc:	4b1e      	ldr	r3, [pc, #120]	; (8000878 <SEND_MESSAGE+0xe8>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d107      	bne.n	8000814 <SEND_MESSAGE+0x84>
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <SEND_MESSAGE+0xec>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d103      	bne.n	8000814 <SEND_MESSAGE+0x84>
		TxData[1] = 0x00;
 800080c:	4b19      	ldr	r3, [pc, #100]	; (8000874 <SEND_MESSAGE+0xe4>)
 800080e:	2200      	movs	r2, #0
 8000810:	705a      	strb	r2, [r3, #1]
 8000812:	e022      	b.n	800085a <SEND_MESSAGE+0xca>
	} else if (TC == 1 && LC == 0){ //TC enabled
 8000814:	4b18      	ldr	r3, [pc, #96]	; (8000878 <SEND_MESSAGE+0xe8>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b01      	cmp	r3, #1
 800081a:	d107      	bne.n	800082c <SEND_MESSAGE+0x9c>
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <SEND_MESSAGE+0xec>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d103      	bne.n	800082c <SEND_MESSAGE+0x9c>
		TxData[1] = 0x01;
 8000824:	4b13      	ldr	r3, [pc, #76]	; (8000874 <SEND_MESSAGE+0xe4>)
 8000826:	2201      	movs	r2, #1
 8000828:	705a      	strb	r2, [r3, #1]
 800082a:	e016      	b.n	800085a <SEND_MESSAGE+0xca>
	} else if (TC == 0 && LC == 1){ //LC enabled
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <SEND_MESSAGE+0xe8>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d107      	bne.n	8000844 <SEND_MESSAGE+0xb4>
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <SEND_MESSAGE+0xec>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d103      	bne.n	8000844 <SEND_MESSAGE+0xb4>
		TxData[1] = 0x02;
 800083c:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <SEND_MESSAGE+0xe4>)
 800083e:	2202      	movs	r2, #2
 8000840:	705a      	strb	r2, [r3, #1]
 8000842:	e00a      	b.n	800085a <SEND_MESSAGE+0xca>
	} else if (TC == 1 && LC == 1){ //TC y LC enabled
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <SEND_MESSAGE+0xe8>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d106      	bne.n	800085a <SEND_MESSAGE+0xca>
 800084c:	4b0b      	ldr	r3, [pc, #44]	; (800087c <SEND_MESSAGE+0xec>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b01      	cmp	r3, #1
 8000852:	d102      	bne.n	800085a <SEND_MESSAGE+0xca>
		TxData[1] = 0x03;
 8000854:	4b07      	ldr	r3, [pc, #28]	; (8000874 <SEND_MESSAGE+0xe4>)
 8000856:	2203      	movs	r2, #3
 8000858:	705a      	strb	r2, [r3, #1]
	}

    	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox[0]);
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <SEND_MESSAGE+0xf0>)
 800085c:	4a05      	ldr	r2, [pc, #20]	; (8000874 <SEND_MESSAGE+0xe4>)
 800085e:	4903      	ldr	r1, [pc, #12]	; (800086c <SEND_MESSAGE+0xdc>)
 8000860:	4808      	ldr	r0, [pc, #32]	; (8000884 <SEND_MESSAGE+0xf4>)
 8000862:	f001 fac7 	bl	8001df4 <HAL_CAN_AddTxMessage>
    }
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200001e8 	.word	0x200001e8
 8000870:	20000000 	.word	0x20000000
 8000874:	2000021c 	.word	0x2000021c
 8000878:	20000238 	.word	0x20000238
 800087c:	20000239 	.word	0x20000239
 8000880:	2000022c 	.word	0x2000022c
 8000884:	20000094 	.word	0x20000094

08000888 <debouncer>:

int debouncer(volatile int* button_int, GPIO_TypeDef* GPIO_port, uint16_t GPIO_number){
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	4613      	mov	r3, r2
 8000894:	80fb      	strh	r3, [r7, #6]
	static uint8_t button_count=0;
	static int counter=0;

	if (*button_int==1){
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d13b      	bne.n	8000916 <debouncer+0x8e>
		if (button_count==0) {
 800089e:	4b20      	ldr	r3, [pc, #128]	; (8000920 <debouncer+0x98>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d10b      	bne.n	80008be <debouncer+0x36>
			counter=HAL_GetTick();
 80008a6:	f001 f855 	bl	8001954 <HAL_GetTick>
 80008aa:	4603      	mov	r3, r0
 80008ac:	461a      	mov	r2, r3
 80008ae:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <debouncer+0x9c>)
 80008b0:	601a      	str	r2, [r3, #0]
			button_count++;
 80008b2:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <debouncer+0x98>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	3301      	adds	r3, #1
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	4b19      	ldr	r3, [pc, #100]	; (8000920 <debouncer+0x98>)
 80008bc:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick()-counter>=20){
 80008be:	f001 f849 	bl	8001954 <HAL_GetTick>
 80008c2:	4603      	mov	r3, r0
 80008c4:	4a17      	ldr	r2, [pc, #92]	; (8000924 <debouncer+0x9c>)
 80008c6:	6812      	ldr	r2, [r2, #0]
 80008c8:	1a9b      	subs	r3, r3, r2
 80008ca:	2b13      	cmp	r3, #19
 80008cc:	d923      	bls.n	8000916 <debouncer+0x8e>
			counter=HAL_GetTick();
 80008ce:	f001 f841 	bl	8001954 <HAL_GetTick>
 80008d2:	4603      	mov	r3, r0
 80008d4:	461a      	mov	r2, r3
 80008d6:	4b13      	ldr	r3, [pc, #76]	; (8000924 <debouncer+0x9c>)
 80008d8:	601a      	str	r2, [r3, #0]
			if (HAL_GPIO_ReadPin(GPIO_port, GPIO_number)!=1){
 80008da:	88fb      	ldrh	r3, [r7, #6]
 80008dc:	4619      	mov	r1, r3
 80008de:	68b8      	ldr	r0, [r7, #8]
 80008e0:	f002 f9aa 	bl	8002c38 <HAL_GPIO_ReadPin>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d003      	beq.n	80008f2 <debouncer+0x6a>
				button_count=1;
 80008ea:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <debouncer+0x98>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	701a      	strb	r2, [r3, #0]
 80008f0:	e005      	b.n	80008fe <debouncer+0x76>
			}
			else{
				button_count++;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <debouncer+0x98>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	3301      	adds	r3, #1
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <debouncer+0x98>)
 80008fc:	701a      	strb	r2, [r3, #0]
			}
			if (button_count==4){ //Periodo antirebotes
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <debouncer+0x98>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b04      	cmp	r3, #4
 8000904:	d107      	bne.n	8000916 <debouncer+0x8e>
				button_count=0;
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <debouncer+0x98>)
 8000908:	2200      	movs	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]
				*button_int=0;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
				return 1;
 8000912:	2301      	movs	r3, #1
 8000914:	e000      	b.n	8000918 <debouncer+0x90>
			}
		}
	}
	return 0;
 8000916:	2300      	movs	r3, #0
}
 8000918:	4618      	mov	r0, r3
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	2000027c 	.word	0x2000027c
 8000924:	20000280 	.word	0x20000280

08000928 <MAPChange>:


void MAPChange(){
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	if (debouncer(&buttonUP, GPIOA, GPIO_PIN_1)){
 800092c:	2202      	movs	r2, #2
 800092e:	4918      	ldr	r1, [pc, #96]	; (8000990 <MAPChange+0x68>)
 8000930:	4818      	ldr	r0, [pc, #96]	; (8000994 <MAPChange+0x6c>)
 8000932:	f7ff ffa9 	bl	8000888 <debouncer>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d00f      	beq.n	800095c <MAPChange+0x34>
		if (mapaACT < NUM_MAP){
 800093c:	4b16      	ldr	r3, [pc, #88]	; (8000998 <MAPChange+0x70>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b04      	cmp	r3, #4
 8000942:	d806      	bhi.n	8000952 <MAPChange+0x2a>
			mapaACT++;
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MAPChange+0x70>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	3301      	adds	r3, #1
 800094a:	b2da      	uxtb	r2, r3
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <MAPChange+0x70>)
 800094e:	701a      	strb	r2, [r3, #0]
 8000950:	e002      	b.n	8000958 <MAPChange+0x30>
		} else {
			mapaACT = 1;
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MAPChange+0x70>)
 8000954:	2201      	movs	r2, #1
 8000956:	701a      	strb	r2, [r3, #0]
		}
		SEND_MESSAGE();
 8000958:	f7ff ff1a 	bl	8000790 <SEND_MESSAGE>
	}
	if (debouncer(&buttonDOWN, GPIOA, GPIO_PIN_2)){
 800095c:	2204      	movs	r2, #4
 800095e:	490c      	ldr	r1, [pc, #48]	; (8000990 <MAPChange+0x68>)
 8000960:	480e      	ldr	r0, [pc, #56]	; (800099c <MAPChange+0x74>)
 8000962:	f7ff ff91 	bl	8000888 <debouncer>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d00f      	beq.n	800098c <MAPChange+0x64>
		if (mapaACT > 1 ){
 800096c:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <MAPChange+0x70>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b01      	cmp	r3, #1
 8000972:	d906      	bls.n	8000982 <MAPChange+0x5a>
			mapaACT--;
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <MAPChange+0x70>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	3b01      	subs	r3, #1
 800097a:	b2da      	uxtb	r2, r3
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MAPChange+0x70>)
 800097e:	701a      	strb	r2, [r3, #0]
 8000980:	e002      	b.n	8000988 <MAPChange+0x60>
		} else {
			mapaACT = NUM_MAP;
 8000982:	4b05      	ldr	r3, [pc, #20]	; (8000998 <MAPChange+0x70>)
 8000984:	2205      	movs	r2, #5
 8000986:	701a      	strb	r2, [r3, #0]
		}
		SEND_MESSAGE();
 8000988:	f7ff ff02 	bl	8000790 <SEND_MESSAGE>
	}
}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40020000 	.word	0x40020000
 8000994:	20000240 	.word	0x20000240
 8000998:	20000000 	.word	0x20000000
 800099c:	20000244 	.word	0x20000244

080009a0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){ //Cambio de mapa activo segun el botón que se pulse
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_1){ //Al pulsar el boton rojo se sube de mapa
 80009aa:	88fb      	ldrh	r3, [r7, #6]
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	d108      	bne.n	80009c2 <HAL_GPIO_EXTI_Callback+0x22>
		buttonUP = 1;
 80009b0:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <HAL_GPIO_EXTI_Callback+0x60>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	601a      	str	r2, [r3, #0]
		buttonDOWN = 0;
 80009b6:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <HAL_GPIO_EXTI_Callback+0x64>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
		buttonCTRL = 0;
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x68>)
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
	}

	if (GPIO_Pin == GPIO_PIN_2){ //Al pulsar el boton amarillo se baja de mapa
 80009c2:	88fb      	ldrh	r3, [r7, #6]
 80009c4:	2b04      	cmp	r3, #4
 80009c6:	d108      	bne.n	80009da <HAL_GPIO_EXTI_Callback+0x3a>
		buttonDOWN = 1;
 80009c8:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <HAL_GPIO_EXTI_Callback+0x64>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	601a      	str	r2, [r3, #0]
		buttonUP = 0;
 80009ce:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <HAL_GPIO_EXTI_Callback+0x60>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
		buttonCTRL = 0;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x68>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
	}
	if (GPIO_Pin == GPIO_PIN_3){ //Al pulsar el boton azul
 80009da:	88fb      	ldrh	r3, [r7, #6]
 80009dc:	2b08      	cmp	r3, #8
 80009de:	d108      	bne.n	80009f2 <HAL_GPIO_EXTI_Callback+0x52>
		buttonCTRL = 1;
 80009e0:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x68>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	601a      	str	r2, [r3, #0]
		buttonDOWN = 0;
 80009e6:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <HAL_GPIO_EXTI_Callback+0x64>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
		buttonUP = 0;
 80009ec:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <HAL_GPIO_EXTI_Callback+0x60>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
	}
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	20000240 	.word	0x20000240
 8000a04:	20000244 	.word	0x20000244
 8000a08:	20000248 	.word	0x20000248

08000a0c <RECEIVE_MESSAGE>:



void RECEIVE_MESSAGE(){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
	switch (RxData[0]){
 8000a10:	4b76      	ldr	r3, [pc, #472]	; (8000bec <RECEIVE_MESSAGE+0x1e0>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	3b81      	subs	r3, #129	; 0x81
 8000a16:	2b0f      	cmp	r3, #15
 8000a18:	f200 8089 	bhi.w	8000b2e <RECEIVE_MESSAGE+0x122>
 8000a1c:	a201      	add	r2, pc, #4	; (adr r2, 8000a24 <RECEIVE_MESSAGE+0x18>)
 8000a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a22:	bf00      	nop
 8000a24:	08000a65 	.word	0x08000a65
 8000a28:	08000aa3 	.word	0x08000aa3
 8000a2c:	08000b2f 	.word	0x08000b2f
 8000a30:	08000abd 	.word	0x08000abd
 8000a34:	08000b2f 	.word	0x08000b2f
 8000a38:	08000b2f 	.word	0x08000b2f
 8000a3c:	08000b2f 	.word	0x08000b2f
 8000a40:	08000ad7 	.word	0x08000ad7
 8000a44:	08000b2f 	.word	0x08000b2f
 8000a48:	08000b2f 	.word	0x08000b2f
 8000a4c:	08000b2f 	.word	0x08000b2f
 8000a50:	08000b2f 	.word	0x08000b2f
 8000a54:	08000b2f 	.word	0x08000b2f
 8000a58:	08000b2f 	.word	0x08000b2f
 8000a5c:	08000b2f 	.word	0x08000b2f
 8000a60:	08000af1 	.word	0x08000af1
	    case 0x81:
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8000a64:	2201      	movs	r2, #1
 8000a66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a6a:	4861      	ldr	r0, [pc, #388]	; (8000bf0 <RECEIVE_MESSAGE+0x1e4>)
 8000a6c:	f002 f8fc 	bl	8002c68 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8000a70:	2200      	movs	r2, #0
 8000a72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a76:	485e      	ldr	r0, [pc, #376]	; (8000bf0 <RECEIVE_MESSAGE+0x1e4>)
 8000a78:	f002 f8f6 	bl	8002c68 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a82:	485b      	ldr	r0, [pc, #364]	; (8000bf0 <RECEIVE_MESSAGE+0x1e4>)
 8000a84:	f002 f8f0 	bl	8002c68 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a8e:	4858      	ldr	r0, [pc, #352]	; (8000bf0 <RECEIVE_MESSAGE+0x1e4>)
 8000a90:	f002 f8ea 	bl	8002c68 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, 0);
 8000a94:	2200      	movs	r2, #0
 8000a96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a9a:	4855      	ldr	r0, [pc, #340]	; (8000bf0 <RECEIVE_MESSAGE+0x1e4>)
 8000a9c:	f002 f8e4 	bl	8002c68 <HAL_GPIO_WritePin>
	    	break;
 8000aa0:	e045      	b.n	8000b2e <RECEIVE_MESSAGE+0x122>
	    case 0x82:
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aa8:	4851      	ldr	r0, [pc, #324]	; (8000bf0 <RECEIVE_MESSAGE+0x1e4>)
 8000aaa:	f002 f8dd 	bl	8002c68 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ab4:	484e      	ldr	r0, [pc, #312]	; (8000bf0 <RECEIVE_MESSAGE+0x1e4>)
 8000ab6:	f002 f8d7 	bl	8002c68 <HAL_GPIO_WritePin>
	    	break;
 8000aba:	e038      	b.n	8000b2e <RECEIVE_MESSAGE+0x122>
	    case 0x84:
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000abc:	2201      	movs	r2, #1
 8000abe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac2:	484b      	ldr	r0, [pc, #300]	; (8000bf0 <RECEIVE_MESSAGE+0x1e4>)
 8000ac4:	f002 f8d0 	bl	8002c68 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ace:	4848      	ldr	r0, [pc, #288]	; (8000bf0 <RECEIVE_MESSAGE+0x1e4>)
 8000ad0:	f002 f8ca 	bl	8002c68 <HAL_GPIO_WritePin>
	    	break;
 8000ad4:	e02b      	b.n	8000b2e <RECEIVE_MESSAGE+0x122>
	    case 0x88:
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000adc:	4844      	ldr	r0, [pc, #272]	; (8000bf0 <RECEIVE_MESSAGE+0x1e4>)
 8000ade:	f002 f8c3 	bl	8002c68 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ae8:	4841      	ldr	r0, [pc, #260]	; (8000bf0 <RECEIVE_MESSAGE+0x1e4>)
 8000aea:	f002 f8bd 	bl	8002c68 <HAL_GPIO_WritePin>
	    	break;
 8000aee:	e01e      	b.n	8000b2e <RECEIVE_MESSAGE+0x122>
	    case 0x90:
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8000af0:	2201      	movs	r2, #1
 8000af2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000af6:	483e      	ldr	r0, [pc, #248]	; (8000bf0 <RECEIVE_MESSAGE+0x1e4>)
 8000af8:	f002 f8b6 	bl	8002c68 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 8000afc:	2201      	movs	r2, #1
 8000afe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b02:	483b      	ldr	r0, [pc, #236]	; (8000bf0 <RECEIVE_MESSAGE+0x1e4>)
 8000b04:	f002 f8b0 	bl	8002c68 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b0e:	4838      	ldr	r0, [pc, #224]	; (8000bf0 <RECEIVE_MESSAGE+0x1e4>)
 8000b10:	f002 f8aa 	bl	8002c68 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 8000b14:	2201      	movs	r2, #1
 8000b16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b1a:	4835      	ldr	r0, [pc, #212]	; (8000bf0 <RECEIVE_MESSAGE+0x1e4>)
 8000b1c:	f002 f8a4 	bl	8002c68 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, 1);
 8000b20:	2201      	movs	r2, #1
 8000b22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b26:	4832      	ldr	r0, [pc, #200]	; (8000bf0 <RECEIVE_MESSAGE+0x1e4>)
 8000b28:	f002 f89e 	bl	8002c68 <HAL_GPIO_WritePin>
	    	break;
 8000b2c:	bf00      	nop
	}

	switch (RxData[1]){
 8000b2e:	4b2f      	ldr	r3, [pc, #188]	; (8000bec <RECEIVE_MESSAGE+0x1e0>)
 8000b30:	785b      	ldrb	r3, [r3, #1]
 8000b32:	3b80      	subs	r3, #128	; 0x80
 8000b34:	2b03      	cmp	r3, #3
 8000b36:	d857      	bhi.n	8000be8 <RECEIVE_MESSAGE+0x1dc>
 8000b38:	a201      	add	r2, pc, #4	; (adr r2, 8000b40 <RECEIVE_MESSAGE+0x134>)
 8000b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b3e:	bf00      	nop
 8000b40:	08000b51 	.word	0x08000b51
 8000b44:	08000b77 	.word	0x08000b77
 8000b48:	08000b9d 	.word	0x08000b9d
 8000b4c:	08000bc3 	.word	0x08000bc3
	    case 0x80: //TC y LC disabled
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, 0);
 8000b50:	2200      	movs	r2, #0
 8000b52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b56:	4826      	ldr	r0, [pc, #152]	; (8000bf0 <RECEIVE_MESSAGE+0x1e4>)
 8000b58:	f002 f886 	bl	8002c68 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b62:	4823      	ldr	r0, [pc, #140]	; (8000bf0 <RECEIVE_MESSAGE+0x1e4>)
 8000b64:	f002 f880 	bl	8002c68 <HAL_GPIO_WritePin>
	    	TC = 0;
 8000b68:	4b22      	ldr	r3, [pc, #136]	; (8000bf4 <RECEIVE_MESSAGE+0x1e8>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	701a      	strb	r2, [r3, #0]
	    	LC = 0;
 8000b6e:	4b22      	ldr	r3, [pc, #136]	; (8000bf8 <RECEIVE_MESSAGE+0x1ec>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	701a      	strb	r2, [r3, #0]
	    	break;
 8000b74:	e038      	b.n	8000be8 <RECEIVE_MESSAGE+0x1dc>
	    case 0x81: //TC enabled
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, 1);
 8000b76:	2201      	movs	r2, #1
 8000b78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b7c:	481c      	ldr	r0, [pc, #112]	; (8000bf0 <RECEIVE_MESSAGE+0x1e4>)
 8000b7e:	f002 f873 	bl	8002c68 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b88:	4819      	ldr	r0, [pc, #100]	; (8000bf0 <RECEIVE_MESSAGE+0x1e4>)
 8000b8a:	f002 f86d 	bl	8002c68 <HAL_GPIO_WritePin>
	    	TC = 1;
 8000b8e:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <RECEIVE_MESSAGE+0x1e8>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	701a      	strb	r2, [r3, #0]
	    	LC = 0;
 8000b94:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <RECEIVE_MESSAGE+0x1ec>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]
	    	break;
 8000b9a:	e025      	b.n	8000be8 <RECEIVE_MESSAGE+0x1dc>
	    case 0x82: //LC enabled
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, 0);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ba2:	4813      	ldr	r0, [pc, #76]	; (8000bf0 <RECEIVE_MESSAGE+0x1e4>)
 8000ba4:	f002 f860 	bl	8002c68 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bae:	4810      	ldr	r0, [pc, #64]	; (8000bf0 <RECEIVE_MESSAGE+0x1e4>)
 8000bb0:	f002 f85a 	bl	8002c68 <HAL_GPIO_WritePin>
	    	TC = 0;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <RECEIVE_MESSAGE+0x1e8>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	701a      	strb	r2, [r3, #0]
	    	LC = 1;
 8000bba:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <RECEIVE_MESSAGE+0x1ec>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	701a      	strb	r2, [r3, #0]
	    	break;
 8000bc0:	e012      	b.n	8000be8 <RECEIVE_MESSAGE+0x1dc>
	    case 0x83: //TC y LC enabled
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, 1);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bc8:	4809      	ldr	r0, [pc, #36]	; (8000bf0 <RECEIVE_MESSAGE+0x1e4>)
 8000bca:	f002 f84d 	bl	8002c68 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bd4:	4806      	ldr	r0, [pc, #24]	; (8000bf0 <RECEIVE_MESSAGE+0x1e4>)
 8000bd6:	f002 f847 	bl	8002c68 <HAL_GPIO_WritePin>
	    	TC = 1;
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <RECEIVE_MESSAGE+0x1e8>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	701a      	strb	r2, [r3, #0]
	    	LC = 1;
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <RECEIVE_MESSAGE+0x1ec>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	701a      	strb	r2, [r3, #0]
	    	break;
 8000be6:	bf00      	nop
	}
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000224 	.word	0x20000224
 8000bf0:	40020c00 	.word	0x40020c00
 8000bf4:	20000238 	.word	0x20000238
 8000bf8:	20000239 	.word	0x20000239

08000bfc <combineBytes>:

uint16_t combineBytes(uint8_t highByte, uint8_t lowByte) {
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	460a      	mov	r2, r1
 8000c06:	71fb      	strb	r3, [r7, #7]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	71bb      	strb	r3, [r7, #6]
    return ((uint16_t)highByte << 8) | lowByte; //Desplaza los 2 primeros bytes a su posición correcta y añade los 2 últimos bytes
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	021b      	lsls	r3, r3, #8
 8000c10:	b21a      	sxth	r2, r3
 8000c12:	79bb      	ldrb	r3, [r7, #6]
 8000c14:	b21b      	sxth	r3, r3
 8000c16:	4313      	orrs	r3, r2
 8000c18:	b21b      	sxth	r3, r3
 8000c1a:	b29b      	uxth	r3, r3
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){ //Para recibir mensajes del bus //<-- REVISAR hcan o hcan1
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000c30:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8000c32:	4a19      	ldr	r2, [pc, #100]	; (8000c98 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000c34:	2100      	movs	r1, #0
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f001 f9b7 	bl	8001faa <HAL_CAN_GetRxMessage>
	if (RxHeader.StdId == 0x181){
 8000c3c:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f240 1281 	movw	r2, #385	; 0x181
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d101      	bne.n	8000c4c <HAL_CAN_RxFifo0MsgPendingCallback+0x24>
		RECEIVE_MESSAGE();
 8000c48:	f7ff fee0 	bl	8000a0c <RECEIVE_MESSAGE>
	}
	if (RxHeader.StdId == 0x701){
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f240 7201 	movw	r2, #1793	; 0x701
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d10a      	bne.n	8000c6e <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_8); //Heartbeat
 8000c58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c5c:	480f      	ldr	r0, [pc, #60]	; (8000c9c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000c5e:	f002 f81c 	bl	8002c9a <HAL_GPIO_TogglePin>
		//Activar las interrupciones
			HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000c62:	2007      	movs	r0, #7
 8000c64:	f001 fe23 	bl	80028ae <HAL_NVIC_EnableIRQ>
			HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000c68:	2008      	movs	r0, #8
 8000c6a:	f001 fe20 	bl	80028ae <HAL_NVIC_EnableIRQ>
	}
	if (RxHeader.StdId == 0x381){
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f240 3281 	movw	r2, #897	; 0x381
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d107      	bne.n	8000c8a <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
		highByte = RxData[0];
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8000c7c:	781a      	ldrb	r2, [r3, #0]
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000c80:	701a      	strb	r2, [r3, #0]
		lowByte = RxData[1];
 8000c82:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8000c84:	785a      	ldrb	r2, [r3, #1]
 8000c86:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000c88:	701a      	strb	r2, [r3, #0]
	}
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000224 	.word	0x20000224
 8000c98:	20000200 	.word	0x20000200
 8000c9c:	40020c00 	.word	0x40020c00
 8000ca0:	2000027a 	.word	0x2000027a
 8000ca4:	2000027b 	.word	0x2000027b

08000ca8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){ //Heartbeat
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2){
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cb8:	d122      	bne.n	8000d00 <HAL_TIM_PeriodElapsedCallback+0x58>
	    TxHeader.DLC = 1; //Data length
 8000cba:	4b27      	ldr	r3, [pc, #156]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	611a      	str	r2, [r3, #16]
	    TxHeader.IDE = CAN_ID_STD;
 8000cc0:	4b25      	ldr	r3, [pc, #148]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
	    TxHeader.RTR = CAN_RTR_DATA;
 8000cc6:	4b24      	ldr	r3, [pc, #144]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	60da      	str	r2, [r3, #12]
	    TxHeader.StdId = 0x702; //ID (identificador del enviador)
 8000ccc:	4b22      	ldr	r3, [pc, #136]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000cce:	f240 7202 	movw	r2, #1794	; 0x702
 8000cd2:	601a      	str	r2, [r3, #0]

	    if(i == 0){
 8000cd4:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d108      	bne.n	8000cee <HAL_TIM_PeriodElapsedCallback+0x46>
	    	TxData[0] = 0x80;
 8000cdc:	4b20      	ldr	r3, [pc, #128]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000cde:	2280      	movs	r2, #128	; 0x80
 8000ce0:	701a      	strb	r2, [r3, #0]
	    	i ++;
 8000ce2:	4b1e      	ldr	r3, [pc, #120]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	4a1c      	ldr	r2, [pc, #112]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000cea:	6013      	str	r3, [r2, #0]
 8000cec:	e002      	b.n	8000cf4 <HAL_TIM_PeriodElapsedCallback+0x4c>
	    } else {
	    	TxData[0] = 0x01;
 8000cee:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	701a      	strb	r2, [r3, #0]
	    }

	    HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox[1]);
 8000cf4:	4b1b      	ldr	r3, [pc, #108]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000cf6:	4a1a      	ldr	r2, [pc, #104]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000cf8:	4917      	ldr	r1, [pc, #92]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000cfa:	481b      	ldr	r0, [pc, #108]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000cfc:	f001 f87a 	bl	8001df4 <HAL_CAN_AddTxMessage>
	}
	if(htim->Instance==TIM3){
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a19      	ldr	r2, [pc, #100]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d11a      	bne.n	8000d40 <HAL_TIM_PeriodElapsedCallback+0x98>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3)){
 8000d0a:	2108      	movs	r1, #8
 8000d0c:	4818      	ldr	r0, [pc, #96]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000d0e:	f001 ff93 	bl	8002c38 <HAL_GPIO_ReadPin>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d003      	beq.n	8000d20 <HAL_TIM_PeriodElapsedCallback+0x78>
			LC = 1;
 8000d18:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	701a      	strb	r2, [r3, #0]
 8000d1e:	e00a      	b.n	8000d36 <HAL_TIM_PeriodElapsedCallback+0x8e>
		} else {
			if (TC == 0){
 8000d20:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d103      	bne.n	8000d30 <HAL_TIM_PeriodElapsedCallback+0x88>
				TC = 1;
 8000d28:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	701a      	strb	r2, [r3, #0]
 8000d2e:	e002      	b.n	8000d36 <HAL_TIM_PeriodElapsedCallback+0x8e>
			} else {
				TC = 0;
 8000d30:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
			}
		}
		HAL_TIM_Base_Stop_IT(&htim3);
 8000d36:	4811      	ldr	r0, [pc, #68]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000d38:	f003 f972 	bl	8004020 <HAL_TIM_Base_Stop_IT>
		SEND_MESSAGE();
 8000d3c:	f7ff fd28 	bl	8000790 <SEND_MESSAGE>
	}
	if (htim->Instance == TIM4){
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a0e      	ldr	r2, [pc, #56]	; (8000d80 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d102      	bne.n	8000d50 <HAL_TIM_PeriodElapsedCallback+0xa8>
		lcd_update(t_pantalla);
 8000d4a:	480e      	ldr	r0, [pc, #56]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000d4c:	f7ff fcee 	bl	800072c <lcd_update>
	}
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	200001e8 	.word	0x200001e8
 8000d5c:	2000023c 	.word	0x2000023c
 8000d60:	2000021c 	.word	0x2000021c
 8000d64:	20000230 	.word	0x20000230
 8000d68:	20000094 	.word	0x20000094
 8000d6c:	40000400 	.word	0x40000400
 8000d70:	40020000 	.word	0x40020000
 8000d74:	20000239 	.word	0x20000239
 8000d78:	20000238 	.word	0x20000238
 8000d7c:	20000158 	.word	0x20000158
 8000d80:	40000800 	.word	0x40000800
 8000d84:	2000024c 	.word	0x2000024c

08000d88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d8c:	f000 fd7c 	bl	8001888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d90:	f000 f902 	bl	8000f98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d94:	f000 fadc 	bl	8001350 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000d98:	f000 f968 	bl	800106c <MX_CAN1_Init>
  MX_TIM2_Init();
 8000d9c:	f000 f9e8 	bl	8001170 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000da0:	f000 fa34 	bl	800120c <MX_TIM3_Init>
  MX_I2C1_Init();
 8000da4:	f000 f9b6 	bl	8001114 <MX_I2C1_Init>
  MX_TIM4_Init();
 8000da8:	f000 fa84 	bl	80012b4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000dac:	485f      	ldr	r0, [pc, #380]	; (8000f2c <main+0x1a4>)
 8000dae:	f000 ffdd 	bl	8001d6c <HAL_CAN_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000db2:	485f      	ldr	r0, [pc, #380]	; (8000f30 <main+0x1a8>)
 8000db4:	f003 f8c4 	bl	8003f40 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000db8:	485e      	ldr	r0, [pc, #376]	; (8000f34 <main+0x1ac>)
 8000dba:	f003 f8c1 	bl	8003f40 <HAL_TIM_Base_Start_IT>
  lcd_init();
 8000dbe:	f7ff fc41 	bl	8000644 <lcd_init>


    //Activar la notificacion de que hay mensajes para recibir
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000dc2:	2102      	movs	r1, #2
 8000dc4:	4859      	ldr	r0, [pc, #356]	; (8000f2c <main+0x1a4>)
 8000dc6:	f001 fa02 	bl	80021ce <HAL_CAN_ActivateNotification>

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dd0:	4859      	ldr	r0, [pc, #356]	; (8000f38 <main+0x1b0>)
 8000dd2:	f001 ff49 	bl	8002c68 <HAL_GPIO_WritePin>

    //Al principio están desactivadas las interrrupciones de los botones
    HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8000dd6:	2007      	movs	r0, #7
 8000dd8:	f001 fd77 	bl	80028ca <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8000ddc:	2008      	movs	r0, #8
 8000dde:	f001 fd74 	bl	80028ca <HAL_NVIC_DisableIRQ>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (buttonUP==1 || buttonDOWN==1){
 8000de2:	4b56      	ldr	r3, [pc, #344]	; (8000f3c <main+0x1b4>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d003      	beq.n	8000df2 <main+0x6a>
 8000dea:	4b55      	ldr	r3, [pc, #340]	; (8000f40 <main+0x1b8>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d101      	bne.n	8000df6 <main+0x6e>
		  MAPChange();
 8000df2:	f7ff fd99 	bl	8000928 <MAPChange>
	  }

	  if (buttonCTRL==1){
 8000df6:	4b53      	ldr	r3, [pc, #332]	; (8000f44 <main+0x1bc>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d113      	bne.n	8000e26 <main+0x9e>
		  if (debouncer(&buttonCTRL, GPIOA, GPIO_PIN_3)){
 8000dfe:	2208      	movs	r2, #8
 8000e00:	4951      	ldr	r1, [pc, #324]	; (8000f48 <main+0x1c0>)
 8000e02:	4850      	ldr	r0, [pc, #320]	; (8000f44 <main+0x1bc>)
 8000e04:	f7ff fd40 	bl	8000888 <debouncer>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d00b      	beq.n	8000e26 <main+0x9e>
				buttonUP = 0;
 8000e0e:	4b4b      	ldr	r3, [pc, #300]	; (8000f3c <main+0x1b4>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
				buttonDOWN = 0;
 8000e14:	4b4a      	ldr	r3, [pc, #296]	; (8000f40 <main+0x1b8>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
				buttonCTRL = 0;
 8000e1a:	4b4a      	ldr	r3, [pc, #296]	; (8000f44 <main+0x1bc>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
		  	HAL_TIM_Base_Start_IT(&htim3);
 8000e20:	484a      	ldr	r0, [pc, #296]	; (8000f4c <main+0x1c4>)
 8000e22:	f003 f88d 	bl	8003f40 <HAL_TIM_Base_Start_IT>
		  }
	  }


	  // Recombinar los bytes en un valor de 16 bits
	  rpm = combineBytes(highByte, lowByte);
 8000e26:	4b4a      	ldr	r3, [pc, #296]	; (8000f50 <main+0x1c8>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	4a4a      	ldr	r2, [pc, #296]	; (8000f54 <main+0x1cc>)
 8000e2c:	7812      	ldrb	r2, [r2, #0]
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff fee3 	bl	8000bfc <combineBytes>
 8000e36:	4603      	mov	r3, r0
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b47      	ldr	r3, [pc, #284]	; (8000f58 <main+0x1d0>)
 8000e3c:	801a      	strh	r2, [r3, #0]

	  sprintf(t_mapa, "%i", mapaACT);
 8000e3e:	4b47      	ldr	r3, [pc, #284]	; (8000f5c <main+0x1d4>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	461a      	mov	r2, r3
 8000e44:	4946      	ldr	r1, [pc, #280]	; (8000f60 <main+0x1d8>)
 8000e46:	4847      	ldr	r0, [pc, #284]	; (8000f64 <main+0x1dc>)
 8000e48:	f003 fd0c 	bl	8004864 <siprintf>
	  sprintf(t_rpm, "%u", rpm);
 8000e4c:	4b42      	ldr	r3, [pc, #264]	; (8000f58 <main+0x1d0>)
 8000e4e:	881b      	ldrh	r3, [r3, #0]
 8000e50:	461a      	mov	r2, r3
 8000e52:	4945      	ldr	r1, [pc, #276]	; (8000f68 <main+0x1e0>)
 8000e54:	4845      	ldr	r0, [pc, #276]	; (8000f6c <main+0x1e4>)
 8000e56:	f003 fd05 	bl	8004864 <siprintf>
	  if (TC == 1){
 8000e5a:	4b45      	ldr	r3, [pc, #276]	; (8000f70 <main+0x1e8>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d10a      	bne.n	8000e78 <main+0xf0>
		  strcpy(t_pantalla, "TC:ON ");
 8000e62:	4b44      	ldr	r3, [pc, #272]	; (8000f74 <main+0x1ec>)
 8000e64:	4a44      	ldr	r2, [pc, #272]	; (8000f78 <main+0x1f0>)
 8000e66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e6a:	6018      	str	r0, [r3, #0]
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	8019      	strh	r1, [r3, #0]
 8000e70:	3302      	adds	r3, #2
 8000e72:	0c0a      	lsrs	r2, r1, #16
 8000e74:	701a      	strb	r2, [r3, #0]
 8000e76:	e009      	b.n	8000e8c <main+0x104>
	  } else {
		  strcpy(t_pantalla, "TC:OFF");
 8000e78:	4b3e      	ldr	r3, [pc, #248]	; (8000f74 <main+0x1ec>)
 8000e7a:	4a40      	ldr	r2, [pc, #256]	; (8000f7c <main+0x1f4>)
 8000e7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e80:	6018      	str	r0, [r3, #0]
 8000e82:	3304      	adds	r3, #4
 8000e84:	8019      	strh	r1, [r3, #0]
 8000e86:	3302      	adds	r3, #2
 8000e88:	0c0a      	lsrs	r2, r1, #16
 8000e8a:	701a      	strb	r2, [r3, #0]
	  }
	  if (LC == 1){
 8000e8c:	4b3c      	ldr	r3, [pc, #240]	; (8000f80 <main+0x1f8>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d10d      	bne.n	8000eb0 <main+0x128>
		  strcat(t_pantalla, " LC:ON ");
 8000e94:	4837      	ldr	r0, [pc, #220]	; (8000f74 <main+0x1ec>)
 8000e96:	f7ff f99b 	bl	80001d0 <strlen>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4b35      	ldr	r3, [pc, #212]	; (8000f74 <main+0x1ec>)
 8000ea0:	4413      	add	r3, r2
 8000ea2:	4938      	ldr	r1, [pc, #224]	; (8000f84 <main+0x1fc>)
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	cb03      	ldmia	r3!, {r0, r1}
 8000eaa:	6010      	str	r0, [r2, #0]
 8000eac:	6051      	str	r1, [r2, #4]
 8000eae:	e00c      	b.n	8000eca <main+0x142>
	  } else {
		  strcat(t_pantalla, " LC:OFF");
 8000eb0:	4830      	ldr	r0, [pc, #192]	; (8000f74 <main+0x1ec>)
 8000eb2:	f7ff f98d 	bl	80001d0 <strlen>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b2e      	ldr	r3, [pc, #184]	; (8000f74 <main+0x1ec>)
 8000ebc:	4413      	add	r3, r2
 8000ebe:	4932      	ldr	r1, [pc, #200]	; (8000f88 <main+0x200>)
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	cb03      	ldmia	r3!, {r0, r1}
 8000ec6:	6010      	str	r0, [r2, #0]
 8000ec8:	6051      	str	r1, [r2, #4]
	  }
	  strcat (t_pantalla, "   MAPA:");
 8000eca:	482a      	ldr	r0, [pc, #168]	; (8000f74 <main+0x1ec>)
 8000ecc:	f7ff f980 	bl	80001d0 <strlen>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	4b27      	ldr	r3, [pc, #156]	; (8000f74 <main+0x1ec>)
 8000ed6:	4413      	add	r3, r2
 8000ed8:	492c      	ldr	r1, [pc, #176]	; (8000f8c <main+0x204>)
 8000eda:	461a      	mov	r2, r3
 8000edc:	460b      	mov	r3, r1
 8000ede:	cb03      	ldmia	r3!, {r0, r1}
 8000ee0:	6010      	str	r0, [r2, #0]
 8000ee2:	6051      	str	r1, [r2, #4]
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	7213      	strb	r3, [r2, #8]
	  strcat(t_pantalla, t_mapa);
 8000ee8:	491e      	ldr	r1, [pc, #120]	; (8000f64 <main+0x1dc>)
 8000eea:	4822      	ldr	r0, [pc, #136]	; (8000f74 <main+0x1ec>)
 8000eec:	f003 fcda 	bl	80048a4 <strcat>
	  strcat(t_pantalla, " RPM:");
 8000ef0:	4820      	ldr	r0, [pc, #128]	; (8000f74 <main+0x1ec>)
 8000ef2:	f7ff f96d 	bl	80001d0 <strlen>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <main+0x1ec>)
 8000efc:	4413      	add	r3, r2
 8000efe:	4a24      	ldr	r2, [pc, #144]	; (8000f90 <main+0x208>)
 8000f00:	6810      	ldr	r0, [r2, #0]
 8000f02:	6018      	str	r0, [r3, #0]
 8000f04:	8892      	ldrh	r2, [r2, #4]
 8000f06:	809a      	strh	r2, [r3, #4]
	  strcat(t_pantalla, t_rpm);
 8000f08:	4918      	ldr	r1, [pc, #96]	; (8000f6c <main+0x1e4>)
 8000f0a:	481a      	ldr	r0, [pc, #104]	; (8000f74 <main+0x1ec>)
 8000f0c:	f003 fcca 	bl	80048a4 <strcat>
	  strcat(t_pantalla, "    ");
 8000f10:	4818      	ldr	r0, [pc, #96]	; (8000f74 <main+0x1ec>)
 8000f12:	f7ff f95d 	bl	80001d0 <strlen>
 8000f16:	4603      	mov	r3, r0
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <main+0x1ec>)
 8000f1c:	4413      	add	r3, r2
 8000f1e:	4a1d      	ldr	r2, [pc, #116]	; (8000f94 <main+0x20c>)
 8000f20:	6810      	ldr	r0, [r2, #0]
 8000f22:	6018      	str	r0, [r3, #0]
 8000f24:	7912      	ldrb	r2, [r2, #4]
 8000f26:	711a      	strb	r2, [r3, #4]
	  if (buttonUP==1 || buttonDOWN==1){
 8000f28:	e75b      	b.n	8000de2 <main+0x5a>
 8000f2a:	bf00      	nop
 8000f2c:	20000094 	.word	0x20000094
 8000f30:	20000110 	.word	0x20000110
 8000f34:	200001a0 	.word	0x200001a0
 8000f38:	40020c00 	.word	0x40020c00
 8000f3c:	20000240 	.word	0x20000240
 8000f40:	20000244 	.word	0x20000244
 8000f44:	20000248 	.word	0x20000248
 8000f48:	40020000 	.word	0x40020000
 8000f4c:	20000158 	.word	0x20000158
 8000f50:	2000027a 	.word	0x2000027a
 8000f54:	2000027b 	.word	0x2000027b
 8000f58:	2000023a 	.word	0x2000023a
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	08005174 	.word	0x08005174
 8000f64:	20000270 	.word	0x20000270
 8000f68:	08005178 	.word	0x08005178
 8000f6c:	20000274 	.word	0x20000274
 8000f70:	20000238 	.word	0x20000238
 8000f74:	2000024c 	.word	0x2000024c
 8000f78:	0800517c 	.word	0x0800517c
 8000f7c:	08005184 	.word	0x08005184
 8000f80:	20000239 	.word	0x20000239
 8000f84:	0800518c 	.word	0x0800518c
 8000f88:	08005194 	.word	0x08005194
 8000f8c:	0800519c 	.word	0x0800519c
 8000f90:	080051a8 	.word	0x080051a8
 8000f94:	080051b0 	.word	0x080051b0

08000f98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b094      	sub	sp, #80	; 0x50
 8000f9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9e:	f107 0320 	add.w	r3, r7, #32
 8000fa2:	2230      	movs	r2, #48	; 0x30
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f003 fc54 	bl	8004854 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fac:	f107 030c 	add.w	r3, r7, #12
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	4b28      	ldr	r3, [pc, #160]	; (8001064 <SystemClock_Config+0xcc>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc4:	4a27      	ldr	r2, [pc, #156]	; (8001064 <SystemClock_Config+0xcc>)
 8000fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fca:	6413      	str	r3, [r2, #64]	; 0x40
 8000fcc:	4b25      	ldr	r3, [pc, #148]	; (8001064 <SystemClock_Config+0xcc>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fd8:	2300      	movs	r3, #0
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	4b22      	ldr	r3, [pc, #136]	; (8001068 <SystemClock_Config+0xd0>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a21      	ldr	r2, [pc, #132]	; (8001068 <SystemClock_Config+0xd0>)
 8000fe2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe6:	6013      	str	r3, [r2, #0]
 8000fe8:	4b1f      	ldr	r3, [pc, #124]	; (8001068 <SystemClock_Config+0xd0>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ff8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ffe:	2302      	movs	r3, #2
 8001000:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001002:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001006:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001008:	2304      	movs	r3, #4
 800100a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800100c:	23a8      	movs	r3, #168	; 0xa8
 800100e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001010:	2302      	movs	r3, #2
 8001012:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001014:	2307      	movs	r3, #7
 8001016:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001018:	f107 0320 	add.w	r3, r7, #32
 800101c:	4618      	mov	r0, r3
 800101e:	f002 fabb 	bl	8003598 <HAL_RCC_OscConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001028:	f000 fa1a 	bl	8001460 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102c:	230f      	movs	r3, #15
 800102e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001030:	2302      	movs	r3, #2
 8001032:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001038:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800103c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800103e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001042:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	2105      	movs	r1, #5
 800104a:	4618      	mov	r0, r3
 800104c:	f002 fd1c 	bl	8003a88 <HAL_RCC_ClockConfig>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001056:	f000 fa03 	bl	8001460 <Error_Handler>
  }
}
 800105a:	bf00      	nop
 800105c:	3750      	adds	r7, #80	; 0x50
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40023800 	.word	0x40023800
 8001068:	40007000 	.word	0x40007000

0800106c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08a      	sub	sp, #40	; 0x28
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001072:	4b26      	ldr	r3, [pc, #152]	; (800110c <MX_CAN1_Init+0xa0>)
 8001074:	4a26      	ldr	r2, [pc, #152]	; (8001110 <MX_CAN1_Init+0xa4>)
 8001076:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 8001078:	4b24      	ldr	r3, [pc, #144]	; (800110c <MX_CAN1_Init+0xa0>)
 800107a:	2215      	movs	r2, #21
 800107c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800107e:	4b23      	ldr	r3, [pc, #140]	; (800110c <MX_CAN1_Init+0xa0>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001084:	4b21      	ldr	r3, [pc, #132]	; (800110c <MX_CAN1_Init+0xa0>)
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800108a:	4b20      	ldr	r3, [pc, #128]	; (800110c <MX_CAN1_Init+0xa0>)
 800108c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001090:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001092:	4b1e      	ldr	r3, [pc, #120]	; (800110c <MX_CAN1_Init+0xa0>)
 8001094:	2200      	movs	r2, #0
 8001096:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001098:	4b1c      	ldr	r3, [pc, #112]	; (800110c <MX_CAN1_Init+0xa0>)
 800109a:	2200      	movs	r2, #0
 800109c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 800109e:	4b1b      	ldr	r3, [pc, #108]	; (800110c <MX_CAN1_Init+0xa0>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 80010a4:	4b19      	ldr	r3, [pc, #100]	; (800110c <MX_CAN1_Init+0xa0>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80010aa:	4b18      	ldr	r3, [pc, #96]	; (800110c <MX_CAN1_Init+0xa0>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80010b0:	4b16      	ldr	r3, [pc, #88]	; (800110c <MX_CAN1_Init+0xa0>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 80010b6:	4b15      	ldr	r3, [pc, #84]	; (800110c <MX_CAN1_Init+0xa0>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80010bc:	4813      	ldr	r0, [pc, #76]	; (800110c <MX_CAN1_Init+0xa0>)
 80010be:	f000 fc79 	bl	80019b4 <HAL_CAN_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80010c8:	f000 f9ca 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

      canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80010cc:	2301      	movs	r3, #1
 80010ce:	623b      	str	r3, [r7, #32]
      canfilterconfig.FilterBank = 18; //which filter bank to use from the assigned ones
 80010d0:	2312      	movs	r3, #18
 80010d2:	617b      	str	r3, [r7, #20]
      canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0; //Para guardar el mensaje entrante
 80010d4:	2300      	movs	r3, #0
 80010d6:	613b      	str	r3, [r7, #16]
      canfilterconfig.FilterIdHigh = 0x101<<5;
 80010d8:	f242 0320 	movw	r3, #8224	; 0x2020
 80010dc:	603b      	str	r3, [r7, #0]
      canfilterconfig.FilterIdLow = 0x0000;
 80010de:	2300      	movs	r3, #0
 80010e0:	607b      	str	r3, [r7, #4]
      canfilterconfig.FilterMaskIdHigh = 0x101<<5; //Escribo en la posicion 5
 80010e2:	f242 0320 	movw	r3, #8224	; 0x2020
 80010e6:	60bb      	str	r3, [r7, #8]
      canfilterconfig.FilterMaskIdLow = 0x0000;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
      canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61bb      	str	r3, [r7, #24]
      canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80010f0:	2301      	movs	r3, #1
 80010f2:	61fb      	str	r3, [r7, #28]
      canfilterconfig.SlaveStartFilterBank = 20; //how many filters to assign to the CAN1 (master can)
 80010f4:	2314      	movs	r3, #20
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24

      HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80010f8:	463b      	mov	r3, r7
 80010fa:	4619      	mov	r1, r3
 80010fc:	4803      	ldr	r0, [pc, #12]	; (800110c <MX_CAN1_Init+0xa0>)
 80010fe:	f000 fd55 	bl	8001bac <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 8001102:	bf00      	nop
 8001104:	3728      	adds	r7, #40	; 0x28
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000094 	.word	0x20000094
 8001110:	40006400 	.word	0x40006400

08001114 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <MX_I2C1_Init+0x50>)
 800111a:	4a13      	ldr	r2, [pc, #76]	; (8001168 <MX_I2C1_Init+0x54>)
 800111c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <MX_I2C1_Init+0x50>)
 8001120:	4a12      	ldr	r2, [pc, #72]	; (800116c <MX_I2C1_Init+0x58>)
 8001122:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001124:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <MX_I2C1_Init+0x50>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800112a:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <MX_I2C1_Init+0x50>)
 800112c:	2200      	movs	r2, #0
 800112e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <MX_I2C1_Init+0x50>)
 8001132:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001136:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001138:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <MX_I2C1_Init+0x50>)
 800113a:	2200      	movs	r2, #0
 800113c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <MX_I2C1_Init+0x50>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001144:	4b07      	ldr	r3, [pc, #28]	; (8001164 <MX_I2C1_Init+0x50>)
 8001146:	2200      	movs	r2, #0
 8001148:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <MX_I2C1_Init+0x50>)
 800114c:	2200      	movs	r2, #0
 800114e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001150:	4804      	ldr	r0, [pc, #16]	; (8001164 <MX_I2C1_Init+0x50>)
 8001152:	f001 fdd5 	bl	8002d00 <HAL_I2C_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800115c:	f000 f980 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}
 8001164:	200000bc 	.word	0x200000bc
 8001168:	40005400 	.word	0x40005400
 800116c:	000186a0 	.word	0x000186a0

08001170 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001176:	f107 0308 	add.w	r3, r7, #8
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001184:	463b      	mov	r3, r7
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800118c:	4b1e      	ldr	r3, [pc, #120]	; (8001208 <MX_TIM2_Init+0x98>)
 800118e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001192:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 8001194:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <MX_TIM2_Init+0x98>)
 8001196:	f24a 420f 	movw	r2, #41999	; 0xa40f
 800119a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119c:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <MX_TIM2_Init+0x98>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 80011a2:	4b19      	ldr	r3, [pc, #100]	; (8001208 <MX_TIM2_Init+0x98>)
 80011a4:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80011a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011aa:	4b17      	ldr	r3, [pc, #92]	; (8001208 <MX_TIM2_Init+0x98>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b0:	4b15      	ldr	r3, [pc, #84]	; (8001208 <MX_TIM2_Init+0x98>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011b6:	4814      	ldr	r0, [pc, #80]	; (8001208 <MX_TIM2_Init+0x98>)
 80011b8:	f002 fe72 	bl	8003ea0 <HAL_TIM_Base_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80011c2:	f000 f94d 	bl	8001460 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011cc:	f107 0308 	add.w	r3, r7, #8
 80011d0:	4619      	mov	r1, r3
 80011d2:	480d      	ldr	r0, [pc, #52]	; (8001208 <MX_TIM2_Init+0x98>)
 80011d4:	f003 f85b 	bl	800428e <HAL_TIM_ConfigClockSource>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80011de:	f000 f93f 	bl	8001460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e2:	2300      	movs	r3, #0
 80011e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011ea:	463b      	mov	r3, r7
 80011ec:	4619      	mov	r1, r3
 80011ee:	4806      	ldr	r0, [pc, #24]	; (8001208 <MX_TIM2_Init+0x98>)
 80011f0:	f003 fa76 	bl	80046e0 <HAL_TIMEx_MasterConfigSynchronization>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80011fa:	f000 f931 	bl	8001460 <Error_Handler>
  /* USER CODE BEGIN TIM2_Init 2 */


  /* USER CODE END TIM2_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000110 	.word	0x20000110

0800120c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001212:	f107 0308 	add.w	r3, r7, #8
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001220:	463b      	mov	r3, r7
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001228:	4b20      	ldr	r3, [pc, #128]	; (80012ac <MX_TIM3_Init+0xa0>)
 800122a:	4a21      	ldr	r2, [pc, #132]	; (80012b0 <MX_TIM3_Init+0xa4>)
 800122c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 41999;
 800122e:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <MX_TIM3_Init+0xa0>)
 8001230:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001234:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001236:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <MX_TIM3_Init+0xa0>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2999;
 800123c:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <MX_TIM3_Init+0xa0>)
 800123e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001242:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001244:	4b19      	ldr	r3, [pc, #100]	; (80012ac <MX_TIM3_Init+0xa0>)
 8001246:	2200      	movs	r2, #0
 8001248:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800124a:	4b18      	ldr	r3, [pc, #96]	; (80012ac <MX_TIM3_Init+0xa0>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001250:	4816      	ldr	r0, [pc, #88]	; (80012ac <MX_TIM3_Init+0xa0>)
 8001252:	f002 fe25 	bl	8003ea0 <HAL_TIM_Base_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800125c:	f000 f900 	bl	8001460 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001260:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001264:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001266:	f107 0308 	add.w	r3, r7, #8
 800126a:	4619      	mov	r1, r3
 800126c:	480f      	ldr	r0, [pc, #60]	; (80012ac <MX_TIM3_Init+0xa0>)
 800126e:	f003 f80e 	bl	800428e <HAL_TIM_ConfigClockSource>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001278:	f000 f8f2 	bl	8001460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127c:	2300      	movs	r3, #0
 800127e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001280:	2300      	movs	r3, #0
 8001282:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001284:	463b      	mov	r3, r7
 8001286:	4619      	mov	r1, r3
 8001288:	4808      	ldr	r0, [pc, #32]	; (80012ac <MX_TIM3_Init+0xa0>)
 800128a:	f003 fa29 	bl	80046e0 <HAL_TIMEx_MasterConfigSynchronization>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001294:	f000 f8e4 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  // Limpiar cualquier interrupción pendiente
  __HAL_TIM_CLEAR_FLAG(&htim3, TIM_IT_UPDATE);
 8001298:	4b04      	ldr	r3, [pc, #16]	; (80012ac <MX_TIM3_Init+0xa0>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f06f 0201 	mvn.w	r2, #1
 80012a0:	611a      	str	r2, [r3, #16]

  /* USER CODE END TIM3_Init 2 */

}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000158 	.word	0x20000158
 80012b0:	40000400 	.word	0x40000400

080012b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ba:	f107 0308 	add.w	r3, r7, #8
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c8:	463b      	mov	r3, r7
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012d0:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <MX_TIM4_Init+0x94>)
 80012d2:	4a1e      	ldr	r2, [pc, #120]	; (800134c <MX_TIM4_Init+0x98>)
 80012d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 41999;
 80012d6:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <MX_TIM4_Init+0x94>)
 80012d8:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80012dc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012de:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <MX_TIM4_Init+0x94>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 80012e4:	4b18      	ldr	r3, [pc, #96]	; (8001348 <MX_TIM4_Init+0x94>)
 80012e6:	f240 12f3 	movw	r2, #499	; 0x1f3
 80012ea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ec:	4b16      	ldr	r3, [pc, #88]	; (8001348 <MX_TIM4_Init+0x94>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <MX_TIM4_Init+0x94>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80012f8:	4813      	ldr	r0, [pc, #76]	; (8001348 <MX_TIM4_Init+0x94>)
 80012fa:	f002 fdd1 	bl	8003ea0 <HAL_TIM_Base_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001304:	f000 f8ac 	bl	8001460 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800130c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800130e:	f107 0308 	add.w	r3, r7, #8
 8001312:	4619      	mov	r1, r3
 8001314:	480c      	ldr	r0, [pc, #48]	; (8001348 <MX_TIM4_Init+0x94>)
 8001316:	f002 ffba 	bl	800428e <HAL_TIM_ConfigClockSource>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001320:	f000 f89e 	bl	8001460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001324:	2300      	movs	r3, #0
 8001326:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001328:	2300      	movs	r3, #0
 800132a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800132c:	463b      	mov	r3, r7
 800132e:	4619      	mov	r1, r3
 8001330:	4805      	ldr	r0, [pc, #20]	; (8001348 <MX_TIM4_Init+0x94>)
 8001332:	f003 f9d5 	bl	80046e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800133c:	f000 f890 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	200001a0 	.word	0x200001a0
 800134c:	40000800 	.word	0x40000800

08001350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	; 0x28
 8001354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	4b3a      	ldr	r3, [pc, #232]	; (8001454 <MX_GPIO_Init+0x104>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a39      	ldr	r2, [pc, #228]	; (8001454 <MX_GPIO_Init+0x104>)
 8001370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b37      	ldr	r3, [pc, #220]	; (8001454 <MX_GPIO_Init+0x104>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	4b33      	ldr	r3, [pc, #204]	; (8001454 <MX_GPIO_Init+0x104>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a32      	ldr	r2, [pc, #200]	; (8001454 <MX_GPIO_Init+0x104>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b30      	ldr	r3, [pc, #192]	; (8001454 <MX_GPIO_Init+0x104>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	4b2c      	ldr	r3, [pc, #176]	; (8001454 <MX_GPIO_Init+0x104>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a2b      	ldr	r2, [pc, #172]	; (8001454 <MX_GPIO_Init+0x104>)
 80013a8:	f043 0308 	orr.w	r3, r3, #8
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b29      	ldr	r3, [pc, #164]	; (8001454 <MX_GPIO_Init+0x104>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	607b      	str	r3, [r7, #4]
 80013be:	4b25      	ldr	r3, [pc, #148]	; (8001454 <MX_GPIO_Init+0x104>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a24      	ldr	r2, [pc, #144]	; (8001454 <MX_GPIO_Init+0x104>)
 80013c4:	f043 0302 	orr.w	r3, r3, #2
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b22      	ldr	r3, [pc, #136]	; (8001454 <MX_GPIO_Init+0x104>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80013d6:	2200      	movs	r2, #0
 80013d8:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80013dc:	481e      	ldr	r0, [pc, #120]	; (8001458 <MX_GPIO_Init+0x108>)
 80013de:	f001 fc43 	bl	8002c68 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80013e2:	230e      	movs	r3, #14
 80013e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013ec:	2302      	movs	r3, #2
 80013ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	4619      	mov	r1, r3
 80013f6:	4819      	ldr	r0, [pc, #100]	; (800145c <MX_GPIO_Init+0x10c>)
 80013f8:	f001 fa82 	bl	8002900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80013fc:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001400:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001402:	2301      	movs	r3, #1
 8001404:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2300      	movs	r3, #0
 800140c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	4619      	mov	r1, r3
 8001414:	4810      	ldr	r0, [pc, #64]	; (8001458 <MX_GPIO_Init+0x108>)
 8001416:	f001 fa73 	bl	8002900 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800141a:	2200      	movs	r2, #0
 800141c:	2100      	movs	r1, #0
 800141e:	2007      	movs	r0, #7
 8001420:	f001 fa29 	bl	8002876 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001424:	2007      	movs	r0, #7
 8001426:	f001 fa42 	bl	80028ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	2100      	movs	r1, #0
 800142e:	2008      	movs	r0, #8
 8001430:	f001 fa21 	bl	8002876 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001434:	2008      	movs	r0, #8
 8001436:	f001 fa3a 	bl	80028ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800143a:	2200      	movs	r2, #0
 800143c:	2100      	movs	r1, #0
 800143e:	2009      	movs	r0, #9
 8001440:	f001 fa19 	bl	8002876 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001444:	2009      	movs	r0, #9
 8001446:	f001 fa32 	bl	80028ae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 800144a:	bf00      	nop
 800144c:	3728      	adds	r7, #40	; 0x28
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40023800 	.word	0x40023800
 8001458:	40020c00 	.word	0x40020c00
 800145c:	40020000 	.word	0x40020000

08001460 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001464:	b672      	cpsid	i
}
 8001466:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001468:	e7fe      	b.n	8001468 <Error_Handler+0x8>
	...

0800146c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <HAL_MspInit+0x4c>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	4a0f      	ldr	r2, [pc, #60]	; (80014b8 <HAL_MspInit+0x4c>)
 800147c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001480:	6453      	str	r3, [r2, #68]	; 0x44
 8001482:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <HAL_MspInit+0x4c>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	603b      	str	r3, [r7, #0]
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <HAL_MspInit+0x4c>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	4a08      	ldr	r2, [pc, #32]	; (80014b8 <HAL_MspInit+0x4c>)
 8001498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149c:	6413      	str	r3, [r2, #64]	; 0x40
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_MspInit+0x4c>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014aa:	2007      	movs	r0, #7
 80014ac:	f001 f9d8 	bl	8002860 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40023800 	.word	0x40023800

080014bc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	; 0x28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a26      	ldr	r2, [pc, #152]	; (8001574 <HAL_CAN_MspInit+0xb8>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d145      	bne.n	800156a <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	4b25      	ldr	r3, [pc, #148]	; (8001578 <HAL_CAN_MspInit+0xbc>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	4a24      	ldr	r2, [pc, #144]	; (8001578 <HAL_CAN_MspInit+0xbc>)
 80014e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014ec:	6413      	str	r3, [r2, #64]	; 0x40
 80014ee:	4b22      	ldr	r3, [pc, #136]	; (8001578 <HAL_CAN_MspInit+0xbc>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <HAL_CAN_MspInit+0xbc>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a1d      	ldr	r2, [pc, #116]	; (8001578 <HAL_CAN_MspInit+0xbc>)
 8001504:	f043 0302 	orr.w	r3, r3, #2
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <HAL_CAN_MspInit+0xbc>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001516:	f44f 7380 	mov.w	r3, #256	; 0x100
 800151a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151c:	2302      	movs	r3, #2
 800151e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001520:	2301      	movs	r3, #1
 8001522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001524:	2303      	movs	r3, #3
 8001526:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001528:	2309      	movs	r3, #9
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	4619      	mov	r1, r3
 8001532:	4812      	ldr	r0, [pc, #72]	; (800157c <HAL_CAN_MspInit+0xc0>)
 8001534:	f001 f9e4 	bl	8002900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001538:	f44f 7300 	mov.w	r3, #512	; 0x200
 800153c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153e:	2302      	movs	r3, #2
 8001540:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001546:	2303      	movs	r3, #3
 8001548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800154a:	2309      	movs	r3, #9
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	4619      	mov	r1, r3
 8001554:	4809      	ldr	r0, [pc, #36]	; (800157c <HAL_CAN_MspInit+0xc0>)
 8001556:	f001 f9d3 	bl	8002900 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800155a:	2200      	movs	r2, #0
 800155c:	2100      	movs	r1, #0
 800155e:	2014      	movs	r0, #20
 8001560:	f001 f989 	bl	8002876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001564:	2014      	movs	r0, #20
 8001566:	f001 f9a2 	bl	80028ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800156a:	bf00      	nop
 800156c:	3728      	adds	r7, #40	; 0x28
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40006400 	.word	0x40006400
 8001578:	40023800 	.word	0x40023800
 800157c:	40020400 	.word	0x40020400

08001580 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08a      	sub	sp, #40	; 0x28
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a19      	ldr	r2, [pc, #100]	; (8001604 <HAL_I2C_MspInit+0x84>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d12b      	bne.n	80015fa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
 80015a6:	4b18      	ldr	r3, [pc, #96]	; (8001608 <HAL_I2C_MspInit+0x88>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a17      	ldr	r2, [pc, #92]	; (8001608 <HAL_I2C_MspInit+0x88>)
 80015ac:	f043 0302 	orr.w	r3, r3, #2
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <HAL_I2C_MspInit+0x88>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015be:	23c0      	movs	r3, #192	; 0xc0
 80015c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015c2:	2312      	movs	r3, #18
 80015c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ca:	2303      	movs	r3, #3
 80015cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015ce:	2304      	movs	r3, #4
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	480c      	ldr	r0, [pc, #48]	; (800160c <HAL_I2C_MspInit+0x8c>)
 80015da:	f001 f991 	bl	8002900 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	4b09      	ldr	r3, [pc, #36]	; (8001608 <HAL_I2C_MspInit+0x88>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	4a08      	ldr	r2, [pc, #32]	; (8001608 <HAL_I2C_MspInit+0x88>)
 80015e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015ec:	6413      	str	r3, [r2, #64]	; 0x40
 80015ee:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_I2C_MspInit+0x88>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015fa:	bf00      	nop
 80015fc:	3728      	adds	r7, #40	; 0x28
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40005400 	.word	0x40005400
 8001608:	40023800 	.word	0x40023800
 800160c:	40020400 	.word	0x40020400

08001610 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001620:	d116      	bne.n	8001650 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
 8001626:	4b28      	ldr	r3, [pc, #160]	; (80016c8 <HAL_TIM_Base_MspInit+0xb8>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	4a27      	ldr	r2, [pc, #156]	; (80016c8 <HAL_TIM_Base_MspInit+0xb8>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6413      	str	r3, [r2, #64]	; 0x40
 8001632:	4b25      	ldr	r3, [pc, #148]	; (80016c8 <HAL_TIM_Base_MspInit+0xb8>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	201c      	movs	r0, #28
 8001644:	f001 f917 	bl	8002876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001648:	201c      	movs	r0, #28
 800164a:	f001 f930 	bl	80028ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800164e:	e036      	b.n	80016be <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a1d      	ldr	r2, [pc, #116]	; (80016cc <HAL_TIM_Base_MspInit+0xbc>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d116      	bne.n	8001688 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <HAL_TIM_Base_MspInit+0xb8>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	4a19      	ldr	r2, [pc, #100]	; (80016c8 <HAL_TIM_Base_MspInit+0xb8>)
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	6413      	str	r3, [r2, #64]	; 0x40
 800166a:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <HAL_TIM_Base_MspInit+0xb8>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2100      	movs	r1, #0
 800167a:	201d      	movs	r0, #29
 800167c:	f001 f8fb 	bl	8002876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001680:	201d      	movs	r0, #29
 8001682:	f001 f914 	bl	80028ae <HAL_NVIC_EnableIRQ>
}
 8001686:	e01a      	b.n	80016be <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a10      	ldr	r2, [pc, #64]	; (80016d0 <HAL_TIM_Base_MspInit+0xc0>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d115      	bne.n	80016be <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <HAL_TIM_Base_MspInit+0xb8>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	4a0b      	ldr	r2, [pc, #44]	; (80016c8 <HAL_TIM_Base_MspInit+0xb8>)
 800169c:	f043 0304 	orr.w	r3, r3, #4
 80016a0:	6413      	str	r3, [r2, #64]	; 0x40
 80016a2:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <HAL_TIM_Base_MspInit+0xb8>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	f003 0304 	and.w	r3, r3, #4
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2100      	movs	r1, #0
 80016b2:	201e      	movs	r0, #30
 80016b4:	f001 f8df 	bl	8002876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80016b8:	201e      	movs	r0, #30
 80016ba:	f001 f8f8 	bl	80028ae <HAL_NVIC_EnableIRQ>
}
 80016be:	bf00      	nop
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40000400 	.word	0x40000400
 80016d0:	40000800 	.word	0x40000800

080016d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <NMI_Handler+0x4>

080016da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016de:	e7fe      	b.n	80016de <HardFault_Handler+0x4>

080016e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <MemManage_Handler+0x4>

080016e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ea:	e7fe      	b.n	80016ea <BusFault_Handler+0x4>

080016ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <UsageFault_Handler+0x4>

080016f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001720:	f000 f904 	bl	800192c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}

08001728 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800172c:	2002      	movs	r0, #2
 800172e:	f001 facf 	bl	8002cd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}

08001736 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800173a:	2004      	movs	r0, #4
 800173c:	f001 fac8 	bl	8002cd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}

08001744 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001748:	2008      	movs	r0, #8
 800174a:	f001 fac1 	bl	8002cd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001758:	4802      	ldr	r0, [pc, #8]	; (8001764 <CAN1_RX0_IRQHandler+0x10>)
 800175a:	f000 fd5e 	bl	800221a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000094 	.word	0x20000094

08001768 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800176c:	4802      	ldr	r0, [pc, #8]	; (8001778 <TIM2_IRQHandler+0x10>)
 800176e:	f002 fc86 	bl	800407e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000110 	.word	0x20000110

0800177c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001780:	4802      	ldr	r0, [pc, #8]	; (800178c <TIM3_IRQHandler+0x10>)
 8001782:	f002 fc7c 	bl	800407e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000158 	.word	0x20000158

08001790 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001794:	4802      	ldr	r0, [pc, #8]	; (80017a0 <TIM4_IRQHandler+0x10>)
 8001796:	f002 fc72 	bl	800407e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200001a0 	.word	0x200001a0

080017a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017ac:	4a14      	ldr	r2, [pc, #80]	; (8001800 <_sbrk+0x5c>)
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <_sbrk+0x60>)
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b8:	4b13      	ldr	r3, [pc, #76]	; (8001808 <_sbrk+0x64>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d102      	bne.n	80017c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <_sbrk+0x64>)
 80017c2:	4a12      	ldr	r2, [pc, #72]	; (800180c <_sbrk+0x68>)
 80017c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <_sbrk+0x64>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d207      	bcs.n	80017e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d4:	f003 f814 	bl	8004800 <__errno>
 80017d8:	4603      	mov	r3, r0
 80017da:	220c      	movs	r2, #12
 80017dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017de:	f04f 33ff 	mov.w	r3, #4294967295
 80017e2:	e009      	b.n	80017f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <_sbrk+0x64>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ea:	4b07      	ldr	r3, [pc, #28]	; (8001808 <_sbrk+0x64>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	4a05      	ldr	r2, [pc, #20]	; (8001808 <_sbrk+0x64>)
 80017f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017f6:	68fb      	ldr	r3, [r7, #12]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20020000 	.word	0x20020000
 8001804:	00000400 	.word	0x00000400
 8001808:	20000284 	.word	0x20000284
 800180c:	200002a0 	.word	0x200002a0

08001810 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <SystemInit+0x20>)
 8001816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800181a:	4a05      	ldr	r2, [pc, #20]	; (8001830 <SystemInit+0x20>)
 800181c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001820:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001834:	f8df d034 	ldr.w	sp, [pc, #52]	; 800186c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001838:	480d      	ldr	r0, [pc, #52]	; (8001870 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800183a:	490e      	ldr	r1, [pc, #56]	; (8001874 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800183c:	4a0e      	ldr	r2, [pc, #56]	; (8001878 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800183e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001840:	e002      	b.n	8001848 <LoopCopyDataInit>

08001842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001846:	3304      	adds	r3, #4

08001848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800184a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800184c:	d3f9      	bcc.n	8001842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800184e:	4a0b      	ldr	r2, [pc, #44]	; (800187c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001850:	4c0b      	ldr	r4, [pc, #44]	; (8001880 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001854:	e001      	b.n	800185a <LoopFillZerobss>

08001856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001858:	3204      	adds	r2, #4

0800185a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800185a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800185c:	d3fb      	bcc.n	8001856 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800185e:	f7ff ffd7 	bl	8001810 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001862:	f002 ffd3 	bl	800480c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001866:	f7ff fa8f 	bl	8000d88 <main>
  bx  lr    
 800186a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800186c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001874:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001878:	08005214 	.word	0x08005214
  ldr r2, =_sbss
 800187c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001880:	2000029c 	.word	0x2000029c

08001884 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001884:	e7fe      	b.n	8001884 <ADC_IRQHandler>
	...

08001888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800188c:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <HAL_Init+0x40>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a0d      	ldr	r2, [pc, #52]	; (80018c8 <HAL_Init+0x40>)
 8001892:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001896:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001898:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <HAL_Init+0x40>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <HAL_Init+0x40>)
 800189e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <HAL_Init+0x40>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a07      	ldr	r2, [pc, #28]	; (80018c8 <HAL_Init+0x40>)
 80018aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b0:	2003      	movs	r0, #3
 80018b2:	f000 ffd5 	bl	8002860 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018b6:	2000      	movs	r0, #0
 80018b8:	f000 f808 	bl	80018cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018bc:	f7ff fdd6 	bl	800146c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40023c00 	.word	0x40023c00

080018cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018d4:	4b12      	ldr	r3, [pc, #72]	; (8001920 <HAL_InitTick+0x54>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_InitTick+0x58>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	4619      	mov	r1, r3
 80018de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 fffb 	bl	80028e6 <HAL_SYSTICK_Config>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e00e      	b.n	8001918 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b0f      	cmp	r3, #15
 80018fe:	d80a      	bhi.n	8001916 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001900:	2200      	movs	r2, #0
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	f04f 30ff 	mov.w	r0, #4294967295
 8001908:	f000 ffb5 	bl	8002876 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800190c:	4a06      	ldr	r2, [pc, #24]	; (8001928 <HAL_InitTick+0x5c>)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001912:	2300      	movs	r3, #0
 8001914:	e000      	b.n	8001918 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
}
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000004 	.word	0x20000004
 8001924:	2000000c 	.word	0x2000000c
 8001928:	20000008 	.word	0x20000008

0800192c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <HAL_IncTick+0x20>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	461a      	mov	r2, r3
 8001936:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_IncTick+0x24>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4413      	add	r3, r2
 800193c:	4a04      	ldr	r2, [pc, #16]	; (8001950 <HAL_IncTick+0x24>)
 800193e:	6013      	str	r3, [r2, #0]
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	2000000c 	.word	0x2000000c
 8001950:	20000288 	.word	0x20000288

08001954 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return uwTick;
 8001958:	4b03      	ldr	r3, [pc, #12]	; (8001968 <HAL_GetTick+0x14>)
 800195a:	681b      	ldr	r3, [r3, #0]
}
 800195c:	4618      	mov	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	20000288 	.word	0x20000288

0800196c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001974:	f7ff ffee 	bl	8001954 <HAL_GetTick>
 8001978:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001984:	d005      	beq.n	8001992 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001986:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <HAL_Delay+0x44>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	461a      	mov	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4413      	add	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001992:	bf00      	nop
 8001994:	f7ff ffde 	bl	8001954 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d8f7      	bhi.n	8001994 <HAL_Delay+0x28>
  {
  }
}
 80019a4:	bf00      	nop
 80019a6:	bf00      	nop
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	2000000c 	.word	0x2000000c

080019b4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e0ed      	b.n	8001ba2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d102      	bne.n	80019d8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff fd72 	bl	80014bc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0201 	orr.w	r2, r2, #1
 80019e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019e8:	f7ff ffb4 	bl	8001954 <HAL_GetTick>
 80019ec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019ee:	e012      	b.n	8001a16 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019f0:	f7ff ffb0 	bl	8001954 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b0a      	cmp	r3, #10
 80019fc:	d90b      	bls.n	8001a16 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a02:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2205      	movs	r2, #5
 8001a0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e0c5      	b.n	8001ba2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0e5      	beq.n	80019f0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 0202 	bic.w	r2, r2, #2
 8001a32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a34:	f7ff ff8e 	bl	8001954 <HAL_GetTick>
 8001a38:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a3a:	e012      	b.n	8001a62 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a3c:	f7ff ff8a 	bl	8001954 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b0a      	cmp	r3, #10
 8001a48:	d90b      	bls.n	8001a62 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2205      	movs	r2, #5
 8001a5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e09f      	b.n	8001ba2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1e5      	bne.n	8001a3c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	7e1b      	ldrb	r3, [r3, #24]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d108      	bne.n	8001a8a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	e007      	b.n	8001a9a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	7e5b      	ldrb	r3, [r3, #25]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d108      	bne.n	8001ab4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	e007      	b.n	8001ac4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ac2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	7e9b      	ldrb	r3, [r3, #26]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d108      	bne.n	8001ade <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f042 0220 	orr.w	r2, r2, #32
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	e007      	b.n	8001aee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 0220 	bic.w	r2, r2, #32
 8001aec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	7edb      	ldrb	r3, [r3, #27]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d108      	bne.n	8001b08 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 0210 	bic.w	r2, r2, #16
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	e007      	b.n	8001b18 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f042 0210 	orr.w	r2, r2, #16
 8001b16:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	7f1b      	ldrb	r3, [r3, #28]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d108      	bne.n	8001b32 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 0208 	orr.w	r2, r2, #8
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	e007      	b.n	8001b42 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0208 	bic.w	r2, r2, #8
 8001b40:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	7f5b      	ldrb	r3, [r3, #29]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d108      	bne.n	8001b5c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f042 0204 	orr.w	r2, r2, #4
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	e007      	b.n	8001b6c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0204 	bic.w	r2, r2, #4
 8001b6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	431a      	orrs	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	695b      	ldr	r3, [r3, #20]
 8001b80:	ea42 0103 	orr.w	r1, r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	1e5a      	subs	r2, r3, #1
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b087      	sub	sp, #28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bc2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001bc4:	7cfb      	ldrb	r3, [r7, #19]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d003      	beq.n	8001bd2 <HAL_CAN_ConfigFilter+0x26>
 8001bca:	7cfb      	ldrb	r3, [r7, #19]
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	f040 80be 	bne.w	8001d4e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001bd2:	4b65      	ldr	r3, [pc, #404]	; (8001d68 <HAL_CAN_ConfigFilter+0x1bc>)
 8001bd4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001bdc:	f043 0201 	orr.w	r2, r3, #1
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001bec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c00:	021b      	lsls	r3, r3, #8
 8001c02:	431a      	orrs	r2, r3
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	f003 031f 	and.w	r3, r3, #31
 8001c12:	2201      	movs	r2, #1
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	401a      	ands	r2, r3
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	69db      	ldr	r3, [r3, #28]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d123      	bne.n	8001c7c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	401a      	ands	r2, r3
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c56:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	3248      	adds	r2, #72	; 0x48
 8001c5c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c70:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c72:	6979      	ldr	r1, [r7, #20]
 8001c74:	3348      	adds	r3, #72	; 0x48
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	440b      	add	r3, r1
 8001c7a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	69db      	ldr	r3, [r3, #28]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d122      	bne.n	8001cca <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ca4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	3248      	adds	r2, #72	; 0x48
 8001caa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cbe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cc0:	6979      	ldr	r1, [r7, #20]
 8001cc2:	3348      	adds	r3, #72	; 0x48
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	440b      	add	r3, r1
 8001cc8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d109      	bne.n	8001ce6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	401a      	ands	r2, r3
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001ce4:	e007      	b.n	8001cf6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d109      	bne.n	8001d12 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	43db      	mvns	r3, r3
 8001d08:	401a      	ands	r2, r3
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001d10:	e007      	b.n	8001d22 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d107      	bne.n	8001d3a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	431a      	orrs	r2, r3
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d40:	f023 0201 	bic.w	r2, r3, #1
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	e006      	b.n	8001d5c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
  }
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	371c      	adds	r7, #28
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	40006400 	.word	0x40006400

08001d6c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d12e      	bne.n	8001dde <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2202      	movs	r2, #2
 8001d84:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0201 	bic.w	r2, r2, #1
 8001d96:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d98:	f7ff fddc 	bl	8001954 <HAL_GetTick>
 8001d9c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d9e:	e012      	b.n	8001dc6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001da0:	f7ff fdd8 	bl	8001954 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b0a      	cmp	r3, #10
 8001dac:	d90b      	bls.n	8001dc6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2205      	movs	r2, #5
 8001dbe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e012      	b.n	8001dec <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1e5      	bne.n	8001da0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	e006      	b.n	8001dec <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
  }
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b089      	sub	sp, #36	; 0x24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
 8001e00:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e08:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e12:	7ffb      	ldrb	r3, [r7, #31]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d003      	beq.n	8001e20 <HAL_CAN_AddTxMessage+0x2c>
 8001e18:	7ffb      	ldrb	r3, [r7, #31]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	f040 80b8 	bne.w	8001f90 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10a      	bne.n	8001e40 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d105      	bne.n	8001e40 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 80a0 	beq.w	8001f80 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	0e1b      	lsrs	r3, r3, #24
 8001e44:	f003 0303 	and.w	r3, r3, #3
 8001e48:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d907      	bls.n	8001e60 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e09e      	b.n	8001f9e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001e60:	2201      	movs	r2, #1
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	409a      	lsls	r2, r3
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10d      	bne.n	8001e8e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001e7c:	68f9      	ldr	r1, [r7, #12]
 8001e7e:	6809      	ldr	r1, [r1, #0]
 8001e80:	431a      	orrs	r2, r3
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	3318      	adds	r3, #24
 8001e86:	011b      	lsls	r3, r3, #4
 8001e88:	440b      	add	r3, r1
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	e00f      	b.n	8001eae <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e98:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e9e:	68f9      	ldr	r1, [r7, #12]
 8001ea0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001ea2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	3318      	adds	r3, #24
 8001ea8:	011b      	lsls	r3, r3, #4
 8001eaa:	440b      	add	r3, r1
 8001eac:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6819      	ldr	r1, [r3, #0]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	691a      	ldr	r2, [r3, #16]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	3318      	adds	r3, #24
 8001eba:	011b      	lsls	r3, r3, #4
 8001ebc:	440b      	add	r3, r1
 8001ebe:	3304      	adds	r3, #4
 8001ec0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	7d1b      	ldrb	r3, [r3, #20]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d111      	bne.n	8001eee <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	3318      	adds	r3, #24
 8001ed2:	011b      	lsls	r3, r3, #4
 8001ed4:	4413      	add	r3, r2
 8001ed6:	3304      	adds	r3, #4
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	6811      	ldr	r1, [r2, #0]
 8001ede:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	3318      	adds	r3, #24
 8001ee6:	011b      	lsls	r3, r3, #4
 8001ee8:	440b      	add	r3, r1
 8001eea:	3304      	adds	r3, #4
 8001eec:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3307      	adds	r3, #7
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	061a      	lsls	r2, r3, #24
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3306      	adds	r3, #6
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	041b      	lsls	r3, r3, #16
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3305      	adds	r3, #5
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	021b      	lsls	r3, r3, #8
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	3204      	adds	r2, #4
 8001f0e:	7812      	ldrb	r2, [r2, #0]
 8001f10:	4610      	mov	r0, r2
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	6811      	ldr	r1, [r2, #0]
 8001f16:	ea43 0200 	orr.w	r2, r3, r0
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	011b      	lsls	r3, r3, #4
 8001f1e:	440b      	add	r3, r1
 8001f20:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001f24:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3303      	adds	r3, #3
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	061a      	lsls	r2, r3, #24
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3302      	adds	r3, #2
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	041b      	lsls	r3, r3, #16
 8001f36:	431a      	orrs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	021b      	lsls	r3, r3, #8
 8001f40:	4313      	orrs	r3, r2
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	7812      	ldrb	r2, [r2, #0]
 8001f46:	4610      	mov	r0, r2
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	6811      	ldr	r1, [r2, #0]
 8001f4c:	ea43 0200 	orr.w	r2, r3, r0
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	011b      	lsls	r3, r3, #4
 8001f54:	440b      	add	r3, r1
 8001f56:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001f5a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	3318      	adds	r3, #24
 8001f64:	011b      	lsls	r3, r3, #4
 8001f66:	4413      	add	r3, r2
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	6811      	ldr	r1, [r2, #0]
 8001f6e:	f043 0201 	orr.w	r2, r3, #1
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	3318      	adds	r3, #24
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	440b      	add	r3, r1
 8001f7a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	e00e      	b.n	8001f9e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f84:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e006      	b.n	8001f9e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f94:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
  }
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3724      	adds	r7, #36	; 0x24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001faa:	b480      	push	{r7}
 8001fac:	b087      	sub	sp, #28
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	60f8      	str	r0, [r7, #12]
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	607a      	str	r2, [r7, #4]
 8001fb6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fbe:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001fc0:	7dfb      	ldrb	r3, [r7, #23]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d003      	beq.n	8001fce <HAL_CAN_GetRxMessage+0x24>
 8001fc6:	7dfb      	ldrb	r3, [r7, #23]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	f040 80f3 	bne.w	80021b4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10e      	bne.n	8001ff2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d116      	bne.n	8002010 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e0e7      	b.n	80021c2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	f003 0303 	and.w	r3, r3, #3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d107      	bne.n	8002010 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002004:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e0d8      	b.n	80021c2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	331b      	adds	r3, #27
 8002018:	011b      	lsls	r3, r3, #4
 800201a:	4413      	add	r3, r2
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0204 	and.w	r2, r3, #4
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10c      	bne.n	8002048 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	331b      	adds	r3, #27
 8002036:	011b      	lsls	r3, r3, #4
 8002038:	4413      	add	r3, r2
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	0d5b      	lsrs	r3, r3, #21
 800203e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	e00b      	b.n	8002060 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	331b      	adds	r3, #27
 8002050:	011b      	lsls	r3, r3, #4
 8002052:	4413      	add	r3, r2
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	08db      	lsrs	r3, r3, #3
 8002058:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	331b      	adds	r3, #27
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	4413      	add	r3, r2
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0202 	and.w	r2, r3, #2
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	331b      	adds	r3, #27
 800207e:	011b      	lsls	r3, r3, #4
 8002080:	4413      	add	r3, r2
 8002082:	3304      	adds	r3, #4
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 020f 	and.w	r2, r3, #15
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	331b      	adds	r3, #27
 8002096:	011b      	lsls	r3, r3, #4
 8002098:	4413      	add	r3, r2
 800209a:	3304      	adds	r3, #4
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	0a1b      	lsrs	r3, r3, #8
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	331b      	adds	r3, #27
 80020ae:	011b      	lsls	r3, r3, #4
 80020b0:	4413      	add	r3, r2
 80020b2:	3304      	adds	r3, #4
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	0c1b      	lsrs	r3, r3, #16
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	011b      	lsls	r3, r3, #4
 80020c6:	4413      	add	r3, r2
 80020c8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	4413      	add	r3, r2
 80020de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	0a1a      	lsrs	r2, r3, #8
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	3301      	adds	r3, #1
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	011b      	lsls	r3, r3, #4
 80020f6:	4413      	add	r3, r2
 80020f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	0c1a      	lsrs	r2, r3, #16
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	3302      	adds	r3, #2
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	011b      	lsls	r3, r3, #4
 8002110:	4413      	add	r3, r2
 8002112:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	0e1a      	lsrs	r2, r3, #24
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	3303      	adds	r3, #3
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	011b      	lsls	r3, r3, #4
 800212a:	4413      	add	r3, r2
 800212c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	3304      	adds	r3, #4
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	011b      	lsls	r3, r3, #4
 8002142:	4413      	add	r3, r2
 8002144:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	0a1a      	lsrs	r2, r3, #8
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	3305      	adds	r3, #5
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	011b      	lsls	r3, r3, #4
 800215c:	4413      	add	r3, r2
 800215e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	0c1a      	lsrs	r2, r3, #16
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	3306      	adds	r3, #6
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	011b      	lsls	r3, r3, #4
 8002176:	4413      	add	r3, r2
 8002178:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	0e1a      	lsrs	r2, r3, #24
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	3307      	adds	r3, #7
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d108      	bne.n	80021a0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68da      	ldr	r2, [r3, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f042 0220 	orr.w	r2, r2, #32
 800219c:	60da      	str	r2, [r3, #12]
 800219e:	e007      	b.n	80021b0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	691a      	ldr	r2, [r3, #16]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 0220 	orr.w	r2, r2, #32
 80021ae:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	e006      	b.n	80021c2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
  }
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	371c      	adds	r7, #28
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b085      	sub	sp, #20
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021de:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d002      	beq.n	80021ec <HAL_CAN_ActivateNotification+0x1e>
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d109      	bne.n	8002200 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6959      	ldr	r1, [r3, #20]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80021fc:	2300      	movs	r3, #0
 80021fe:	e006      	b.n	800220e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
  }
}
 800220e:	4618      	mov	r0, r3
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b08a      	sub	sp, #40	; 0x28
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002222:	2300      	movs	r3, #0
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002256:	6a3b      	ldr	r3, [r7, #32]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d07c      	beq.n	800235a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d023      	beq.n	80022b2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2201      	movs	r2, #1
 8002270:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 f983 	bl	8002588 <HAL_CAN_TxMailbox0CompleteCallback>
 8002282:	e016      	b.n	80022b2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	f003 0304 	and.w	r3, r3, #4
 800228a:	2b00      	cmp	r3, #0
 800228c:	d004      	beq.n	8002298 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
 8002296:	e00c      	b.n	80022b2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	f003 0308 	and.w	r3, r3, #8
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d004      	beq.n	80022ac <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
 80022aa:	e002      	b.n	80022b2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 f989 	bl	80025c4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d024      	beq.n	8002306 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 f963 	bl	800259c <HAL_CAN_TxMailbox1CompleteCallback>
 80022d6:	e016      	b.n	8002306 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d004      	beq.n	80022ec <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
 80022ea:	e00c      	b.n	8002306 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d004      	beq.n	8002300 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
 80022fe:	e002      	b.n	8002306 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 f969 	bl	80025d8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d024      	beq.n	800235a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002318:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 f943 	bl	80025b0 <HAL_CAN_TxMailbox2CompleteCallback>
 800232a:	e016      	b.n	800235a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d004      	beq.n	8002340 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
 800233e:	e00c      	b.n	800235a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d004      	beq.n	8002354 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002350:	627b      	str	r3, [r7, #36]	; 0x24
 8002352:	e002      	b.n	800235a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 f949 	bl	80025ec <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	f003 0308 	and.w	r3, r3, #8
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00c      	beq.n	800237e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	f003 0310 	and.w	r3, r3, #16
 800236a:	2b00      	cmp	r3, #0
 800236c:	d007      	beq.n	800237e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002374:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2210      	movs	r2, #16
 800237c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00b      	beq.n	80023a0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d006      	beq.n	80023a0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2208      	movs	r2, #8
 8002398:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f930 	bl	8002600 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d009      	beq.n	80023be <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d002      	beq.n	80023be <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7fe fc35 	bl	8000c28 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80023be:	6a3b      	ldr	r3, [r7, #32]
 80023c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00c      	beq.n	80023e2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	f003 0310 	and.w	r3, r3, #16
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d007      	beq.n	80023e2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2210      	movs	r2, #16
 80023e0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	f003 0320 	and.w	r3, r3, #32
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00b      	beq.n	8002404 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d006      	beq.n	8002404 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2208      	movs	r2, #8
 80023fc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f912 	bl	8002628 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	f003 0310 	and.w	r3, r3, #16
 800240a:	2b00      	cmp	r3, #0
 800240c:	d009      	beq.n	8002422 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	2b00      	cmp	r3, #0
 800241a:	d002      	beq.n	8002422 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 f8f9 	bl	8002614 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002422:	6a3b      	ldr	r3, [r7, #32]
 8002424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00b      	beq.n	8002444 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	f003 0310 	and.w	r3, r3, #16
 8002432:	2b00      	cmp	r3, #0
 8002434:	d006      	beq.n	8002444 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2210      	movs	r2, #16
 800243c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f8fc 	bl	800263c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002444:	6a3b      	ldr	r3, [r7, #32]
 8002446:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00b      	beq.n	8002466 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	f003 0308 	and.w	r3, r3, #8
 8002454:	2b00      	cmp	r3, #0
 8002456:	d006      	beq.n	8002466 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2208      	movs	r2, #8
 800245e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 f8f5 	bl	8002650 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002466:	6a3b      	ldr	r3, [r7, #32]
 8002468:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d07b      	beq.n	8002568 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	2b00      	cmp	r3, #0
 8002478:	d072      	beq.n	8002560 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800247a:	6a3b      	ldr	r3, [r7, #32]
 800247c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002480:	2b00      	cmp	r3, #0
 8002482:	d008      	beq.n	8002496 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	f043 0301 	orr.w	r3, r3, #1
 8002494:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800249c:	2b00      	cmp	r3, #0
 800249e:	d008      	beq.n	80024b2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	f043 0302 	orr.w	r3, r3, #2
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80024b2:	6a3b      	ldr	r3, [r7, #32]
 80024b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d008      	beq.n	80024ce <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	f043 0304 	orr.w	r3, r3, #4
 80024cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80024ce:	6a3b      	ldr	r3, [r7, #32]
 80024d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d043      	beq.n	8002560 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d03e      	beq.n	8002560 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024e8:	2b60      	cmp	r3, #96	; 0x60
 80024ea:	d02b      	beq.n	8002544 <HAL_CAN_IRQHandler+0x32a>
 80024ec:	2b60      	cmp	r3, #96	; 0x60
 80024ee:	d82e      	bhi.n	800254e <HAL_CAN_IRQHandler+0x334>
 80024f0:	2b50      	cmp	r3, #80	; 0x50
 80024f2:	d022      	beq.n	800253a <HAL_CAN_IRQHandler+0x320>
 80024f4:	2b50      	cmp	r3, #80	; 0x50
 80024f6:	d82a      	bhi.n	800254e <HAL_CAN_IRQHandler+0x334>
 80024f8:	2b40      	cmp	r3, #64	; 0x40
 80024fa:	d019      	beq.n	8002530 <HAL_CAN_IRQHandler+0x316>
 80024fc:	2b40      	cmp	r3, #64	; 0x40
 80024fe:	d826      	bhi.n	800254e <HAL_CAN_IRQHandler+0x334>
 8002500:	2b30      	cmp	r3, #48	; 0x30
 8002502:	d010      	beq.n	8002526 <HAL_CAN_IRQHandler+0x30c>
 8002504:	2b30      	cmp	r3, #48	; 0x30
 8002506:	d822      	bhi.n	800254e <HAL_CAN_IRQHandler+0x334>
 8002508:	2b10      	cmp	r3, #16
 800250a:	d002      	beq.n	8002512 <HAL_CAN_IRQHandler+0x2f8>
 800250c:	2b20      	cmp	r3, #32
 800250e:	d005      	beq.n	800251c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002510:	e01d      	b.n	800254e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	f043 0308 	orr.w	r3, r3, #8
 8002518:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800251a:	e019      	b.n	8002550 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	f043 0310 	orr.w	r3, r3, #16
 8002522:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002524:	e014      	b.n	8002550 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	f043 0320 	orr.w	r3, r3, #32
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800252e:	e00f      	b.n	8002550 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002536:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002538:	e00a      	b.n	8002550 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002542:	e005      	b.n	8002550 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800254a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800254c:	e000      	b.n	8002550 <HAL_CAN_IRQHandler+0x336>
            break;
 800254e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	699a      	ldr	r2, [r3, #24]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800255e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2204      	movs	r2, #4
 8002566:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	2b00      	cmp	r3, #0
 800256c:	d008      	beq.n	8002580 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	431a      	orrs	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f872 	bl	8002664 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002580:	bf00      	nop
 8002582:	3728      	adds	r7, #40	; 0x28
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002688:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <__NVIC_SetPriorityGrouping+0x44>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002694:	4013      	ands	r3, r2
 8002696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026aa:	4a04      	ldr	r2, [pc, #16]	; (80026bc <__NVIC_SetPriorityGrouping+0x44>)
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	60d3      	str	r3, [r2, #12]
}
 80026b0:	bf00      	nop
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	e000ed00 	.word	0xe000ed00

080026c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026c4:	4b04      	ldr	r3, [pc, #16]	; (80026d8 <__NVIC_GetPriorityGrouping+0x18>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	0a1b      	lsrs	r3, r3, #8
 80026ca:	f003 0307 	and.w	r3, r3, #7
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	e000ed00 	.word	0xe000ed00

080026dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	db0b      	blt.n	8002706 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	f003 021f 	and.w	r2, r3, #31
 80026f4:	4907      	ldr	r1, [pc, #28]	; (8002714 <__NVIC_EnableIRQ+0x38>)
 80026f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fa:	095b      	lsrs	r3, r3, #5
 80026fc:	2001      	movs	r0, #1
 80026fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	e000e100 	.word	0xe000e100

08002718 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002726:	2b00      	cmp	r3, #0
 8002728:	db12      	blt.n	8002750 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800272a:	79fb      	ldrb	r3, [r7, #7]
 800272c:	f003 021f 	and.w	r2, r3, #31
 8002730:	490a      	ldr	r1, [pc, #40]	; (800275c <__NVIC_DisableIRQ+0x44>)
 8002732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002736:	095b      	lsrs	r3, r3, #5
 8002738:	2001      	movs	r0, #1
 800273a:	fa00 f202 	lsl.w	r2, r0, r2
 800273e:	3320      	adds	r3, #32
 8002740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002744:	f3bf 8f4f 	dsb	sy
}
 8002748:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800274a:	f3bf 8f6f 	isb	sy
}
 800274e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	e000e100 	.word	0xe000e100

08002760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	6039      	str	r1, [r7, #0]
 800276a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800276c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002770:	2b00      	cmp	r3, #0
 8002772:	db0a      	blt.n	800278a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	b2da      	uxtb	r2, r3
 8002778:	490c      	ldr	r1, [pc, #48]	; (80027ac <__NVIC_SetPriority+0x4c>)
 800277a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277e:	0112      	lsls	r2, r2, #4
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	440b      	add	r3, r1
 8002784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002788:	e00a      	b.n	80027a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	b2da      	uxtb	r2, r3
 800278e:	4908      	ldr	r1, [pc, #32]	; (80027b0 <__NVIC_SetPriority+0x50>)
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	3b04      	subs	r3, #4
 8002798:	0112      	lsls	r2, r2, #4
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	440b      	add	r3, r1
 800279e:	761a      	strb	r2, [r3, #24]
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	e000e100 	.word	0xe000e100
 80027b0:	e000ed00 	.word	0xe000ed00

080027b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b089      	sub	sp, #36	; 0x24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f1c3 0307 	rsb	r3, r3, #7
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	bf28      	it	cs
 80027d2:	2304      	movcs	r3, #4
 80027d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	3304      	adds	r3, #4
 80027da:	2b06      	cmp	r3, #6
 80027dc:	d902      	bls.n	80027e4 <NVIC_EncodePriority+0x30>
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	3b03      	subs	r3, #3
 80027e2:	e000      	b.n	80027e6 <NVIC_EncodePriority+0x32>
 80027e4:	2300      	movs	r3, #0
 80027e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e8:	f04f 32ff 	mov.w	r2, #4294967295
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43da      	mvns	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	401a      	ands	r2, r3
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	fa01 f303 	lsl.w	r3, r1, r3
 8002806:	43d9      	mvns	r1, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800280c:	4313      	orrs	r3, r2
         );
}
 800280e:	4618      	mov	r0, r3
 8002810:	3724      	adds	r7, #36	; 0x24
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
	...

0800281c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3b01      	subs	r3, #1
 8002828:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800282c:	d301      	bcc.n	8002832 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800282e:	2301      	movs	r3, #1
 8002830:	e00f      	b.n	8002852 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002832:	4a0a      	ldr	r2, [pc, #40]	; (800285c <SysTick_Config+0x40>)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3b01      	subs	r3, #1
 8002838:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800283a:	210f      	movs	r1, #15
 800283c:	f04f 30ff 	mov.w	r0, #4294967295
 8002840:	f7ff ff8e 	bl	8002760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002844:	4b05      	ldr	r3, [pc, #20]	; (800285c <SysTick_Config+0x40>)
 8002846:	2200      	movs	r2, #0
 8002848:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800284a:	4b04      	ldr	r3, [pc, #16]	; (800285c <SysTick_Config+0x40>)
 800284c:	2207      	movs	r2, #7
 800284e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	e000e010 	.word	0xe000e010

08002860 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f7ff ff05 	bl	8002678 <__NVIC_SetPriorityGrouping>
}
 800286e:	bf00      	nop
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002876:	b580      	push	{r7, lr}
 8002878:	b086      	sub	sp, #24
 800287a:	af00      	add	r7, sp, #0
 800287c:	4603      	mov	r3, r0
 800287e:	60b9      	str	r1, [r7, #8]
 8002880:	607a      	str	r2, [r7, #4]
 8002882:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002888:	f7ff ff1a 	bl	80026c0 <__NVIC_GetPriorityGrouping>
 800288c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	68b9      	ldr	r1, [r7, #8]
 8002892:	6978      	ldr	r0, [r7, #20]
 8002894:	f7ff ff8e 	bl	80027b4 <NVIC_EncodePriority>
 8002898:	4602      	mov	r2, r0
 800289a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800289e:	4611      	mov	r1, r2
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff ff5d 	bl	8002760 <__NVIC_SetPriority>
}
 80028a6:	bf00      	nop
 80028a8:	3718      	adds	r7, #24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b082      	sub	sp, #8
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	4603      	mov	r3, r0
 80028b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff ff0d 	bl	80026dc <__NVIC_EnableIRQ>
}
 80028c2:	bf00      	nop
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b082      	sub	sp, #8
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	4603      	mov	r3, r0
 80028d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80028d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff ff1d 	bl	8002718 <__NVIC_DisableIRQ>
}
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff ff94 	bl	800281c <SysTick_Config>
 80028f4:	4603      	mov	r3, r0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
	...

08002900 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002900:	b480      	push	{r7}
 8002902:	b089      	sub	sp, #36	; 0x24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800290a:	2300      	movs	r3, #0
 800290c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800290e:	2300      	movs	r3, #0
 8002910:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002912:	2300      	movs	r3, #0
 8002914:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
 800291a:	e16b      	b.n	8002bf4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800291c:	2201      	movs	r2, #1
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	4013      	ands	r3, r2
 800292e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	429a      	cmp	r2, r3
 8002936:	f040 815a 	bne.w	8002bee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	2b01      	cmp	r3, #1
 8002944:	d005      	beq.n	8002952 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800294e:	2b02      	cmp	r3, #2
 8002950:	d130      	bne.n	80029b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	2203      	movs	r2, #3
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	43db      	mvns	r3, r3
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	4013      	ands	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4313      	orrs	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002988:	2201      	movs	r2, #1
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4013      	ands	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	091b      	lsrs	r3, r3, #4
 800299e:	f003 0201 	and.w	r2, r3, #1
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 0303 	and.w	r3, r3, #3
 80029bc:	2b03      	cmp	r3, #3
 80029be:	d017      	beq.n	80029f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	2203      	movs	r2, #3
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	43db      	mvns	r3, r3
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4013      	ands	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f003 0303 	and.w	r3, r3, #3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d123      	bne.n	8002a44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	08da      	lsrs	r2, r3, #3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3208      	adds	r2, #8
 8002a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	220f      	movs	r2, #15
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	691a      	ldr	r2, [r3, #16]
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	08da      	lsrs	r2, r3, #3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	3208      	adds	r2, #8
 8002a3e:	69b9      	ldr	r1, [r7, #24]
 8002a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	2203      	movs	r2, #3
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	43db      	mvns	r3, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f003 0203 	and.w	r2, r3, #3
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 80b4 	beq.w	8002bee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	4b60      	ldr	r3, [pc, #384]	; (8002c0c <HAL_GPIO_Init+0x30c>)
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	4a5f      	ldr	r2, [pc, #380]	; (8002c0c <HAL_GPIO_Init+0x30c>)
 8002a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a94:	6453      	str	r3, [r2, #68]	; 0x44
 8002a96:	4b5d      	ldr	r3, [pc, #372]	; (8002c0c <HAL_GPIO_Init+0x30c>)
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aa2:	4a5b      	ldr	r2, [pc, #364]	; (8002c10 <HAL_GPIO_Init+0x310>)
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	089b      	lsrs	r3, r3, #2
 8002aa8:	3302      	adds	r3, #2
 8002aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	220f      	movs	r2, #15
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a52      	ldr	r2, [pc, #328]	; (8002c14 <HAL_GPIO_Init+0x314>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d02b      	beq.n	8002b26 <HAL_GPIO_Init+0x226>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a51      	ldr	r2, [pc, #324]	; (8002c18 <HAL_GPIO_Init+0x318>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d025      	beq.n	8002b22 <HAL_GPIO_Init+0x222>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a50      	ldr	r2, [pc, #320]	; (8002c1c <HAL_GPIO_Init+0x31c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d01f      	beq.n	8002b1e <HAL_GPIO_Init+0x21e>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a4f      	ldr	r2, [pc, #316]	; (8002c20 <HAL_GPIO_Init+0x320>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d019      	beq.n	8002b1a <HAL_GPIO_Init+0x21a>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a4e      	ldr	r2, [pc, #312]	; (8002c24 <HAL_GPIO_Init+0x324>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d013      	beq.n	8002b16 <HAL_GPIO_Init+0x216>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a4d      	ldr	r2, [pc, #308]	; (8002c28 <HAL_GPIO_Init+0x328>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d00d      	beq.n	8002b12 <HAL_GPIO_Init+0x212>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a4c      	ldr	r2, [pc, #304]	; (8002c2c <HAL_GPIO_Init+0x32c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d007      	beq.n	8002b0e <HAL_GPIO_Init+0x20e>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a4b      	ldr	r2, [pc, #300]	; (8002c30 <HAL_GPIO_Init+0x330>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d101      	bne.n	8002b0a <HAL_GPIO_Init+0x20a>
 8002b06:	2307      	movs	r3, #7
 8002b08:	e00e      	b.n	8002b28 <HAL_GPIO_Init+0x228>
 8002b0a:	2308      	movs	r3, #8
 8002b0c:	e00c      	b.n	8002b28 <HAL_GPIO_Init+0x228>
 8002b0e:	2306      	movs	r3, #6
 8002b10:	e00a      	b.n	8002b28 <HAL_GPIO_Init+0x228>
 8002b12:	2305      	movs	r3, #5
 8002b14:	e008      	b.n	8002b28 <HAL_GPIO_Init+0x228>
 8002b16:	2304      	movs	r3, #4
 8002b18:	e006      	b.n	8002b28 <HAL_GPIO_Init+0x228>
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e004      	b.n	8002b28 <HAL_GPIO_Init+0x228>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e002      	b.n	8002b28 <HAL_GPIO_Init+0x228>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <HAL_GPIO_Init+0x228>
 8002b26:	2300      	movs	r3, #0
 8002b28:	69fa      	ldr	r2, [r7, #28]
 8002b2a:	f002 0203 	and.w	r2, r2, #3
 8002b2e:	0092      	lsls	r2, r2, #2
 8002b30:	4093      	lsls	r3, r2
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b38:	4935      	ldr	r1, [pc, #212]	; (8002c10 <HAL_GPIO_Init+0x310>)
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	089b      	lsrs	r3, r3, #2
 8002b3e:	3302      	adds	r3, #2
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b46:	4b3b      	ldr	r3, [pc, #236]	; (8002c34 <HAL_GPIO_Init+0x334>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4013      	ands	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b6a:	4a32      	ldr	r2, [pc, #200]	; (8002c34 <HAL_GPIO_Init+0x334>)
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b70:	4b30      	ldr	r3, [pc, #192]	; (8002c34 <HAL_GPIO_Init+0x334>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b94:	4a27      	ldr	r2, [pc, #156]	; (8002c34 <HAL_GPIO_Init+0x334>)
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b9a:	4b26      	ldr	r3, [pc, #152]	; (8002c34 <HAL_GPIO_Init+0x334>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bbe:	4a1d      	ldr	r2, [pc, #116]	; (8002c34 <HAL_GPIO_Init+0x334>)
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bc4:	4b1b      	ldr	r3, [pc, #108]	; (8002c34 <HAL_GPIO_Init+0x334>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002be8:	4a12      	ldr	r2, [pc, #72]	; (8002c34 <HAL_GPIO_Init+0x334>)
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	61fb      	str	r3, [r7, #28]
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	2b0f      	cmp	r3, #15
 8002bf8:	f67f ae90 	bls.w	800291c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bfc:	bf00      	nop
 8002bfe:	bf00      	nop
 8002c00:	3724      	adds	r7, #36	; 0x24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	40013800 	.word	0x40013800
 8002c14:	40020000 	.word	0x40020000
 8002c18:	40020400 	.word	0x40020400
 8002c1c:	40020800 	.word	0x40020800
 8002c20:	40020c00 	.word	0x40020c00
 8002c24:	40021000 	.word	0x40021000
 8002c28:	40021400 	.word	0x40021400
 8002c2c:	40021800 	.word	0x40021800
 8002c30:	40021c00 	.word	0x40021c00
 8002c34:	40013c00 	.word	0x40013c00

08002c38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691a      	ldr	r2, [r3, #16]
 8002c48:	887b      	ldrh	r3, [r7, #2]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d002      	beq.n	8002c56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c50:	2301      	movs	r3, #1
 8002c52:	73fb      	strb	r3, [r7, #15]
 8002c54:	e001      	b.n	8002c5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c56:	2300      	movs	r3, #0
 8002c58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	460b      	mov	r3, r1
 8002c72:	807b      	strh	r3, [r7, #2]
 8002c74:	4613      	mov	r3, r2
 8002c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c78:	787b      	ldrb	r3, [r7, #1]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c7e:	887a      	ldrh	r2, [r7, #2]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c84:	e003      	b.n	8002c8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c86:	887b      	ldrh	r3, [r7, #2]
 8002c88:	041a      	lsls	r2, r3, #16
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	619a      	str	r2, [r3, #24]
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b085      	sub	sp, #20
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cac:	887a      	ldrh	r2, [r7, #2]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	041a      	lsls	r2, r3, #16
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	43d9      	mvns	r1, r3
 8002cb8:	887b      	ldrh	r3, [r7, #2]
 8002cba:	400b      	ands	r3, r1
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	619a      	str	r2, [r3, #24]
}
 8002cc2:	bf00      	nop
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
	...

08002cd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002cda:	4b08      	ldr	r3, [pc, #32]	; (8002cfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cdc:	695a      	ldr	r2, [r3, #20]
 8002cde:	88fb      	ldrh	r3, [r7, #6]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d006      	beq.n	8002cf4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ce6:	4a05      	ldr	r2, [pc, #20]	; (8002cfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ce8:	88fb      	ldrh	r3, [r7, #6]
 8002cea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cec:	88fb      	ldrh	r3, [r7, #6]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fd fe56 	bl	80009a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002cf4:	bf00      	nop
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40013c00 	.word	0x40013c00

08002d00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e12b      	b.n	8002f6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d106      	bne.n	8002d2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7fe fc2a 	bl	8001580 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2224      	movs	r2, #36	; 0x24
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0201 	bic.w	r2, r2, #1
 8002d42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d64:	f001 f888 	bl	8003e78 <HAL_RCC_GetPCLK1Freq>
 8002d68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	4a81      	ldr	r2, [pc, #516]	; (8002f74 <HAL_I2C_Init+0x274>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d807      	bhi.n	8002d84 <HAL_I2C_Init+0x84>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	4a80      	ldr	r2, [pc, #512]	; (8002f78 <HAL_I2C_Init+0x278>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	bf94      	ite	ls
 8002d7c:	2301      	movls	r3, #1
 8002d7e:	2300      	movhi	r3, #0
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	e006      	b.n	8002d92 <HAL_I2C_Init+0x92>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4a7d      	ldr	r2, [pc, #500]	; (8002f7c <HAL_I2C_Init+0x27c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	bf94      	ite	ls
 8002d8c:	2301      	movls	r3, #1
 8002d8e:	2300      	movhi	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e0e7      	b.n	8002f6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	4a78      	ldr	r2, [pc, #480]	; (8002f80 <HAL_I2C_Init+0x280>)
 8002d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002da2:	0c9b      	lsrs	r3, r3, #18
 8002da4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	4a6a      	ldr	r2, [pc, #424]	; (8002f74 <HAL_I2C_Init+0x274>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d802      	bhi.n	8002dd4 <HAL_I2C_Init+0xd4>
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	e009      	b.n	8002de8 <HAL_I2C_Init+0xe8>
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002dda:	fb02 f303 	mul.w	r3, r2, r3
 8002dde:	4a69      	ldr	r2, [pc, #420]	; (8002f84 <HAL_I2C_Init+0x284>)
 8002de0:	fba2 2303 	umull	r2, r3, r2, r3
 8002de4:	099b      	lsrs	r3, r3, #6
 8002de6:	3301      	adds	r3, #1
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6812      	ldr	r2, [r2, #0]
 8002dec:	430b      	orrs	r3, r1
 8002dee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002dfa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	495c      	ldr	r1, [pc, #368]	; (8002f74 <HAL_I2C_Init+0x274>)
 8002e04:	428b      	cmp	r3, r1
 8002e06:	d819      	bhi.n	8002e3c <HAL_I2C_Init+0x13c>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	1e59      	subs	r1, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e16:	1c59      	adds	r1, r3, #1
 8002e18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e1c:	400b      	ands	r3, r1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00a      	beq.n	8002e38 <HAL_I2C_Init+0x138>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	1e59      	subs	r1, r3, #1
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e30:	3301      	adds	r3, #1
 8002e32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e36:	e051      	b.n	8002edc <HAL_I2C_Init+0x1dc>
 8002e38:	2304      	movs	r3, #4
 8002e3a:	e04f      	b.n	8002edc <HAL_I2C_Init+0x1dc>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d111      	bne.n	8002e68 <HAL_I2C_Init+0x168>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	1e58      	subs	r0, r3, #1
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6859      	ldr	r1, [r3, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	440b      	add	r3, r1
 8002e52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e56:	3301      	adds	r3, #1
 8002e58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	bf0c      	ite	eq
 8002e60:	2301      	moveq	r3, #1
 8002e62:	2300      	movne	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	e012      	b.n	8002e8e <HAL_I2C_Init+0x18e>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	1e58      	subs	r0, r3, #1
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6859      	ldr	r1, [r3, #4]
 8002e70:	460b      	mov	r3, r1
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	440b      	add	r3, r1
 8002e76:	0099      	lsls	r1, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e7e:	3301      	adds	r3, #1
 8002e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	bf0c      	ite	eq
 8002e88:	2301      	moveq	r3, #1
 8002e8a:	2300      	movne	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_I2C_Init+0x196>
 8002e92:	2301      	movs	r3, #1
 8002e94:	e022      	b.n	8002edc <HAL_I2C_Init+0x1dc>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10e      	bne.n	8002ebc <HAL_I2C_Init+0x1bc>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	1e58      	subs	r0, r3, #1
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6859      	ldr	r1, [r3, #4]
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	440b      	add	r3, r1
 8002eac:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eba:	e00f      	b.n	8002edc <HAL_I2C_Init+0x1dc>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	1e58      	subs	r0, r3, #1
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6859      	ldr	r1, [r3, #4]
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	0099      	lsls	r1, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	6809      	ldr	r1, [r1, #0]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69da      	ldr	r2, [r3, #28]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6911      	ldr	r1, [r2, #16]
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	68d2      	ldr	r2, [r2, #12]
 8002f16:	4311      	orrs	r1, r2
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6812      	ldr	r2, [r2, #0]
 8002f1c:	430b      	orrs	r3, r1
 8002f1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	695a      	ldr	r2, [r3, #20]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0201 	orr.w	r2, r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2220      	movs	r2, #32
 8002f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	000186a0 	.word	0x000186a0
 8002f78:	001e847f 	.word	0x001e847f
 8002f7c:	003d08ff 	.word	0x003d08ff
 8002f80:	431bde83 	.word	0x431bde83
 8002f84:	10624dd3 	.word	0x10624dd3

08002f88 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b088      	sub	sp, #32
 8002f8c:	af02      	add	r7, sp, #8
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	607a      	str	r2, [r7, #4]
 8002f92:	461a      	mov	r2, r3
 8002f94:	460b      	mov	r3, r1
 8002f96:	817b      	strh	r3, [r7, #10]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f9c:	f7fe fcda 	bl	8001954 <HAL_GetTick>
 8002fa0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b20      	cmp	r3, #32
 8002fac:	f040 80e0 	bne.w	8003170 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	2319      	movs	r3, #25
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	4970      	ldr	r1, [pc, #448]	; (800317c <HAL_I2C_Master_Transmit+0x1f4>)
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 f964 	bl	8003288 <I2C_WaitOnFlagUntilTimeout>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	e0d3      	b.n	8003172 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <HAL_I2C_Master_Transmit+0x50>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	e0cc      	b.n	8003172 <HAL_I2C_Master_Transmit+0x1ea>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d007      	beq.n	8002ffe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f042 0201 	orr.w	r2, r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800300c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2221      	movs	r2, #33	; 0x21
 8003012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2210      	movs	r2, #16
 800301a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	893a      	ldrh	r2, [r7, #8]
 800302e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003034:	b29a      	uxth	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	4a50      	ldr	r2, [pc, #320]	; (8003180 <HAL_I2C_Master_Transmit+0x1f8>)
 800303e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003040:	8979      	ldrh	r1, [r7, #10]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	6a3a      	ldr	r2, [r7, #32]
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 f89c 	bl	8003184 <I2C_MasterRequestWrite>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e08d      	b.n	8003172 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003056:	2300      	movs	r3, #0
 8003058:	613b      	str	r3, [r7, #16]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	613b      	str	r3, [r7, #16]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	613b      	str	r3, [r7, #16]
 800306a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800306c:	e066      	b.n	800313c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	6a39      	ldr	r1, [r7, #32]
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 f9de 	bl	8003434 <I2C_WaitOnTXEFlagUntilTimeout>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00d      	beq.n	800309a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	2b04      	cmp	r3, #4
 8003084:	d107      	bne.n	8003096 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003094:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e06b      	b.n	8003172 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	781a      	ldrb	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	3b01      	subs	r3, #1
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c2:	3b01      	subs	r3, #1
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b04      	cmp	r3, #4
 80030d6:	d11b      	bne.n	8003110 <HAL_I2C_Master_Transmit+0x188>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d017      	beq.n	8003110 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	781a      	ldrb	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	1c5a      	adds	r2, r3, #1
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	3b01      	subs	r3, #1
 80030fe:	b29a      	uxth	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003108:	3b01      	subs	r3, #1
 800310a:	b29a      	uxth	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	6a39      	ldr	r1, [r7, #32]
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f000 f9ce 	bl	80034b6 <I2C_WaitOnBTFFlagUntilTimeout>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00d      	beq.n	800313c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003124:	2b04      	cmp	r3, #4
 8003126:	d107      	bne.n	8003138 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003136:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e01a      	b.n	8003172 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003140:	2b00      	cmp	r3, #0
 8003142:	d194      	bne.n	800306e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003152:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2220      	movs	r2, #32
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800316c:	2300      	movs	r3, #0
 800316e:	e000      	b.n	8003172 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003170:	2302      	movs	r3, #2
  }
}
 8003172:	4618      	mov	r0, r3
 8003174:	3718      	adds	r7, #24
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	00100002 	.word	0x00100002
 8003180:	ffff0000 	.word	0xffff0000

08003184 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b088      	sub	sp, #32
 8003188:	af02      	add	r7, sp, #8
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	607a      	str	r2, [r7, #4]
 800318e:	603b      	str	r3, [r7, #0]
 8003190:	460b      	mov	r3, r1
 8003192:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003198:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2b08      	cmp	r3, #8
 800319e:	d006      	beq.n	80031ae <I2C_MasterRequestWrite+0x2a>
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d003      	beq.n	80031ae <I2C_MasterRequestWrite+0x2a>
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031ac:	d108      	bne.n	80031c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	e00b      	b.n	80031d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c4:	2b12      	cmp	r3, #18
 80031c6:	d107      	bne.n	80031d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f000 f84f 	bl	8003288 <I2C_WaitOnFlagUntilTimeout>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00d      	beq.n	800320c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031fe:	d103      	bne.n	8003208 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003206:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e035      	b.n	8003278 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003214:	d108      	bne.n	8003228 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003216:	897b      	ldrh	r3, [r7, #10]
 8003218:	b2db      	uxtb	r3, r3
 800321a:	461a      	mov	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003224:	611a      	str	r2, [r3, #16]
 8003226:	e01b      	b.n	8003260 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003228:	897b      	ldrh	r3, [r7, #10]
 800322a:	11db      	asrs	r3, r3, #7
 800322c:	b2db      	uxtb	r3, r3
 800322e:	f003 0306 	and.w	r3, r3, #6
 8003232:	b2db      	uxtb	r3, r3
 8003234:	f063 030f 	orn	r3, r3, #15
 8003238:	b2da      	uxtb	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	490e      	ldr	r1, [pc, #56]	; (8003280 <I2C_MasterRequestWrite+0xfc>)
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f000 f875 	bl	8003336 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e010      	b.n	8003278 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003256:	897b      	ldrh	r3, [r7, #10]
 8003258:	b2da      	uxtb	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	4907      	ldr	r1, [pc, #28]	; (8003284 <I2C_MasterRequestWrite+0x100>)
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 f865 	bl	8003336 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e000      	b.n	8003278 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	00010008 	.word	0x00010008
 8003284:	00010002 	.word	0x00010002

08003288 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	603b      	str	r3, [r7, #0]
 8003294:	4613      	mov	r3, r2
 8003296:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003298:	e025      	b.n	80032e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a0:	d021      	beq.n	80032e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a2:	f7fe fb57 	bl	8001954 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d302      	bcc.n	80032b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d116      	bne.n	80032e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2220      	movs	r2, #32
 80032c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	f043 0220 	orr.w	r2, r3, #32
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e023      	b.n	800332e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	0c1b      	lsrs	r3, r3, #16
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d10d      	bne.n	800330c <I2C_WaitOnFlagUntilTimeout+0x84>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	43da      	mvns	r2, r3
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	4013      	ands	r3, r2
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	bf0c      	ite	eq
 8003302:	2301      	moveq	r3, #1
 8003304:	2300      	movne	r3, #0
 8003306:	b2db      	uxtb	r3, r3
 8003308:	461a      	mov	r2, r3
 800330a:	e00c      	b.n	8003326 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	43da      	mvns	r2, r3
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	4013      	ands	r3, r2
 8003318:	b29b      	uxth	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	bf0c      	ite	eq
 800331e:	2301      	moveq	r3, #1
 8003320:	2300      	movne	r3, #0
 8003322:	b2db      	uxtb	r3, r3
 8003324:	461a      	mov	r2, r3
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	429a      	cmp	r2, r3
 800332a:	d0b6      	beq.n	800329a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b084      	sub	sp, #16
 800333a:	af00      	add	r7, sp, #0
 800333c:	60f8      	str	r0, [r7, #12]
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	607a      	str	r2, [r7, #4]
 8003342:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003344:	e051      	b.n	80033ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003354:	d123      	bne.n	800339e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003364:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800336e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2220      	movs	r2, #32
 800337a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	f043 0204 	orr.w	r2, r3, #4
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e046      	b.n	800342c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a4:	d021      	beq.n	80033ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033a6:	f7fe fad5 	bl	8001954 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d302      	bcc.n	80033bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d116      	bne.n	80033ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2220      	movs	r2, #32
 80033c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	f043 0220 	orr.w	r2, r3, #32
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e020      	b.n	800342c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	0c1b      	lsrs	r3, r3, #16
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d10c      	bne.n	800340e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	43da      	mvns	r2, r3
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	4013      	ands	r3, r2
 8003400:	b29b      	uxth	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	bf14      	ite	ne
 8003406:	2301      	movne	r3, #1
 8003408:	2300      	moveq	r3, #0
 800340a:	b2db      	uxtb	r3, r3
 800340c:	e00b      	b.n	8003426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	43da      	mvns	r2, r3
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	4013      	ands	r3, r2
 800341a:	b29b      	uxth	r3, r3
 800341c:	2b00      	cmp	r3, #0
 800341e:	bf14      	ite	ne
 8003420:	2301      	movne	r3, #1
 8003422:	2300      	moveq	r3, #0
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d18d      	bne.n	8003346 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003440:	e02d      	b.n	800349e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 f878 	bl	8003538 <I2C_IsAcknowledgeFailed>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e02d      	b.n	80034ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003458:	d021      	beq.n	800349e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800345a:	f7fe fa7b 	bl	8001954 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	68ba      	ldr	r2, [r7, #8]
 8003466:	429a      	cmp	r2, r3
 8003468:	d302      	bcc.n	8003470 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d116      	bne.n	800349e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2220      	movs	r2, #32
 800347a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	f043 0220 	orr.w	r2, r3, #32
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e007      	b.n	80034ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a8:	2b80      	cmp	r3, #128	; 0x80
 80034aa:	d1ca      	bne.n	8003442 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b084      	sub	sp, #16
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	60f8      	str	r0, [r7, #12]
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034c2:	e02d      	b.n	8003520 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 f837 	bl	8003538 <I2C_IsAcknowledgeFailed>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e02d      	b.n	8003530 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034da:	d021      	beq.n	8003520 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034dc:	f7fe fa3a 	bl	8001954 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d302      	bcc.n	80034f2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d116      	bne.n	8003520 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2220      	movs	r2, #32
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350c:	f043 0220 	orr.w	r2, r3, #32
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e007      	b.n	8003530 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	2b04      	cmp	r3, #4
 800352c:	d1ca      	bne.n	80034c4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800354a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800354e:	d11b      	bne.n	8003588 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003558:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003574:	f043 0204 	orr.w	r2, r3, #4
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e000      	b.n	800358a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
	...

08003598 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e267      	b.n	8003a7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d075      	beq.n	80036a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035b6:	4b88      	ldr	r3, [pc, #544]	; (80037d8 <HAL_RCC_OscConfig+0x240>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 030c 	and.w	r3, r3, #12
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d00c      	beq.n	80035dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035c2:	4b85      	ldr	r3, [pc, #532]	; (80037d8 <HAL_RCC_OscConfig+0x240>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	d112      	bne.n	80035f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ce:	4b82      	ldr	r3, [pc, #520]	; (80037d8 <HAL_RCC_OscConfig+0x240>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035da:	d10b      	bne.n	80035f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035dc:	4b7e      	ldr	r3, [pc, #504]	; (80037d8 <HAL_RCC_OscConfig+0x240>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d05b      	beq.n	80036a0 <HAL_RCC_OscConfig+0x108>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d157      	bne.n	80036a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e242      	b.n	8003a7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035fc:	d106      	bne.n	800360c <HAL_RCC_OscConfig+0x74>
 80035fe:	4b76      	ldr	r3, [pc, #472]	; (80037d8 <HAL_RCC_OscConfig+0x240>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a75      	ldr	r2, [pc, #468]	; (80037d8 <HAL_RCC_OscConfig+0x240>)
 8003604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	e01d      	b.n	8003648 <HAL_RCC_OscConfig+0xb0>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003614:	d10c      	bne.n	8003630 <HAL_RCC_OscConfig+0x98>
 8003616:	4b70      	ldr	r3, [pc, #448]	; (80037d8 <HAL_RCC_OscConfig+0x240>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a6f      	ldr	r2, [pc, #444]	; (80037d8 <HAL_RCC_OscConfig+0x240>)
 800361c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003620:	6013      	str	r3, [r2, #0]
 8003622:	4b6d      	ldr	r3, [pc, #436]	; (80037d8 <HAL_RCC_OscConfig+0x240>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a6c      	ldr	r2, [pc, #432]	; (80037d8 <HAL_RCC_OscConfig+0x240>)
 8003628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800362c:	6013      	str	r3, [r2, #0]
 800362e:	e00b      	b.n	8003648 <HAL_RCC_OscConfig+0xb0>
 8003630:	4b69      	ldr	r3, [pc, #420]	; (80037d8 <HAL_RCC_OscConfig+0x240>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a68      	ldr	r2, [pc, #416]	; (80037d8 <HAL_RCC_OscConfig+0x240>)
 8003636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800363a:	6013      	str	r3, [r2, #0]
 800363c:	4b66      	ldr	r3, [pc, #408]	; (80037d8 <HAL_RCC_OscConfig+0x240>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a65      	ldr	r2, [pc, #404]	; (80037d8 <HAL_RCC_OscConfig+0x240>)
 8003642:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003646:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d013      	beq.n	8003678 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003650:	f7fe f980 	bl	8001954 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003658:	f7fe f97c 	bl	8001954 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b64      	cmp	r3, #100	; 0x64
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e207      	b.n	8003a7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800366a:	4b5b      	ldr	r3, [pc, #364]	; (80037d8 <HAL_RCC_OscConfig+0x240>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0f0      	beq.n	8003658 <HAL_RCC_OscConfig+0xc0>
 8003676:	e014      	b.n	80036a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003678:	f7fe f96c 	bl	8001954 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003680:	f7fe f968 	bl	8001954 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b64      	cmp	r3, #100	; 0x64
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e1f3      	b.n	8003a7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003692:	4b51      	ldr	r3, [pc, #324]	; (80037d8 <HAL_RCC_OscConfig+0x240>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1f0      	bne.n	8003680 <HAL_RCC_OscConfig+0xe8>
 800369e:	e000      	b.n	80036a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d063      	beq.n	8003776 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036ae:	4b4a      	ldr	r3, [pc, #296]	; (80037d8 <HAL_RCC_OscConfig+0x240>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 030c 	and.w	r3, r3, #12
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00b      	beq.n	80036d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ba:	4b47      	ldr	r3, [pc, #284]	; (80037d8 <HAL_RCC_OscConfig+0x240>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036c2:	2b08      	cmp	r3, #8
 80036c4:	d11c      	bne.n	8003700 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036c6:	4b44      	ldr	r3, [pc, #272]	; (80037d8 <HAL_RCC_OscConfig+0x240>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d116      	bne.n	8003700 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036d2:	4b41      	ldr	r3, [pc, #260]	; (80037d8 <HAL_RCC_OscConfig+0x240>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d005      	beq.n	80036ea <HAL_RCC_OscConfig+0x152>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d001      	beq.n	80036ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e1c7      	b.n	8003a7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ea:	4b3b      	ldr	r3, [pc, #236]	; (80037d8 <HAL_RCC_OscConfig+0x240>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	4937      	ldr	r1, [pc, #220]	; (80037d8 <HAL_RCC_OscConfig+0x240>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036fe:	e03a      	b.n	8003776 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d020      	beq.n	800374a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003708:	4b34      	ldr	r3, [pc, #208]	; (80037dc <HAL_RCC_OscConfig+0x244>)
 800370a:	2201      	movs	r2, #1
 800370c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370e:	f7fe f921 	bl	8001954 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003714:	e008      	b.n	8003728 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003716:	f7fe f91d 	bl	8001954 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e1a8      	b.n	8003a7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003728:	4b2b      	ldr	r3, [pc, #172]	; (80037d8 <HAL_RCC_OscConfig+0x240>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d0f0      	beq.n	8003716 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003734:	4b28      	ldr	r3, [pc, #160]	; (80037d8 <HAL_RCC_OscConfig+0x240>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	4925      	ldr	r1, [pc, #148]	; (80037d8 <HAL_RCC_OscConfig+0x240>)
 8003744:	4313      	orrs	r3, r2
 8003746:	600b      	str	r3, [r1, #0]
 8003748:	e015      	b.n	8003776 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800374a:	4b24      	ldr	r3, [pc, #144]	; (80037dc <HAL_RCC_OscConfig+0x244>)
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003750:	f7fe f900 	bl	8001954 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003758:	f7fe f8fc 	bl	8001954 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e187      	b.n	8003a7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800376a:	4b1b      	ldr	r3, [pc, #108]	; (80037d8 <HAL_RCC_OscConfig+0x240>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1f0      	bne.n	8003758 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	2b00      	cmp	r3, #0
 8003780:	d036      	beq.n	80037f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d016      	beq.n	80037b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800378a:	4b15      	ldr	r3, [pc, #84]	; (80037e0 <HAL_RCC_OscConfig+0x248>)
 800378c:	2201      	movs	r2, #1
 800378e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003790:	f7fe f8e0 	bl	8001954 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003798:	f7fe f8dc 	bl	8001954 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e167      	b.n	8003a7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037aa:	4b0b      	ldr	r3, [pc, #44]	; (80037d8 <HAL_RCC_OscConfig+0x240>)
 80037ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0f0      	beq.n	8003798 <HAL_RCC_OscConfig+0x200>
 80037b6:	e01b      	b.n	80037f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037b8:	4b09      	ldr	r3, [pc, #36]	; (80037e0 <HAL_RCC_OscConfig+0x248>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037be:	f7fe f8c9 	bl	8001954 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037c4:	e00e      	b.n	80037e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037c6:	f7fe f8c5 	bl	8001954 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d907      	bls.n	80037e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e150      	b.n	8003a7a <HAL_RCC_OscConfig+0x4e2>
 80037d8:	40023800 	.word	0x40023800
 80037dc:	42470000 	.word	0x42470000
 80037e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037e4:	4b88      	ldr	r3, [pc, #544]	; (8003a08 <HAL_RCC_OscConfig+0x470>)
 80037e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1ea      	bne.n	80037c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0304 	and.w	r3, r3, #4
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 8097 	beq.w	800392c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037fe:	2300      	movs	r3, #0
 8003800:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003802:	4b81      	ldr	r3, [pc, #516]	; (8003a08 <HAL_RCC_OscConfig+0x470>)
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10f      	bne.n	800382e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800380e:	2300      	movs	r3, #0
 8003810:	60bb      	str	r3, [r7, #8]
 8003812:	4b7d      	ldr	r3, [pc, #500]	; (8003a08 <HAL_RCC_OscConfig+0x470>)
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	4a7c      	ldr	r2, [pc, #496]	; (8003a08 <HAL_RCC_OscConfig+0x470>)
 8003818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800381c:	6413      	str	r3, [r2, #64]	; 0x40
 800381e:	4b7a      	ldr	r3, [pc, #488]	; (8003a08 <HAL_RCC_OscConfig+0x470>)
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003826:	60bb      	str	r3, [r7, #8]
 8003828:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800382a:	2301      	movs	r3, #1
 800382c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800382e:	4b77      	ldr	r3, [pc, #476]	; (8003a0c <HAL_RCC_OscConfig+0x474>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003836:	2b00      	cmp	r3, #0
 8003838:	d118      	bne.n	800386c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800383a:	4b74      	ldr	r3, [pc, #464]	; (8003a0c <HAL_RCC_OscConfig+0x474>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a73      	ldr	r2, [pc, #460]	; (8003a0c <HAL_RCC_OscConfig+0x474>)
 8003840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003844:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003846:	f7fe f885 	bl	8001954 <HAL_GetTick>
 800384a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800384c:	e008      	b.n	8003860 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800384e:	f7fe f881 	bl	8001954 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d901      	bls.n	8003860 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e10c      	b.n	8003a7a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003860:	4b6a      	ldr	r3, [pc, #424]	; (8003a0c <HAL_RCC_OscConfig+0x474>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0f0      	beq.n	800384e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d106      	bne.n	8003882 <HAL_RCC_OscConfig+0x2ea>
 8003874:	4b64      	ldr	r3, [pc, #400]	; (8003a08 <HAL_RCC_OscConfig+0x470>)
 8003876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003878:	4a63      	ldr	r2, [pc, #396]	; (8003a08 <HAL_RCC_OscConfig+0x470>)
 800387a:	f043 0301 	orr.w	r3, r3, #1
 800387e:	6713      	str	r3, [r2, #112]	; 0x70
 8003880:	e01c      	b.n	80038bc <HAL_RCC_OscConfig+0x324>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	2b05      	cmp	r3, #5
 8003888:	d10c      	bne.n	80038a4 <HAL_RCC_OscConfig+0x30c>
 800388a:	4b5f      	ldr	r3, [pc, #380]	; (8003a08 <HAL_RCC_OscConfig+0x470>)
 800388c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388e:	4a5e      	ldr	r2, [pc, #376]	; (8003a08 <HAL_RCC_OscConfig+0x470>)
 8003890:	f043 0304 	orr.w	r3, r3, #4
 8003894:	6713      	str	r3, [r2, #112]	; 0x70
 8003896:	4b5c      	ldr	r3, [pc, #368]	; (8003a08 <HAL_RCC_OscConfig+0x470>)
 8003898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389a:	4a5b      	ldr	r2, [pc, #364]	; (8003a08 <HAL_RCC_OscConfig+0x470>)
 800389c:	f043 0301 	orr.w	r3, r3, #1
 80038a0:	6713      	str	r3, [r2, #112]	; 0x70
 80038a2:	e00b      	b.n	80038bc <HAL_RCC_OscConfig+0x324>
 80038a4:	4b58      	ldr	r3, [pc, #352]	; (8003a08 <HAL_RCC_OscConfig+0x470>)
 80038a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a8:	4a57      	ldr	r2, [pc, #348]	; (8003a08 <HAL_RCC_OscConfig+0x470>)
 80038aa:	f023 0301 	bic.w	r3, r3, #1
 80038ae:	6713      	str	r3, [r2, #112]	; 0x70
 80038b0:	4b55      	ldr	r3, [pc, #340]	; (8003a08 <HAL_RCC_OscConfig+0x470>)
 80038b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b4:	4a54      	ldr	r2, [pc, #336]	; (8003a08 <HAL_RCC_OscConfig+0x470>)
 80038b6:	f023 0304 	bic.w	r3, r3, #4
 80038ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d015      	beq.n	80038f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c4:	f7fe f846 	bl	8001954 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ca:	e00a      	b.n	80038e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038cc:	f7fe f842 	bl	8001954 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038da:	4293      	cmp	r3, r2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e0cb      	b.n	8003a7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038e2:	4b49      	ldr	r3, [pc, #292]	; (8003a08 <HAL_RCC_OscConfig+0x470>)
 80038e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d0ee      	beq.n	80038cc <HAL_RCC_OscConfig+0x334>
 80038ee:	e014      	b.n	800391a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038f0:	f7fe f830 	bl	8001954 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f6:	e00a      	b.n	800390e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038f8:	f7fe f82c 	bl	8001954 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	f241 3288 	movw	r2, #5000	; 0x1388
 8003906:	4293      	cmp	r3, r2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e0b5      	b.n	8003a7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800390e:	4b3e      	ldr	r3, [pc, #248]	; (8003a08 <HAL_RCC_OscConfig+0x470>)
 8003910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1ee      	bne.n	80038f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800391a:	7dfb      	ldrb	r3, [r7, #23]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d105      	bne.n	800392c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003920:	4b39      	ldr	r3, [pc, #228]	; (8003a08 <HAL_RCC_OscConfig+0x470>)
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	4a38      	ldr	r2, [pc, #224]	; (8003a08 <HAL_RCC_OscConfig+0x470>)
 8003926:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800392a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 80a1 	beq.w	8003a78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003936:	4b34      	ldr	r3, [pc, #208]	; (8003a08 <HAL_RCC_OscConfig+0x470>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 030c 	and.w	r3, r3, #12
 800393e:	2b08      	cmp	r3, #8
 8003940:	d05c      	beq.n	80039fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	2b02      	cmp	r3, #2
 8003948:	d141      	bne.n	80039ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800394a:	4b31      	ldr	r3, [pc, #196]	; (8003a10 <HAL_RCC_OscConfig+0x478>)
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003950:	f7fe f800 	bl	8001954 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003958:	f7fd fffc 	bl	8001954 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e087      	b.n	8003a7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800396a:	4b27      	ldr	r3, [pc, #156]	; (8003a08 <HAL_RCC_OscConfig+0x470>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1f0      	bne.n	8003958 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69da      	ldr	r2, [r3, #28]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	019b      	lsls	r3, r3, #6
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398c:	085b      	lsrs	r3, r3, #1
 800398e:	3b01      	subs	r3, #1
 8003990:	041b      	lsls	r3, r3, #16
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	061b      	lsls	r3, r3, #24
 800399a:	491b      	ldr	r1, [pc, #108]	; (8003a08 <HAL_RCC_OscConfig+0x470>)
 800399c:	4313      	orrs	r3, r2
 800399e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039a0:	4b1b      	ldr	r3, [pc, #108]	; (8003a10 <HAL_RCC_OscConfig+0x478>)
 80039a2:	2201      	movs	r2, #1
 80039a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a6:	f7fd ffd5 	bl	8001954 <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ac:	e008      	b.n	80039c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ae:	f7fd ffd1 	bl	8001954 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e05c      	b.n	8003a7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039c0:	4b11      	ldr	r3, [pc, #68]	; (8003a08 <HAL_RCC_OscConfig+0x470>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d0f0      	beq.n	80039ae <HAL_RCC_OscConfig+0x416>
 80039cc:	e054      	b.n	8003a78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ce:	4b10      	ldr	r3, [pc, #64]	; (8003a10 <HAL_RCC_OscConfig+0x478>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d4:	f7fd ffbe 	bl	8001954 <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039dc:	f7fd ffba 	bl	8001954 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e045      	b.n	8003a7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ee:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <HAL_RCC_OscConfig+0x470>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1f0      	bne.n	80039dc <HAL_RCC_OscConfig+0x444>
 80039fa:	e03d      	b.n	8003a78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d107      	bne.n	8003a14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e038      	b.n	8003a7a <HAL_RCC_OscConfig+0x4e2>
 8003a08:	40023800 	.word	0x40023800
 8003a0c:	40007000 	.word	0x40007000
 8003a10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a14:	4b1b      	ldr	r3, [pc, #108]	; (8003a84 <HAL_RCC_OscConfig+0x4ec>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d028      	beq.n	8003a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d121      	bne.n	8003a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d11a      	bne.n	8003a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a44:	4013      	ands	r3, r2
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d111      	bne.n	8003a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5a:	085b      	lsrs	r3, r3, #1
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d107      	bne.n	8003a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d001      	beq.n	8003a78 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e000      	b.n	8003a7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40023800 	.word	0x40023800

08003a88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e0cc      	b.n	8003c36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a9c:	4b68      	ldr	r3, [pc, #416]	; (8003c40 <HAL_RCC_ClockConfig+0x1b8>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d90c      	bls.n	8003ac4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aaa:	4b65      	ldr	r3, [pc, #404]	; (8003c40 <HAL_RCC_ClockConfig+0x1b8>)
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	b2d2      	uxtb	r2, r2
 8003ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab2:	4b63      	ldr	r3, [pc, #396]	; (8003c40 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0307 	and.w	r3, r3, #7
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d001      	beq.n	8003ac4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e0b8      	b.n	8003c36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d020      	beq.n	8003b12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d005      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003adc:	4b59      	ldr	r3, [pc, #356]	; (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	4a58      	ldr	r2, [pc, #352]	; (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ae6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0308 	and.w	r3, r3, #8
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d005      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003af4:	4b53      	ldr	r3, [pc, #332]	; (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	4a52      	ldr	r2, [pc, #328]	; (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003afa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003afe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b00:	4b50      	ldr	r3, [pc, #320]	; (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	494d      	ldr	r1, [pc, #308]	; (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d044      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d107      	bne.n	8003b36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b26:	4b47      	ldr	r3, [pc, #284]	; (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d119      	bne.n	8003b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e07f      	b.n	8003c36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d003      	beq.n	8003b46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	d107      	bne.n	8003b56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b46:	4b3f      	ldr	r3, [pc, #252]	; (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d109      	bne.n	8003b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e06f      	b.n	8003c36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b56:	4b3b      	ldr	r3, [pc, #236]	; (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e067      	b.n	8003c36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b66:	4b37      	ldr	r3, [pc, #220]	; (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f023 0203 	bic.w	r2, r3, #3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	4934      	ldr	r1, [pc, #208]	; (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b78:	f7fd feec 	bl	8001954 <HAL_GetTick>
 8003b7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b7e:	e00a      	b.n	8003b96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b80:	f7fd fee8 	bl	8001954 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e04f      	b.n	8003c36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b96:	4b2b      	ldr	r3, [pc, #172]	; (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 020c 	and.w	r2, r3, #12
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d1eb      	bne.n	8003b80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ba8:	4b25      	ldr	r3, [pc, #148]	; (8003c40 <HAL_RCC_ClockConfig+0x1b8>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d20c      	bcs.n	8003bd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb6:	4b22      	ldr	r3, [pc, #136]	; (8003c40 <HAL_RCC_ClockConfig+0x1b8>)
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bbe:	4b20      	ldr	r3, [pc, #128]	; (8003c40 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d001      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e032      	b.n	8003c36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d008      	beq.n	8003bee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bdc:	4b19      	ldr	r3, [pc, #100]	; (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	4916      	ldr	r1, [pc, #88]	; (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d009      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bfa:	4b12      	ldr	r3, [pc, #72]	; (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	490e      	ldr	r1, [pc, #56]	; (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c0e:	f000 f821 	bl	8003c54 <HAL_RCC_GetSysClockFreq>
 8003c12:	4602      	mov	r2, r0
 8003c14:	4b0b      	ldr	r3, [pc, #44]	; (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	091b      	lsrs	r3, r3, #4
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	490a      	ldr	r1, [pc, #40]	; (8003c48 <HAL_RCC_ClockConfig+0x1c0>)
 8003c20:	5ccb      	ldrb	r3, [r1, r3]
 8003c22:	fa22 f303 	lsr.w	r3, r2, r3
 8003c26:	4a09      	ldr	r2, [pc, #36]	; (8003c4c <HAL_RCC_ClockConfig+0x1c4>)
 8003c28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c2a:	4b09      	ldr	r3, [pc, #36]	; (8003c50 <HAL_RCC_ClockConfig+0x1c8>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fd fe4c 	bl	80018cc <HAL_InitTick>

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	40023c00 	.word	0x40023c00
 8003c44:	40023800 	.word	0x40023800
 8003c48:	080051b8 	.word	0x080051b8
 8003c4c:	20000004 	.word	0x20000004
 8003c50:	20000008 	.word	0x20000008

08003c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c58:	b094      	sub	sp, #80	; 0x50
 8003c5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	647b      	str	r3, [r7, #68]	; 0x44
 8003c60:	2300      	movs	r3, #0
 8003c62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c64:	2300      	movs	r3, #0
 8003c66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c6c:	4b79      	ldr	r3, [pc, #484]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f003 030c 	and.w	r3, r3, #12
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	d00d      	beq.n	8003c94 <HAL_RCC_GetSysClockFreq+0x40>
 8003c78:	2b08      	cmp	r3, #8
 8003c7a:	f200 80e1 	bhi.w	8003e40 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d002      	beq.n	8003c88 <HAL_RCC_GetSysClockFreq+0x34>
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	d003      	beq.n	8003c8e <HAL_RCC_GetSysClockFreq+0x3a>
 8003c86:	e0db      	b.n	8003e40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c88:	4b73      	ldr	r3, [pc, #460]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c8a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003c8c:	e0db      	b.n	8003e46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c8e:	4b73      	ldr	r3, [pc, #460]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x208>)
 8003c90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c92:	e0d8      	b.n	8003e46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c94:	4b6f      	ldr	r3, [pc, #444]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c9c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c9e:	4b6d      	ldr	r3, [pc, #436]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d063      	beq.n	8003d72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003caa:	4b6a      	ldr	r3, [pc, #424]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	099b      	lsrs	r3, r3, #6
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cb4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cbc:	633b      	str	r3, [r7, #48]	; 0x30
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8003cc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003cc6:	4622      	mov	r2, r4
 8003cc8:	462b      	mov	r3, r5
 8003cca:	f04f 0000 	mov.w	r0, #0
 8003cce:	f04f 0100 	mov.w	r1, #0
 8003cd2:	0159      	lsls	r1, r3, #5
 8003cd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cd8:	0150      	lsls	r0, r2, #5
 8003cda:	4602      	mov	r2, r0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4621      	mov	r1, r4
 8003ce0:	1a51      	subs	r1, r2, r1
 8003ce2:	6139      	str	r1, [r7, #16]
 8003ce4:	4629      	mov	r1, r5
 8003ce6:	eb63 0301 	sbc.w	r3, r3, r1
 8003cea:	617b      	str	r3, [r7, #20]
 8003cec:	f04f 0200 	mov.w	r2, #0
 8003cf0:	f04f 0300 	mov.w	r3, #0
 8003cf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cf8:	4659      	mov	r1, fp
 8003cfa:	018b      	lsls	r3, r1, #6
 8003cfc:	4651      	mov	r1, sl
 8003cfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d02:	4651      	mov	r1, sl
 8003d04:	018a      	lsls	r2, r1, #6
 8003d06:	4651      	mov	r1, sl
 8003d08:	ebb2 0801 	subs.w	r8, r2, r1
 8003d0c:	4659      	mov	r1, fp
 8003d0e:	eb63 0901 	sbc.w	r9, r3, r1
 8003d12:	f04f 0200 	mov.w	r2, #0
 8003d16:	f04f 0300 	mov.w	r3, #0
 8003d1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d26:	4690      	mov	r8, r2
 8003d28:	4699      	mov	r9, r3
 8003d2a:	4623      	mov	r3, r4
 8003d2c:	eb18 0303 	adds.w	r3, r8, r3
 8003d30:	60bb      	str	r3, [r7, #8]
 8003d32:	462b      	mov	r3, r5
 8003d34:	eb49 0303 	adc.w	r3, r9, r3
 8003d38:	60fb      	str	r3, [r7, #12]
 8003d3a:	f04f 0200 	mov.w	r2, #0
 8003d3e:	f04f 0300 	mov.w	r3, #0
 8003d42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d46:	4629      	mov	r1, r5
 8003d48:	024b      	lsls	r3, r1, #9
 8003d4a:	4621      	mov	r1, r4
 8003d4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d50:	4621      	mov	r1, r4
 8003d52:	024a      	lsls	r2, r1, #9
 8003d54:	4610      	mov	r0, r2
 8003d56:	4619      	mov	r1, r3
 8003d58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d64:	f7fc fa8c 	bl	8000280 <__aeabi_uldivmod>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d70:	e058      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d72:	4b38      	ldr	r3, [pc, #224]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	099b      	lsrs	r3, r3, #6
 8003d78:	2200      	movs	r2, #0
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	4611      	mov	r1, r2
 8003d7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d82:	623b      	str	r3, [r7, #32]
 8003d84:	2300      	movs	r3, #0
 8003d86:	627b      	str	r3, [r7, #36]	; 0x24
 8003d88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d8c:	4642      	mov	r2, r8
 8003d8e:	464b      	mov	r3, r9
 8003d90:	f04f 0000 	mov.w	r0, #0
 8003d94:	f04f 0100 	mov.w	r1, #0
 8003d98:	0159      	lsls	r1, r3, #5
 8003d9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d9e:	0150      	lsls	r0, r2, #5
 8003da0:	4602      	mov	r2, r0
 8003da2:	460b      	mov	r3, r1
 8003da4:	4641      	mov	r1, r8
 8003da6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003daa:	4649      	mov	r1, r9
 8003dac:	eb63 0b01 	sbc.w	fp, r3, r1
 8003db0:	f04f 0200 	mov.w	r2, #0
 8003db4:	f04f 0300 	mov.w	r3, #0
 8003db8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003dbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003dc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003dc4:	ebb2 040a 	subs.w	r4, r2, sl
 8003dc8:	eb63 050b 	sbc.w	r5, r3, fp
 8003dcc:	f04f 0200 	mov.w	r2, #0
 8003dd0:	f04f 0300 	mov.w	r3, #0
 8003dd4:	00eb      	lsls	r3, r5, #3
 8003dd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dda:	00e2      	lsls	r2, r4, #3
 8003ddc:	4614      	mov	r4, r2
 8003dde:	461d      	mov	r5, r3
 8003de0:	4643      	mov	r3, r8
 8003de2:	18e3      	adds	r3, r4, r3
 8003de4:	603b      	str	r3, [r7, #0]
 8003de6:	464b      	mov	r3, r9
 8003de8:	eb45 0303 	adc.w	r3, r5, r3
 8003dec:	607b      	str	r3, [r7, #4]
 8003dee:	f04f 0200 	mov.w	r2, #0
 8003df2:	f04f 0300 	mov.w	r3, #0
 8003df6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dfa:	4629      	mov	r1, r5
 8003dfc:	028b      	lsls	r3, r1, #10
 8003dfe:	4621      	mov	r1, r4
 8003e00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e04:	4621      	mov	r1, r4
 8003e06:	028a      	lsls	r2, r1, #10
 8003e08:	4610      	mov	r0, r2
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e0e:	2200      	movs	r2, #0
 8003e10:	61bb      	str	r3, [r7, #24]
 8003e12:	61fa      	str	r2, [r7, #28]
 8003e14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e18:	f7fc fa32 	bl	8000280 <__aeabi_uldivmod>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	460b      	mov	r3, r1
 8003e20:	4613      	mov	r3, r2
 8003e22:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e24:	4b0b      	ldr	r3, [pc, #44]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	0c1b      	lsrs	r3, r3, #16
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	3301      	adds	r3, #1
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003e34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e3e:	e002      	b.n	8003e46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e40:	4b05      	ldr	r3, [pc, #20]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3750      	adds	r7, #80	; 0x50
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e52:	bf00      	nop
 8003e54:	40023800 	.word	0x40023800
 8003e58:	00f42400 	.word	0x00f42400
 8003e5c:	007a1200 	.word	0x007a1200

08003e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e64:	4b03      	ldr	r3, [pc, #12]	; (8003e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e66:	681b      	ldr	r3, [r3, #0]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	20000004 	.word	0x20000004

08003e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e7c:	f7ff fff0 	bl	8003e60 <HAL_RCC_GetHCLKFreq>
 8003e80:	4602      	mov	r2, r0
 8003e82:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	0a9b      	lsrs	r3, r3, #10
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	4903      	ldr	r1, [pc, #12]	; (8003e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e8e:	5ccb      	ldrb	r3, [r1, r3]
 8003e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40023800 	.word	0x40023800
 8003e9c:	080051c8 	.word	0x080051c8

08003ea0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e041      	b.n	8003f36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d106      	bne.n	8003ecc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7fd fba2 	bl	8001610 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	3304      	adds	r3, #4
 8003edc:	4619      	mov	r1, r3
 8003ede:	4610      	mov	r0, r2
 8003ee0:	f000 fac4 	bl	800446c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
	...

08003f40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d001      	beq.n	8003f58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e04e      	b.n	8003ff6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f042 0201 	orr.w	r2, r2, #1
 8003f6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a23      	ldr	r2, [pc, #140]	; (8004004 <HAL_TIM_Base_Start_IT+0xc4>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d022      	beq.n	8003fc0 <HAL_TIM_Base_Start_IT+0x80>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f82:	d01d      	beq.n	8003fc0 <HAL_TIM_Base_Start_IT+0x80>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a1f      	ldr	r2, [pc, #124]	; (8004008 <HAL_TIM_Base_Start_IT+0xc8>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d018      	beq.n	8003fc0 <HAL_TIM_Base_Start_IT+0x80>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a1e      	ldr	r2, [pc, #120]	; (800400c <HAL_TIM_Base_Start_IT+0xcc>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d013      	beq.n	8003fc0 <HAL_TIM_Base_Start_IT+0x80>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a1c      	ldr	r2, [pc, #112]	; (8004010 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d00e      	beq.n	8003fc0 <HAL_TIM_Base_Start_IT+0x80>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a1b      	ldr	r2, [pc, #108]	; (8004014 <HAL_TIM_Base_Start_IT+0xd4>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d009      	beq.n	8003fc0 <HAL_TIM_Base_Start_IT+0x80>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a19      	ldr	r2, [pc, #100]	; (8004018 <HAL_TIM_Base_Start_IT+0xd8>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d004      	beq.n	8003fc0 <HAL_TIM_Base_Start_IT+0x80>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a18      	ldr	r2, [pc, #96]	; (800401c <HAL_TIM_Base_Start_IT+0xdc>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d111      	bne.n	8003fe4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2b06      	cmp	r3, #6
 8003fd0:	d010      	beq.n	8003ff4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f042 0201 	orr.w	r2, r2, #1
 8003fe0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe2:	e007      	b.n	8003ff4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0201 	orr.w	r2, r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	40010000 	.word	0x40010000
 8004008:	40000400 	.word	0x40000400
 800400c:	40000800 	.word	0x40000800
 8004010:	40000c00 	.word	0x40000c00
 8004014:	40010400 	.word	0x40010400
 8004018:	40014000 	.word	0x40014000
 800401c:	40001800 	.word	0x40001800

08004020 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68da      	ldr	r2, [r3, #12]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 0201 	bic.w	r2, r2, #1
 8004036:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6a1a      	ldr	r2, [r3, #32]
 800403e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004042:	4013      	ands	r3, r2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10f      	bne.n	8004068 <HAL_TIM_Base_Stop_IT+0x48>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6a1a      	ldr	r2, [r3, #32]
 800404e:	f240 4344 	movw	r3, #1092	; 0x444
 8004052:	4013      	ands	r3, r2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d107      	bne.n	8004068 <HAL_TIM_Base_Stop_IT+0x48>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0201 	bic.w	r2, r2, #1
 8004066:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b082      	sub	sp, #8
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b02      	cmp	r3, #2
 8004092:	d122      	bne.n	80040da <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d11b      	bne.n	80040da <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f06f 0202 	mvn.w	r2, #2
 80040aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	f003 0303 	and.w	r3, r3, #3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f9b5 	bl	8004430 <HAL_TIM_IC_CaptureCallback>
 80040c6:	e005      	b.n	80040d4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 f9a7 	bl	800441c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f9b8 	bl	8004444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	f003 0304 	and.w	r3, r3, #4
 80040e4:	2b04      	cmp	r3, #4
 80040e6:	d122      	bne.n	800412e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	f003 0304 	and.w	r3, r3, #4
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	d11b      	bne.n	800412e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f06f 0204 	mvn.w	r2, #4
 80040fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2202      	movs	r2, #2
 8004104:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f98b 	bl	8004430 <HAL_TIM_IC_CaptureCallback>
 800411a:	e005      	b.n	8004128 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f97d 	bl	800441c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f98e 	bl	8004444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	f003 0308 	and.w	r3, r3, #8
 8004138:	2b08      	cmp	r3, #8
 800413a:	d122      	bne.n	8004182 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	f003 0308 	and.w	r3, r3, #8
 8004146:	2b08      	cmp	r3, #8
 8004148:	d11b      	bne.n	8004182 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f06f 0208 	mvn.w	r2, #8
 8004152:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2204      	movs	r2, #4
 8004158:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	f003 0303 	and.w	r3, r3, #3
 8004164:	2b00      	cmp	r3, #0
 8004166:	d003      	beq.n	8004170 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 f961 	bl	8004430 <HAL_TIM_IC_CaptureCallback>
 800416e:	e005      	b.n	800417c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f953 	bl	800441c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f964 	bl	8004444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	f003 0310 	and.w	r3, r3, #16
 800418c:	2b10      	cmp	r3, #16
 800418e:	d122      	bne.n	80041d6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f003 0310 	and.w	r3, r3, #16
 800419a:	2b10      	cmp	r3, #16
 800419c:	d11b      	bne.n	80041d6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f06f 0210 	mvn.w	r2, #16
 80041a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2208      	movs	r2, #8
 80041ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f937 	bl	8004430 <HAL_TIM_IC_CaptureCallback>
 80041c2:	e005      	b.n	80041d0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 f929 	bl	800441c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f93a 	bl	8004444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d10e      	bne.n	8004202 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d107      	bne.n	8004202 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f06f 0201 	mvn.w	r2, #1
 80041fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f7fc fd53 	bl	8000ca8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420c:	2b80      	cmp	r3, #128	; 0x80
 800420e:	d10e      	bne.n	800422e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421a:	2b80      	cmp	r3, #128	; 0x80
 800421c:	d107      	bne.n	800422e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004226:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 fadf 	bl	80047ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004238:	2b40      	cmp	r3, #64	; 0x40
 800423a:	d10e      	bne.n	800425a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004246:	2b40      	cmp	r3, #64	; 0x40
 8004248:	d107      	bne.n	800425a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004252:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 f8ff 	bl	8004458 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	f003 0320 	and.w	r3, r3, #32
 8004264:	2b20      	cmp	r3, #32
 8004266:	d10e      	bne.n	8004286 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	f003 0320 	and.w	r3, r3, #32
 8004272:	2b20      	cmp	r3, #32
 8004274:	d107      	bne.n	8004286 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f06f 0220 	mvn.w	r2, #32
 800427e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 faa9 	bl	80047d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004286:	bf00      	nop
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b084      	sub	sp, #16
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
 8004296:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004298:	2300      	movs	r3, #0
 800429a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d101      	bne.n	80042aa <HAL_TIM_ConfigClockSource+0x1c>
 80042a6:	2302      	movs	r3, #2
 80042a8:	e0b4      	b.n	8004414 <HAL_TIM_ConfigClockSource+0x186>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2202      	movs	r2, #2
 80042b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042c8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042d0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042e2:	d03e      	beq.n	8004362 <HAL_TIM_ConfigClockSource+0xd4>
 80042e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042e8:	f200 8087 	bhi.w	80043fa <HAL_TIM_ConfigClockSource+0x16c>
 80042ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f0:	f000 8086 	beq.w	8004400 <HAL_TIM_ConfigClockSource+0x172>
 80042f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f8:	d87f      	bhi.n	80043fa <HAL_TIM_ConfigClockSource+0x16c>
 80042fa:	2b70      	cmp	r3, #112	; 0x70
 80042fc:	d01a      	beq.n	8004334 <HAL_TIM_ConfigClockSource+0xa6>
 80042fe:	2b70      	cmp	r3, #112	; 0x70
 8004300:	d87b      	bhi.n	80043fa <HAL_TIM_ConfigClockSource+0x16c>
 8004302:	2b60      	cmp	r3, #96	; 0x60
 8004304:	d050      	beq.n	80043a8 <HAL_TIM_ConfigClockSource+0x11a>
 8004306:	2b60      	cmp	r3, #96	; 0x60
 8004308:	d877      	bhi.n	80043fa <HAL_TIM_ConfigClockSource+0x16c>
 800430a:	2b50      	cmp	r3, #80	; 0x50
 800430c:	d03c      	beq.n	8004388 <HAL_TIM_ConfigClockSource+0xfa>
 800430e:	2b50      	cmp	r3, #80	; 0x50
 8004310:	d873      	bhi.n	80043fa <HAL_TIM_ConfigClockSource+0x16c>
 8004312:	2b40      	cmp	r3, #64	; 0x40
 8004314:	d058      	beq.n	80043c8 <HAL_TIM_ConfigClockSource+0x13a>
 8004316:	2b40      	cmp	r3, #64	; 0x40
 8004318:	d86f      	bhi.n	80043fa <HAL_TIM_ConfigClockSource+0x16c>
 800431a:	2b30      	cmp	r3, #48	; 0x30
 800431c:	d064      	beq.n	80043e8 <HAL_TIM_ConfigClockSource+0x15a>
 800431e:	2b30      	cmp	r3, #48	; 0x30
 8004320:	d86b      	bhi.n	80043fa <HAL_TIM_ConfigClockSource+0x16c>
 8004322:	2b20      	cmp	r3, #32
 8004324:	d060      	beq.n	80043e8 <HAL_TIM_ConfigClockSource+0x15a>
 8004326:	2b20      	cmp	r3, #32
 8004328:	d867      	bhi.n	80043fa <HAL_TIM_ConfigClockSource+0x16c>
 800432a:	2b00      	cmp	r3, #0
 800432c:	d05c      	beq.n	80043e8 <HAL_TIM_ConfigClockSource+0x15a>
 800432e:	2b10      	cmp	r3, #16
 8004330:	d05a      	beq.n	80043e8 <HAL_TIM_ConfigClockSource+0x15a>
 8004332:	e062      	b.n	80043fa <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6818      	ldr	r0, [r3, #0]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	6899      	ldr	r1, [r3, #8]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f000 f9ac 	bl	80046a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004356:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	609a      	str	r2, [r3, #8]
      break;
 8004360:	e04f      	b.n	8004402 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6818      	ldr	r0, [r3, #0]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	6899      	ldr	r1, [r3, #8]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f000 f995 	bl	80046a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004384:	609a      	str	r2, [r3, #8]
      break;
 8004386:	e03c      	b.n	8004402 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6818      	ldr	r0, [r3, #0]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	6859      	ldr	r1, [r3, #4]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	461a      	mov	r2, r3
 8004396:	f000 f909 	bl	80045ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2150      	movs	r1, #80	; 0x50
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 f962 	bl	800466a <TIM_ITRx_SetConfig>
      break;
 80043a6:	e02c      	b.n	8004402 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6818      	ldr	r0, [r3, #0]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	6859      	ldr	r1, [r3, #4]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	461a      	mov	r2, r3
 80043b6:	f000 f928 	bl	800460a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2160      	movs	r1, #96	; 0x60
 80043c0:	4618      	mov	r0, r3
 80043c2:	f000 f952 	bl	800466a <TIM_ITRx_SetConfig>
      break;
 80043c6:	e01c      	b.n	8004402 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6818      	ldr	r0, [r3, #0]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	6859      	ldr	r1, [r3, #4]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	461a      	mov	r2, r3
 80043d6:	f000 f8e9 	bl	80045ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2140      	movs	r1, #64	; 0x40
 80043e0:	4618      	mov	r0, r3
 80043e2:	f000 f942 	bl	800466a <TIM_ITRx_SetConfig>
      break;
 80043e6:	e00c      	b.n	8004402 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4619      	mov	r1, r3
 80043f2:	4610      	mov	r0, r2
 80043f4:	f000 f939 	bl	800466a <TIM_ITRx_SetConfig>
      break;
 80043f8:	e003      	b.n	8004402 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	73fb      	strb	r3, [r7, #15]
      break;
 80043fe:	e000      	b.n	8004402 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004400:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004412:	7bfb      	ldrb	r3, [r7, #15]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a40      	ldr	r2, [pc, #256]	; (8004580 <TIM_Base_SetConfig+0x114>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d013      	beq.n	80044ac <TIM_Base_SetConfig+0x40>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800448a:	d00f      	beq.n	80044ac <TIM_Base_SetConfig+0x40>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a3d      	ldr	r2, [pc, #244]	; (8004584 <TIM_Base_SetConfig+0x118>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d00b      	beq.n	80044ac <TIM_Base_SetConfig+0x40>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a3c      	ldr	r2, [pc, #240]	; (8004588 <TIM_Base_SetConfig+0x11c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d007      	beq.n	80044ac <TIM_Base_SetConfig+0x40>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a3b      	ldr	r2, [pc, #236]	; (800458c <TIM_Base_SetConfig+0x120>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d003      	beq.n	80044ac <TIM_Base_SetConfig+0x40>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a3a      	ldr	r2, [pc, #232]	; (8004590 <TIM_Base_SetConfig+0x124>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d108      	bne.n	80044be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a2f      	ldr	r2, [pc, #188]	; (8004580 <TIM_Base_SetConfig+0x114>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d02b      	beq.n	800451e <TIM_Base_SetConfig+0xb2>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044cc:	d027      	beq.n	800451e <TIM_Base_SetConfig+0xb2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a2c      	ldr	r2, [pc, #176]	; (8004584 <TIM_Base_SetConfig+0x118>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d023      	beq.n	800451e <TIM_Base_SetConfig+0xb2>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a2b      	ldr	r2, [pc, #172]	; (8004588 <TIM_Base_SetConfig+0x11c>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d01f      	beq.n	800451e <TIM_Base_SetConfig+0xb2>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a2a      	ldr	r2, [pc, #168]	; (800458c <TIM_Base_SetConfig+0x120>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d01b      	beq.n	800451e <TIM_Base_SetConfig+0xb2>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a29      	ldr	r2, [pc, #164]	; (8004590 <TIM_Base_SetConfig+0x124>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d017      	beq.n	800451e <TIM_Base_SetConfig+0xb2>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a28      	ldr	r2, [pc, #160]	; (8004594 <TIM_Base_SetConfig+0x128>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d013      	beq.n	800451e <TIM_Base_SetConfig+0xb2>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a27      	ldr	r2, [pc, #156]	; (8004598 <TIM_Base_SetConfig+0x12c>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d00f      	beq.n	800451e <TIM_Base_SetConfig+0xb2>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a26      	ldr	r2, [pc, #152]	; (800459c <TIM_Base_SetConfig+0x130>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d00b      	beq.n	800451e <TIM_Base_SetConfig+0xb2>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a25      	ldr	r2, [pc, #148]	; (80045a0 <TIM_Base_SetConfig+0x134>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d007      	beq.n	800451e <TIM_Base_SetConfig+0xb2>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a24      	ldr	r2, [pc, #144]	; (80045a4 <TIM_Base_SetConfig+0x138>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d003      	beq.n	800451e <TIM_Base_SetConfig+0xb2>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a23      	ldr	r2, [pc, #140]	; (80045a8 <TIM_Base_SetConfig+0x13c>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d108      	bne.n	8004530 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	4313      	orrs	r3, r2
 800452e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	4313      	orrs	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a0a      	ldr	r2, [pc, #40]	; (8004580 <TIM_Base_SetConfig+0x114>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d003      	beq.n	8004564 <TIM_Base_SetConfig+0xf8>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a0c      	ldr	r2, [pc, #48]	; (8004590 <TIM_Base_SetConfig+0x124>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d103      	bne.n	800456c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	691a      	ldr	r2, [r3, #16]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	615a      	str	r2, [r3, #20]
}
 8004572:	bf00      	nop
 8004574:	3714      	adds	r7, #20
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	40010000 	.word	0x40010000
 8004584:	40000400 	.word	0x40000400
 8004588:	40000800 	.word	0x40000800
 800458c:	40000c00 	.word	0x40000c00
 8004590:	40010400 	.word	0x40010400
 8004594:	40014000 	.word	0x40014000
 8004598:	40014400 	.word	0x40014400
 800459c:	40014800 	.word	0x40014800
 80045a0:	40001800 	.word	0x40001800
 80045a4:	40001c00 	.word	0x40001c00
 80045a8:	40002000 	.word	0x40002000

080045ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b087      	sub	sp, #28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	f023 0201 	bic.w	r2, r3, #1
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	011b      	lsls	r3, r3, #4
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	4313      	orrs	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f023 030a 	bic.w	r3, r3, #10
 80045e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	621a      	str	r2, [r3, #32]
}
 80045fe:	bf00      	nop
 8004600:	371c      	adds	r7, #28
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800460a:	b480      	push	{r7}
 800460c:	b087      	sub	sp, #28
 800460e:	af00      	add	r7, sp, #0
 8004610:	60f8      	str	r0, [r7, #12]
 8004612:	60b9      	str	r1, [r7, #8]
 8004614:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	f023 0210 	bic.w	r2, r3, #16
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004634:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	031b      	lsls	r3, r3, #12
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	4313      	orrs	r3, r2
 800463e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004646:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	011b      	lsls	r3, r3, #4
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	4313      	orrs	r3, r2
 8004650:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	621a      	str	r2, [r3, #32]
}
 800465e:	bf00      	nop
 8004660:	371c      	adds	r7, #28
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800466a:	b480      	push	{r7}
 800466c:	b085      	sub	sp, #20
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
 8004672:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004680:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004682:	683a      	ldr	r2, [r7, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	4313      	orrs	r3, r2
 8004688:	f043 0307 	orr.w	r3, r3, #7
 800468c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	609a      	str	r2, [r3, #8]
}
 8004694:	bf00      	nop
 8004696:	3714      	adds	r7, #20
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b087      	sub	sp, #28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
 80046ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	021a      	lsls	r2, r3, #8
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	431a      	orrs	r2, r3
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	609a      	str	r2, [r3, #8]
}
 80046d4:	bf00      	nop
 80046d6:	371c      	adds	r7, #28
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d101      	bne.n	80046f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046f4:	2302      	movs	r3, #2
 80046f6:	e05a      	b.n	80047ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	4313      	orrs	r3, r2
 8004728:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a21      	ldr	r2, [pc, #132]	; (80047bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d022      	beq.n	8004782 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004744:	d01d      	beq.n	8004782 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a1d      	ldr	r2, [pc, #116]	; (80047c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d018      	beq.n	8004782 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a1b      	ldr	r2, [pc, #108]	; (80047c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d013      	beq.n	8004782 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a1a      	ldr	r2, [pc, #104]	; (80047c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d00e      	beq.n	8004782 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a18      	ldr	r2, [pc, #96]	; (80047cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d009      	beq.n	8004782 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a17      	ldr	r2, [pc, #92]	; (80047d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d004      	beq.n	8004782 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a15      	ldr	r2, [pc, #84]	; (80047d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d10c      	bne.n	800479c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004788:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	4313      	orrs	r3, r2
 8004792:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68ba      	ldr	r2, [r7, #8]
 800479a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3714      	adds	r7, #20
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	40010000 	.word	0x40010000
 80047c0:	40000400 	.word	0x40000400
 80047c4:	40000800 	.word	0x40000800
 80047c8:	40000c00 	.word	0x40000c00
 80047cc:	40010400 	.word	0x40010400
 80047d0:	40014000 	.word	0x40014000
 80047d4:	40001800 	.word	0x40001800

080047d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <__errno>:
 8004800:	4b01      	ldr	r3, [pc, #4]	; (8004808 <__errno+0x8>)
 8004802:	6818      	ldr	r0, [r3, #0]
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	20000010 	.word	0x20000010

0800480c <__libc_init_array>:
 800480c:	b570      	push	{r4, r5, r6, lr}
 800480e:	4d0d      	ldr	r5, [pc, #52]	; (8004844 <__libc_init_array+0x38>)
 8004810:	4c0d      	ldr	r4, [pc, #52]	; (8004848 <__libc_init_array+0x3c>)
 8004812:	1b64      	subs	r4, r4, r5
 8004814:	10a4      	asrs	r4, r4, #2
 8004816:	2600      	movs	r6, #0
 8004818:	42a6      	cmp	r6, r4
 800481a:	d109      	bne.n	8004830 <__libc_init_array+0x24>
 800481c:	4d0b      	ldr	r5, [pc, #44]	; (800484c <__libc_init_array+0x40>)
 800481e:	4c0c      	ldr	r4, [pc, #48]	; (8004850 <__libc_init_array+0x44>)
 8004820:	f000 fc9c 	bl	800515c <_init>
 8004824:	1b64      	subs	r4, r4, r5
 8004826:	10a4      	asrs	r4, r4, #2
 8004828:	2600      	movs	r6, #0
 800482a:	42a6      	cmp	r6, r4
 800482c:	d105      	bne.n	800483a <__libc_init_array+0x2e>
 800482e:	bd70      	pop	{r4, r5, r6, pc}
 8004830:	f855 3b04 	ldr.w	r3, [r5], #4
 8004834:	4798      	blx	r3
 8004836:	3601      	adds	r6, #1
 8004838:	e7ee      	b.n	8004818 <__libc_init_array+0xc>
 800483a:	f855 3b04 	ldr.w	r3, [r5], #4
 800483e:	4798      	blx	r3
 8004840:	3601      	adds	r6, #1
 8004842:	e7f2      	b.n	800482a <__libc_init_array+0x1e>
 8004844:	0800520c 	.word	0x0800520c
 8004848:	0800520c 	.word	0x0800520c
 800484c:	0800520c 	.word	0x0800520c
 8004850:	08005210 	.word	0x08005210

08004854 <memset>:
 8004854:	4402      	add	r2, r0
 8004856:	4603      	mov	r3, r0
 8004858:	4293      	cmp	r3, r2
 800485a:	d100      	bne.n	800485e <memset+0xa>
 800485c:	4770      	bx	lr
 800485e:	f803 1b01 	strb.w	r1, [r3], #1
 8004862:	e7f9      	b.n	8004858 <memset+0x4>

08004864 <siprintf>:
 8004864:	b40e      	push	{r1, r2, r3}
 8004866:	b500      	push	{lr}
 8004868:	b09c      	sub	sp, #112	; 0x70
 800486a:	ab1d      	add	r3, sp, #116	; 0x74
 800486c:	9002      	str	r0, [sp, #8]
 800486e:	9006      	str	r0, [sp, #24]
 8004870:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004874:	4809      	ldr	r0, [pc, #36]	; (800489c <siprintf+0x38>)
 8004876:	9107      	str	r1, [sp, #28]
 8004878:	9104      	str	r1, [sp, #16]
 800487a:	4909      	ldr	r1, [pc, #36]	; (80048a0 <siprintf+0x3c>)
 800487c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004880:	9105      	str	r1, [sp, #20]
 8004882:	6800      	ldr	r0, [r0, #0]
 8004884:	9301      	str	r3, [sp, #4]
 8004886:	a902      	add	r1, sp, #8
 8004888:	f000 f876 	bl	8004978 <_svfiprintf_r>
 800488c:	9b02      	ldr	r3, [sp, #8]
 800488e:	2200      	movs	r2, #0
 8004890:	701a      	strb	r2, [r3, #0]
 8004892:	b01c      	add	sp, #112	; 0x70
 8004894:	f85d eb04 	ldr.w	lr, [sp], #4
 8004898:	b003      	add	sp, #12
 800489a:	4770      	bx	lr
 800489c:	20000010 	.word	0x20000010
 80048a0:	ffff0208 	.word	0xffff0208

080048a4 <strcat>:
 80048a4:	b510      	push	{r4, lr}
 80048a6:	4602      	mov	r2, r0
 80048a8:	7814      	ldrb	r4, [r2, #0]
 80048aa:	4613      	mov	r3, r2
 80048ac:	3201      	adds	r2, #1
 80048ae:	2c00      	cmp	r4, #0
 80048b0:	d1fa      	bne.n	80048a8 <strcat+0x4>
 80048b2:	3b01      	subs	r3, #1
 80048b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048b8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048bc:	2a00      	cmp	r2, #0
 80048be:	d1f9      	bne.n	80048b4 <strcat+0x10>
 80048c0:	bd10      	pop	{r4, pc}

080048c2 <__ssputs_r>:
 80048c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048c6:	688e      	ldr	r6, [r1, #8]
 80048c8:	429e      	cmp	r6, r3
 80048ca:	4682      	mov	sl, r0
 80048cc:	460c      	mov	r4, r1
 80048ce:	4690      	mov	r8, r2
 80048d0:	461f      	mov	r7, r3
 80048d2:	d838      	bhi.n	8004946 <__ssputs_r+0x84>
 80048d4:	898a      	ldrh	r2, [r1, #12]
 80048d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80048da:	d032      	beq.n	8004942 <__ssputs_r+0x80>
 80048dc:	6825      	ldr	r5, [r4, #0]
 80048de:	6909      	ldr	r1, [r1, #16]
 80048e0:	eba5 0901 	sub.w	r9, r5, r1
 80048e4:	6965      	ldr	r5, [r4, #20]
 80048e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80048ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80048ee:	3301      	adds	r3, #1
 80048f0:	444b      	add	r3, r9
 80048f2:	106d      	asrs	r5, r5, #1
 80048f4:	429d      	cmp	r5, r3
 80048f6:	bf38      	it	cc
 80048f8:	461d      	movcc	r5, r3
 80048fa:	0553      	lsls	r3, r2, #21
 80048fc:	d531      	bpl.n	8004962 <__ssputs_r+0xa0>
 80048fe:	4629      	mov	r1, r5
 8004900:	f000 fb62 	bl	8004fc8 <_malloc_r>
 8004904:	4606      	mov	r6, r0
 8004906:	b950      	cbnz	r0, 800491e <__ssputs_r+0x5c>
 8004908:	230c      	movs	r3, #12
 800490a:	f8ca 3000 	str.w	r3, [sl]
 800490e:	89a3      	ldrh	r3, [r4, #12]
 8004910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004914:	81a3      	strh	r3, [r4, #12]
 8004916:	f04f 30ff 	mov.w	r0, #4294967295
 800491a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800491e:	6921      	ldr	r1, [r4, #16]
 8004920:	464a      	mov	r2, r9
 8004922:	f000 fabd 	bl	8004ea0 <memcpy>
 8004926:	89a3      	ldrh	r3, [r4, #12]
 8004928:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800492c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004930:	81a3      	strh	r3, [r4, #12]
 8004932:	6126      	str	r6, [r4, #16]
 8004934:	6165      	str	r5, [r4, #20]
 8004936:	444e      	add	r6, r9
 8004938:	eba5 0509 	sub.w	r5, r5, r9
 800493c:	6026      	str	r6, [r4, #0]
 800493e:	60a5      	str	r5, [r4, #8]
 8004940:	463e      	mov	r6, r7
 8004942:	42be      	cmp	r6, r7
 8004944:	d900      	bls.n	8004948 <__ssputs_r+0x86>
 8004946:	463e      	mov	r6, r7
 8004948:	6820      	ldr	r0, [r4, #0]
 800494a:	4632      	mov	r2, r6
 800494c:	4641      	mov	r1, r8
 800494e:	f000 fab5 	bl	8004ebc <memmove>
 8004952:	68a3      	ldr	r3, [r4, #8]
 8004954:	1b9b      	subs	r3, r3, r6
 8004956:	60a3      	str	r3, [r4, #8]
 8004958:	6823      	ldr	r3, [r4, #0]
 800495a:	4433      	add	r3, r6
 800495c:	6023      	str	r3, [r4, #0]
 800495e:	2000      	movs	r0, #0
 8004960:	e7db      	b.n	800491a <__ssputs_r+0x58>
 8004962:	462a      	mov	r2, r5
 8004964:	f000 fba4 	bl	80050b0 <_realloc_r>
 8004968:	4606      	mov	r6, r0
 800496a:	2800      	cmp	r0, #0
 800496c:	d1e1      	bne.n	8004932 <__ssputs_r+0x70>
 800496e:	6921      	ldr	r1, [r4, #16]
 8004970:	4650      	mov	r0, sl
 8004972:	f000 fabd 	bl	8004ef0 <_free_r>
 8004976:	e7c7      	b.n	8004908 <__ssputs_r+0x46>

08004978 <_svfiprintf_r>:
 8004978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800497c:	4698      	mov	r8, r3
 800497e:	898b      	ldrh	r3, [r1, #12]
 8004980:	061b      	lsls	r3, r3, #24
 8004982:	b09d      	sub	sp, #116	; 0x74
 8004984:	4607      	mov	r7, r0
 8004986:	460d      	mov	r5, r1
 8004988:	4614      	mov	r4, r2
 800498a:	d50e      	bpl.n	80049aa <_svfiprintf_r+0x32>
 800498c:	690b      	ldr	r3, [r1, #16]
 800498e:	b963      	cbnz	r3, 80049aa <_svfiprintf_r+0x32>
 8004990:	2140      	movs	r1, #64	; 0x40
 8004992:	f000 fb19 	bl	8004fc8 <_malloc_r>
 8004996:	6028      	str	r0, [r5, #0]
 8004998:	6128      	str	r0, [r5, #16]
 800499a:	b920      	cbnz	r0, 80049a6 <_svfiprintf_r+0x2e>
 800499c:	230c      	movs	r3, #12
 800499e:	603b      	str	r3, [r7, #0]
 80049a0:	f04f 30ff 	mov.w	r0, #4294967295
 80049a4:	e0d1      	b.n	8004b4a <_svfiprintf_r+0x1d2>
 80049a6:	2340      	movs	r3, #64	; 0x40
 80049a8:	616b      	str	r3, [r5, #20]
 80049aa:	2300      	movs	r3, #0
 80049ac:	9309      	str	r3, [sp, #36]	; 0x24
 80049ae:	2320      	movs	r3, #32
 80049b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80049b8:	2330      	movs	r3, #48	; 0x30
 80049ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004b64 <_svfiprintf_r+0x1ec>
 80049be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049c2:	f04f 0901 	mov.w	r9, #1
 80049c6:	4623      	mov	r3, r4
 80049c8:	469a      	mov	sl, r3
 80049ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049ce:	b10a      	cbz	r2, 80049d4 <_svfiprintf_r+0x5c>
 80049d0:	2a25      	cmp	r2, #37	; 0x25
 80049d2:	d1f9      	bne.n	80049c8 <_svfiprintf_r+0x50>
 80049d4:	ebba 0b04 	subs.w	fp, sl, r4
 80049d8:	d00b      	beq.n	80049f2 <_svfiprintf_r+0x7a>
 80049da:	465b      	mov	r3, fp
 80049dc:	4622      	mov	r2, r4
 80049de:	4629      	mov	r1, r5
 80049e0:	4638      	mov	r0, r7
 80049e2:	f7ff ff6e 	bl	80048c2 <__ssputs_r>
 80049e6:	3001      	adds	r0, #1
 80049e8:	f000 80aa 	beq.w	8004b40 <_svfiprintf_r+0x1c8>
 80049ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049ee:	445a      	add	r2, fp
 80049f0:	9209      	str	r2, [sp, #36]	; 0x24
 80049f2:	f89a 3000 	ldrb.w	r3, [sl]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f000 80a2 	beq.w	8004b40 <_svfiprintf_r+0x1c8>
 80049fc:	2300      	movs	r3, #0
 80049fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004a02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a06:	f10a 0a01 	add.w	sl, sl, #1
 8004a0a:	9304      	str	r3, [sp, #16]
 8004a0c:	9307      	str	r3, [sp, #28]
 8004a0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a12:	931a      	str	r3, [sp, #104]	; 0x68
 8004a14:	4654      	mov	r4, sl
 8004a16:	2205      	movs	r2, #5
 8004a18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a1c:	4851      	ldr	r0, [pc, #324]	; (8004b64 <_svfiprintf_r+0x1ec>)
 8004a1e:	f7fb fbdf 	bl	80001e0 <memchr>
 8004a22:	9a04      	ldr	r2, [sp, #16]
 8004a24:	b9d8      	cbnz	r0, 8004a5e <_svfiprintf_r+0xe6>
 8004a26:	06d0      	lsls	r0, r2, #27
 8004a28:	bf44      	itt	mi
 8004a2a:	2320      	movmi	r3, #32
 8004a2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a30:	0711      	lsls	r1, r2, #28
 8004a32:	bf44      	itt	mi
 8004a34:	232b      	movmi	r3, #43	; 0x2b
 8004a36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a3a:	f89a 3000 	ldrb.w	r3, [sl]
 8004a3e:	2b2a      	cmp	r3, #42	; 0x2a
 8004a40:	d015      	beq.n	8004a6e <_svfiprintf_r+0xf6>
 8004a42:	9a07      	ldr	r2, [sp, #28]
 8004a44:	4654      	mov	r4, sl
 8004a46:	2000      	movs	r0, #0
 8004a48:	f04f 0c0a 	mov.w	ip, #10
 8004a4c:	4621      	mov	r1, r4
 8004a4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a52:	3b30      	subs	r3, #48	; 0x30
 8004a54:	2b09      	cmp	r3, #9
 8004a56:	d94e      	bls.n	8004af6 <_svfiprintf_r+0x17e>
 8004a58:	b1b0      	cbz	r0, 8004a88 <_svfiprintf_r+0x110>
 8004a5a:	9207      	str	r2, [sp, #28]
 8004a5c:	e014      	b.n	8004a88 <_svfiprintf_r+0x110>
 8004a5e:	eba0 0308 	sub.w	r3, r0, r8
 8004a62:	fa09 f303 	lsl.w	r3, r9, r3
 8004a66:	4313      	orrs	r3, r2
 8004a68:	9304      	str	r3, [sp, #16]
 8004a6a:	46a2      	mov	sl, r4
 8004a6c:	e7d2      	b.n	8004a14 <_svfiprintf_r+0x9c>
 8004a6e:	9b03      	ldr	r3, [sp, #12]
 8004a70:	1d19      	adds	r1, r3, #4
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	9103      	str	r1, [sp, #12]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	bfbb      	ittet	lt
 8004a7a:	425b      	neglt	r3, r3
 8004a7c:	f042 0202 	orrlt.w	r2, r2, #2
 8004a80:	9307      	strge	r3, [sp, #28]
 8004a82:	9307      	strlt	r3, [sp, #28]
 8004a84:	bfb8      	it	lt
 8004a86:	9204      	strlt	r2, [sp, #16]
 8004a88:	7823      	ldrb	r3, [r4, #0]
 8004a8a:	2b2e      	cmp	r3, #46	; 0x2e
 8004a8c:	d10c      	bne.n	8004aa8 <_svfiprintf_r+0x130>
 8004a8e:	7863      	ldrb	r3, [r4, #1]
 8004a90:	2b2a      	cmp	r3, #42	; 0x2a
 8004a92:	d135      	bne.n	8004b00 <_svfiprintf_r+0x188>
 8004a94:	9b03      	ldr	r3, [sp, #12]
 8004a96:	1d1a      	adds	r2, r3, #4
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	9203      	str	r2, [sp, #12]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	bfb8      	it	lt
 8004aa0:	f04f 33ff 	movlt.w	r3, #4294967295
 8004aa4:	3402      	adds	r4, #2
 8004aa6:	9305      	str	r3, [sp, #20]
 8004aa8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004b74 <_svfiprintf_r+0x1fc>
 8004aac:	7821      	ldrb	r1, [r4, #0]
 8004aae:	2203      	movs	r2, #3
 8004ab0:	4650      	mov	r0, sl
 8004ab2:	f7fb fb95 	bl	80001e0 <memchr>
 8004ab6:	b140      	cbz	r0, 8004aca <_svfiprintf_r+0x152>
 8004ab8:	2340      	movs	r3, #64	; 0x40
 8004aba:	eba0 000a 	sub.w	r0, r0, sl
 8004abe:	fa03 f000 	lsl.w	r0, r3, r0
 8004ac2:	9b04      	ldr	r3, [sp, #16]
 8004ac4:	4303      	orrs	r3, r0
 8004ac6:	3401      	adds	r4, #1
 8004ac8:	9304      	str	r3, [sp, #16]
 8004aca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ace:	4826      	ldr	r0, [pc, #152]	; (8004b68 <_svfiprintf_r+0x1f0>)
 8004ad0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ad4:	2206      	movs	r2, #6
 8004ad6:	f7fb fb83 	bl	80001e0 <memchr>
 8004ada:	2800      	cmp	r0, #0
 8004adc:	d038      	beq.n	8004b50 <_svfiprintf_r+0x1d8>
 8004ade:	4b23      	ldr	r3, [pc, #140]	; (8004b6c <_svfiprintf_r+0x1f4>)
 8004ae0:	bb1b      	cbnz	r3, 8004b2a <_svfiprintf_r+0x1b2>
 8004ae2:	9b03      	ldr	r3, [sp, #12]
 8004ae4:	3307      	adds	r3, #7
 8004ae6:	f023 0307 	bic.w	r3, r3, #7
 8004aea:	3308      	adds	r3, #8
 8004aec:	9303      	str	r3, [sp, #12]
 8004aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004af0:	4433      	add	r3, r6
 8004af2:	9309      	str	r3, [sp, #36]	; 0x24
 8004af4:	e767      	b.n	80049c6 <_svfiprintf_r+0x4e>
 8004af6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004afa:	460c      	mov	r4, r1
 8004afc:	2001      	movs	r0, #1
 8004afe:	e7a5      	b.n	8004a4c <_svfiprintf_r+0xd4>
 8004b00:	2300      	movs	r3, #0
 8004b02:	3401      	adds	r4, #1
 8004b04:	9305      	str	r3, [sp, #20]
 8004b06:	4619      	mov	r1, r3
 8004b08:	f04f 0c0a 	mov.w	ip, #10
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b12:	3a30      	subs	r2, #48	; 0x30
 8004b14:	2a09      	cmp	r2, #9
 8004b16:	d903      	bls.n	8004b20 <_svfiprintf_r+0x1a8>
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d0c5      	beq.n	8004aa8 <_svfiprintf_r+0x130>
 8004b1c:	9105      	str	r1, [sp, #20]
 8004b1e:	e7c3      	b.n	8004aa8 <_svfiprintf_r+0x130>
 8004b20:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b24:	4604      	mov	r4, r0
 8004b26:	2301      	movs	r3, #1
 8004b28:	e7f0      	b.n	8004b0c <_svfiprintf_r+0x194>
 8004b2a:	ab03      	add	r3, sp, #12
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	462a      	mov	r2, r5
 8004b30:	4b0f      	ldr	r3, [pc, #60]	; (8004b70 <_svfiprintf_r+0x1f8>)
 8004b32:	a904      	add	r1, sp, #16
 8004b34:	4638      	mov	r0, r7
 8004b36:	f3af 8000 	nop.w
 8004b3a:	1c42      	adds	r2, r0, #1
 8004b3c:	4606      	mov	r6, r0
 8004b3e:	d1d6      	bne.n	8004aee <_svfiprintf_r+0x176>
 8004b40:	89ab      	ldrh	r3, [r5, #12]
 8004b42:	065b      	lsls	r3, r3, #25
 8004b44:	f53f af2c 	bmi.w	80049a0 <_svfiprintf_r+0x28>
 8004b48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b4a:	b01d      	add	sp, #116	; 0x74
 8004b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b50:	ab03      	add	r3, sp, #12
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	462a      	mov	r2, r5
 8004b56:	4b06      	ldr	r3, [pc, #24]	; (8004b70 <_svfiprintf_r+0x1f8>)
 8004b58:	a904      	add	r1, sp, #16
 8004b5a:	4638      	mov	r0, r7
 8004b5c:	f000 f87a 	bl	8004c54 <_printf_i>
 8004b60:	e7eb      	b.n	8004b3a <_svfiprintf_r+0x1c2>
 8004b62:	bf00      	nop
 8004b64:	080051d0 	.word	0x080051d0
 8004b68:	080051da 	.word	0x080051da
 8004b6c:	00000000 	.word	0x00000000
 8004b70:	080048c3 	.word	0x080048c3
 8004b74:	080051d6 	.word	0x080051d6

08004b78 <_printf_common>:
 8004b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b7c:	4616      	mov	r6, r2
 8004b7e:	4699      	mov	r9, r3
 8004b80:	688a      	ldr	r2, [r1, #8]
 8004b82:	690b      	ldr	r3, [r1, #16]
 8004b84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	bfb8      	it	lt
 8004b8c:	4613      	movlt	r3, r2
 8004b8e:	6033      	str	r3, [r6, #0]
 8004b90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b94:	4607      	mov	r7, r0
 8004b96:	460c      	mov	r4, r1
 8004b98:	b10a      	cbz	r2, 8004b9e <_printf_common+0x26>
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	6033      	str	r3, [r6, #0]
 8004b9e:	6823      	ldr	r3, [r4, #0]
 8004ba0:	0699      	lsls	r1, r3, #26
 8004ba2:	bf42      	ittt	mi
 8004ba4:	6833      	ldrmi	r3, [r6, #0]
 8004ba6:	3302      	addmi	r3, #2
 8004ba8:	6033      	strmi	r3, [r6, #0]
 8004baa:	6825      	ldr	r5, [r4, #0]
 8004bac:	f015 0506 	ands.w	r5, r5, #6
 8004bb0:	d106      	bne.n	8004bc0 <_printf_common+0x48>
 8004bb2:	f104 0a19 	add.w	sl, r4, #25
 8004bb6:	68e3      	ldr	r3, [r4, #12]
 8004bb8:	6832      	ldr	r2, [r6, #0]
 8004bba:	1a9b      	subs	r3, r3, r2
 8004bbc:	42ab      	cmp	r3, r5
 8004bbe:	dc26      	bgt.n	8004c0e <_printf_common+0x96>
 8004bc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004bc4:	1e13      	subs	r3, r2, #0
 8004bc6:	6822      	ldr	r2, [r4, #0]
 8004bc8:	bf18      	it	ne
 8004bca:	2301      	movne	r3, #1
 8004bcc:	0692      	lsls	r2, r2, #26
 8004bce:	d42b      	bmi.n	8004c28 <_printf_common+0xb0>
 8004bd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bd4:	4649      	mov	r1, r9
 8004bd6:	4638      	mov	r0, r7
 8004bd8:	47c0      	blx	r8
 8004bda:	3001      	adds	r0, #1
 8004bdc:	d01e      	beq.n	8004c1c <_printf_common+0xa4>
 8004bde:	6823      	ldr	r3, [r4, #0]
 8004be0:	68e5      	ldr	r5, [r4, #12]
 8004be2:	6832      	ldr	r2, [r6, #0]
 8004be4:	f003 0306 	and.w	r3, r3, #6
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	bf08      	it	eq
 8004bec:	1aad      	subeq	r5, r5, r2
 8004bee:	68a3      	ldr	r3, [r4, #8]
 8004bf0:	6922      	ldr	r2, [r4, #16]
 8004bf2:	bf0c      	ite	eq
 8004bf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bf8:	2500      	movne	r5, #0
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	bfc4      	itt	gt
 8004bfe:	1a9b      	subgt	r3, r3, r2
 8004c00:	18ed      	addgt	r5, r5, r3
 8004c02:	2600      	movs	r6, #0
 8004c04:	341a      	adds	r4, #26
 8004c06:	42b5      	cmp	r5, r6
 8004c08:	d11a      	bne.n	8004c40 <_printf_common+0xc8>
 8004c0a:	2000      	movs	r0, #0
 8004c0c:	e008      	b.n	8004c20 <_printf_common+0xa8>
 8004c0e:	2301      	movs	r3, #1
 8004c10:	4652      	mov	r2, sl
 8004c12:	4649      	mov	r1, r9
 8004c14:	4638      	mov	r0, r7
 8004c16:	47c0      	blx	r8
 8004c18:	3001      	adds	r0, #1
 8004c1a:	d103      	bne.n	8004c24 <_printf_common+0xac>
 8004c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c24:	3501      	adds	r5, #1
 8004c26:	e7c6      	b.n	8004bb6 <_printf_common+0x3e>
 8004c28:	18e1      	adds	r1, r4, r3
 8004c2a:	1c5a      	adds	r2, r3, #1
 8004c2c:	2030      	movs	r0, #48	; 0x30
 8004c2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c32:	4422      	add	r2, r4
 8004c34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c3c:	3302      	adds	r3, #2
 8004c3e:	e7c7      	b.n	8004bd0 <_printf_common+0x58>
 8004c40:	2301      	movs	r3, #1
 8004c42:	4622      	mov	r2, r4
 8004c44:	4649      	mov	r1, r9
 8004c46:	4638      	mov	r0, r7
 8004c48:	47c0      	blx	r8
 8004c4a:	3001      	adds	r0, #1
 8004c4c:	d0e6      	beq.n	8004c1c <_printf_common+0xa4>
 8004c4e:	3601      	adds	r6, #1
 8004c50:	e7d9      	b.n	8004c06 <_printf_common+0x8e>
	...

08004c54 <_printf_i>:
 8004c54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c58:	7e0f      	ldrb	r7, [r1, #24]
 8004c5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c5c:	2f78      	cmp	r7, #120	; 0x78
 8004c5e:	4691      	mov	r9, r2
 8004c60:	4680      	mov	r8, r0
 8004c62:	460c      	mov	r4, r1
 8004c64:	469a      	mov	sl, r3
 8004c66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c6a:	d807      	bhi.n	8004c7c <_printf_i+0x28>
 8004c6c:	2f62      	cmp	r7, #98	; 0x62
 8004c6e:	d80a      	bhi.n	8004c86 <_printf_i+0x32>
 8004c70:	2f00      	cmp	r7, #0
 8004c72:	f000 80d8 	beq.w	8004e26 <_printf_i+0x1d2>
 8004c76:	2f58      	cmp	r7, #88	; 0x58
 8004c78:	f000 80a3 	beq.w	8004dc2 <_printf_i+0x16e>
 8004c7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c84:	e03a      	b.n	8004cfc <_printf_i+0xa8>
 8004c86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c8a:	2b15      	cmp	r3, #21
 8004c8c:	d8f6      	bhi.n	8004c7c <_printf_i+0x28>
 8004c8e:	a101      	add	r1, pc, #4	; (adr r1, 8004c94 <_printf_i+0x40>)
 8004c90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c94:	08004ced 	.word	0x08004ced
 8004c98:	08004d01 	.word	0x08004d01
 8004c9c:	08004c7d 	.word	0x08004c7d
 8004ca0:	08004c7d 	.word	0x08004c7d
 8004ca4:	08004c7d 	.word	0x08004c7d
 8004ca8:	08004c7d 	.word	0x08004c7d
 8004cac:	08004d01 	.word	0x08004d01
 8004cb0:	08004c7d 	.word	0x08004c7d
 8004cb4:	08004c7d 	.word	0x08004c7d
 8004cb8:	08004c7d 	.word	0x08004c7d
 8004cbc:	08004c7d 	.word	0x08004c7d
 8004cc0:	08004e0d 	.word	0x08004e0d
 8004cc4:	08004d31 	.word	0x08004d31
 8004cc8:	08004def 	.word	0x08004def
 8004ccc:	08004c7d 	.word	0x08004c7d
 8004cd0:	08004c7d 	.word	0x08004c7d
 8004cd4:	08004e2f 	.word	0x08004e2f
 8004cd8:	08004c7d 	.word	0x08004c7d
 8004cdc:	08004d31 	.word	0x08004d31
 8004ce0:	08004c7d 	.word	0x08004c7d
 8004ce4:	08004c7d 	.word	0x08004c7d
 8004ce8:	08004df7 	.word	0x08004df7
 8004cec:	682b      	ldr	r3, [r5, #0]
 8004cee:	1d1a      	adds	r2, r3, #4
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	602a      	str	r2, [r5, #0]
 8004cf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e0a3      	b.n	8004e48 <_printf_i+0x1f4>
 8004d00:	6820      	ldr	r0, [r4, #0]
 8004d02:	6829      	ldr	r1, [r5, #0]
 8004d04:	0606      	lsls	r6, r0, #24
 8004d06:	f101 0304 	add.w	r3, r1, #4
 8004d0a:	d50a      	bpl.n	8004d22 <_printf_i+0xce>
 8004d0c:	680e      	ldr	r6, [r1, #0]
 8004d0e:	602b      	str	r3, [r5, #0]
 8004d10:	2e00      	cmp	r6, #0
 8004d12:	da03      	bge.n	8004d1c <_printf_i+0xc8>
 8004d14:	232d      	movs	r3, #45	; 0x2d
 8004d16:	4276      	negs	r6, r6
 8004d18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d1c:	485e      	ldr	r0, [pc, #376]	; (8004e98 <_printf_i+0x244>)
 8004d1e:	230a      	movs	r3, #10
 8004d20:	e019      	b.n	8004d56 <_printf_i+0x102>
 8004d22:	680e      	ldr	r6, [r1, #0]
 8004d24:	602b      	str	r3, [r5, #0]
 8004d26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d2a:	bf18      	it	ne
 8004d2c:	b236      	sxthne	r6, r6
 8004d2e:	e7ef      	b.n	8004d10 <_printf_i+0xbc>
 8004d30:	682b      	ldr	r3, [r5, #0]
 8004d32:	6820      	ldr	r0, [r4, #0]
 8004d34:	1d19      	adds	r1, r3, #4
 8004d36:	6029      	str	r1, [r5, #0]
 8004d38:	0601      	lsls	r1, r0, #24
 8004d3a:	d501      	bpl.n	8004d40 <_printf_i+0xec>
 8004d3c:	681e      	ldr	r6, [r3, #0]
 8004d3e:	e002      	b.n	8004d46 <_printf_i+0xf2>
 8004d40:	0646      	lsls	r6, r0, #25
 8004d42:	d5fb      	bpl.n	8004d3c <_printf_i+0xe8>
 8004d44:	881e      	ldrh	r6, [r3, #0]
 8004d46:	4854      	ldr	r0, [pc, #336]	; (8004e98 <_printf_i+0x244>)
 8004d48:	2f6f      	cmp	r7, #111	; 0x6f
 8004d4a:	bf0c      	ite	eq
 8004d4c:	2308      	moveq	r3, #8
 8004d4e:	230a      	movne	r3, #10
 8004d50:	2100      	movs	r1, #0
 8004d52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d56:	6865      	ldr	r5, [r4, #4]
 8004d58:	60a5      	str	r5, [r4, #8]
 8004d5a:	2d00      	cmp	r5, #0
 8004d5c:	bfa2      	ittt	ge
 8004d5e:	6821      	ldrge	r1, [r4, #0]
 8004d60:	f021 0104 	bicge.w	r1, r1, #4
 8004d64:	6021      	strge	r1, [r4, #0]
 8004d66:	b90e      	cbnz	r6, 8004d6c <_printf_i+0x118>
 8004d68:	2d00      	cmp	r5, #0
 8004d6a:	d04d      	beq.n	8004e08 <_printf_i+0x1b4>
 8004d6c:	4615      	mov	r5, r2
 8004d6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d72:	fb03 6711 	mls	r7, r3, r1, r6
 8004d76:	5dc7      	ldrb	r7, [r0, r7]
 8004d78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d7c:	4637      	mov	r7, r6
 8004d7e:	42bb      	cmp	r3, r7
 8004d80:	460e      	mov	r6, r1
 8004d82:	d9f4      	bls.n	8004d6e <_printf_i+0x11a>
 8004d84:	2b08      	cmp	r3, #8
 8004d86:	d10b      	bne.n	8004da0 <_printf_i+0x14c>
 8004d88:	6823      	ldr	r3, [r4, #0]
 8004d8a:	07de      	lsls	r6, r3, #31
 8004d8c:	d508      	bpl.n	8004da0 <_printf_i+0x14c>
 8004d8e:	6923      	ldr	r3, [r4, #16]
 8004d90:	6861      	ldr	r1, [r4, #4]
 8004d92:	4299      	cmp	r1, r3
 8004d94:	bfde      	ittt	le
 8004d96:	2330      	movle	r3, #48	; 0x30
 8004d98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004da0:	1b52      	subs	r2, r2, r5
 8004da2:	6122      	str	r2, [r4, #16]
 8004da4:	f8cd a000 	str.w	sl, [sp]
 8004da8:	464b      	mov	r3, r9
 8004daa:	aa03      	add	r2, sp, #12
 8004dac:	4621      	mov	r1, r4
 8004dae:	4640      	mov	r0, r8
 8004db0:	f7ff fee2 	bl	8004b78 <_printf_common>
 8004db4:	3001      	adds	r0, #1
 8004db6:	d14c      	bne.n	8004e52 <_printf_i+0x1fe>
 8004db8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dbc:	b004      	add	sp, #16
 8004dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc2:	4835      	ldr	r0, [pc, #212]	; (8004e98 <_printf_i+0x244>)
 8004dc4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004dc8:	6829      	ldr	r1, [r5, #0]
 8004dca:	6823      	ldr	r3, [r4, #0]
 8004dcc:	f851 6b04 	ldr.w	r6, [r1], #4
 8004dd0:	6029      	str	r1, [r5, #0]
 8004dd2:	061d      	lsls	r5, r3, #24
 8004dd4:	d514      	bpl.n	8004e00 <_printf_i+0x1ac>
 8004dd6:	07df      	lsls	r7, r3, #31
 8004dd8:	bf44      	itt	mi
 8004dda:	f043 0320 	orrmi.w	r3, r3, #32
 8004dde:	6023      	strmi	r3, [r4, #0]
 8004de0:	b91e      	cbnz	r6, 8004dea <_printf_i+0x196>
 8004de2:	6823      	ldr	r3, [r4, #0]
 8004de4:	f023 0320 	bic.w	r3, r3, #32
 8004de8:	6023      	str	r3, [r4, #0]
 8004dea:	2310      	movs	r3, #16
 8004dec:	e7b0      	b.n	8004d50 <_printf_i+0xfc>
 8004dee:	6823      	ldr	r3, [r4, #0]
 8004df0:	f043 0320 	orr.w	r3, r3, #32
 8004df4:	6023      	str	r3, [r4, #0]
 8004df6:	2378      	movs	r3, #120	; 0x78
 8004df8:	4828      	ldr	r0, [pc, #160]	; (8004e9c <_printf_i+0x248>)
 8004dfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004dfe:	e7e3      	b.n	8004dc8 <_printf_i+0x174>
 8004e00:	0659      	lsls	r1, r3, #25
 8004e02:	bf48      	it	mi
 8004e04:	b2b6      	uxthmi	r6, r6
 8004e06:	e7e6      	b.n	8004dd6 <_printf_i+0x182>
 8004e08:	4615      	mov	r5, r2
 8004e0a:	e7bb      	b.n	8004d84 <_printf_i+0x130>
 8004e0c:	682b      	ldr	r3, [r5, #0]
 8004e0e:	6826      	ldr	r6, [r4, #0]
 8004e10:	6961      	ldr	r1, [r4, #20]
 8004e12:	1d18      	adds	r0, r3, #4
 8004e14:	6028      	str	r0, [r5, #0]
 8004e16:	0635      	lsls	r5, r6, #24
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	d501      	bpl.n	8004e20 <_printf_i+0x1cc>
 8004e1c:	6019      	str	r1, [r3, #0]
 8004e1e:	e002      	b.n	8004e26 <_printf_i+0x1d2>
 8004e20:	0670      	lsls	r0, r6, #25
 8004e22:	d5fb      	bpl.n	8004e1c <_printf_i+0x1c8>
 8004e24:	8019      	strh	r1, [r3, #0]
 8004e26:	2300      	movs	r3, #0
 8004e28:	6123      	str	r3, [r4, #16]
 8004e2a:	4615      	mov	r5, r2
 8004e2c:	e7ba      	b.n	8004da4 <_printf_i+0x150>
 8004e2e:	682b      	ldr	r3, [r5, #0]
 8004e30:	1d1a      	adds	r2, r3, #4
 8004e32:	602a      	str	r2, [r5, #0]
 8004e34:	681d      	ldr	r5, [r3, #0]
 8004e36:	6862      	ldr	r2, [r4, #4]
 8004e38:	2100      	movs	r1, #0
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	f7fb f9d0 	bl	80001e0 <memchr>
 8004e40:	b108      	cbz	r0, 8004e46 <_printf_i+0x1f2>
 8004e42:	1b40      	subs	r0, r0, r5
 8004e44:	6060      	str	r0, [r4, #4]
 8004e46:	6863      	ldr	r3, [r4, #4]
 8004e48:	6123      	str	r3, [r4, #16]
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e50:	e7a8      	b.n	8004da4 <_printf_i+0x150>
 8004e52:	6923      	ldr	r3, [r4, #16]
 8004e54:	462a      	mov	r2, r5
 8004e56:	4649      	mov	r1, r9
 8004e58:	4640      	mov	r0, r8
 8004e5a:	47d0      	blx	sl
 8004e5c:	3001      	adds	r0, #1
 8004e5e:	d0ab      	beq.n	8004db8 <_printf_i+0x164>
 8004e60:	6823      	ldr	r3, [r4, #0]
 8004e62:	079b      	lsls	r3, r3, #30
 8004e64:	d413      	bmi.n	8004e8e <_printf_i+0x23a>
 8004e66:	68e0      	ldr	r0, [r4, #12]
 8004e68:	9b03      	ldr	r3, [sp, #12]
 8004e6a:	4298      	cmp	r0, r3
 8004e6c:	bfb8      	it	lt
 8004e6e:	4618      	movlt	r0, r3
 8004e70:	e7a4      	b.n	8004dbc <_printf_i+0x168>
 8004e72:	2301      	movs	r3, #1
 8004e74:	4632      	mov	r2, r6
 8004e76:	4649      	mov	r1, r9
 8004e78:	4640      	mov	r0, r8
 8004e7a:	47d0      	blx	sl
 8004e7c:	3001      	adds	r0, #1
 8004e7e:	d09b      	beq.n	8004db8 <_printf_i+0x164>
 8004e80:	3501      	adds	r5, #1
 8004e82:	68e3      	ldr	r3, [r4, #12]
 8004e84:	9903      	ldr	r1, [sp, #12]
 8004e86:	1a5b      	subs	r3, r3, r1
 8004e88:	42ab      	cmp	r3, r5
 8004e8a:	dcf2      	bgt.n	8004e72 <_printf_i+0x21e>
 8004e8c:	e7eb      	b.n	8004e66 <_printf_i+0x212>
 8004e8e:	2500      	movs	r5, #0
 8004e90:	f104 0619 	add.w	r6, r4, #25
 8004e94:	e7f5      	b.n	8004e82 <_printf_i+0x22e>
 8004e96:	bf00      	nop
 8004e98:	080051e1 	.word	0x080051e1
 8004e9c:	080051f2 	.word	0x080051f2

08004ea0 <memcpy>:
 8004ea0:	440a      	add	r2, r1
 8004ea2:	4291      	cmp	r1, r2
 8004ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ea8:	d100      	bne.n	8004eac <memcpy+0xc>
 8004eaa:	4770      	bx	lr
 8004eac:	b510      	push	{r4, lr}
 8004eae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004eb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004eb6:	4291      	cmp	r1, r2
 8004eb8:	d1f9      	bne.n	8004eae <memcpy+0xe>
 8004eba:	bd10      	pop	{r4, pc}

08004ebc <memmove>:
 8004ebc:	4288      	cmp	r0, r1
 8004ebe:	b510      	push	{r4, lr}
 8004ec0:	eb01 0402 	add.w	r4, r1, r2
 8004ec4:	d902      	bls.n	8004ecc <memmove+0x10>
 8004ec6:	4284      	cmp	r4, r0
 8004ec8:	4623      	mov	r3, r4
 8004eca:	d807      	bhi.n	8004edc <memmove+0x20>
 8004ecc:	1e43      	subs	r3, r0, #1
 8004ece:	42a1      	cmp	r1, r4
 8004ed0:	d008      	beq.n	8004ee4 <memmove+0x28>
 8004ed2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ed6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004eda:	e7f8      	b.n	8004ece <memmove+0x12>
 8004edc:	4402      	add	r2, r0
 8004ede:	4601      	mov	r1, r0
 8004ee0:	428a      	cmp	r2, r1
 8004ee2:	d100      	bne.n	8004ee6 <memmove+0x2a>
 8004ee4:	bd10      	pop	{r4, pc}
 8004ee6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004eea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004eee:	e7f7      	b.n	8004ee0 <memmove+0x24>

08004ef0 <_free_r>:
 8004ef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ef2:	2900      	cmp	r1, #0
 8004ef4:	d044      	beq.n	8004f80 <_free_r+0x90>
 8004ef6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004efa:	9001      	str	r0, [sp, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f1a1 0404 	sub.w	r4, r1, #4
 8004f02:	bfb8      	it	lt
 8004f04:	18e4      	addlt	r4, r4, r3
 8004f06:	f000 f913 	bl	8005130 <__malloc_lock>
 8004f0a:	4a1e      	ldr	r2, [pc, #120]	; (8004f84 <_free_r+0x94>)
 8004f0c:	9801      	ldr	r0, [sp, #4]
 8004f0e:	6813      	ldr	r3, [r2, #0]
 8004f10:	b933      	cbnz	r3, 8004f20 <_free_r+0x30>
 8004f12:	6063      	str	r3, [r4, #4]
 8004f14:	6014      	str	r4, [r2, #0]
 8004f16:	b003      	add	sp, #12
 8004f18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f1c:	f000 b90e 	b.w	800513c <__malloc_unlock>
 8004f20:	42a3      	cmp	r3, r4
 8004f22:	d908      	bls.n	8004f36 <_free_r+0x46>
 8004f24:	6825      	ldr	r5, [r4, #0]
 8004f26:	1961      	adds	r1, r4, r5
 8004f28:	428b      	cmp	r3, r1
 8004f2a:	bf01      	itttt	eq
 8004f2c:	6819      	ldreq	r1, [r3, #0]
 8004f2e:	685b      	ldreq	r3, [r3, #4]
 8004f30:	1949      	addeq	r1, r1, r5
 8004f32:	6021      	streq	r1, [r4, #0]
 8004f34:	e7ed      	b.n	8004f12 <_free_r+0x22>
 8004f36:	461a      	mov	r2, r3
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	b10b      	cbz	r3, 8004f40 <_free_r+0x50>
 8004f3c:	42a3      	cmp	r3, r4
 8004f3e:	d9fa      	bls.n	8004f36 <_free_r+0x46>
 8004f40:	6811      	ldr	r1, [r2, #0]
 8004f42:	1855      	adds	r5, r2, r1
 8004f44:	42a5      	cmp	r5, r4
 8004f46:	d10b      	bne.n	8004f60 <_free_r+0x70>
 8004f48:	6824      	ldr	r4, [r4, #0]
 8004f4a:	4421      	add	r1, r4
 8004f4c:	1854      	adds	r4, r2, r1
 8004f4e:	42a3      	cmp	r3, r4
 8004f50:	6011      	str	r1, [r2, #0]
 8004f52:	d1e0      	bne.n	8004f16 <_free_r+0x26>
 8004f54:	681c      	ldr	r4, [r3, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	6053      	str	r3, [r2, #4]
 8004f5a:	4421      	add	r1, r4
 8004f5c:	6011      	str	r1, [r2, #0]
 8004f5e:	e7da      	b.n	8004f16 <_free_r+0x26>
 8004f60:	d902      	bls.n	8004f68 <_free_r+0x78>
 8004f62:	230c      	movs	r3, #12
 8004f64:	6003      	str	r3, [r0, #0]
 8004f66:	e7d6      	b.n	8004f16 <_free_r+0x26>
 8004f68:	6825      	ldr	r5, [r4, #0]
 8004f6a:	1961      	adds	r1, r4, r5
 8004f6c:	428b      	cmp	r3, r1
 8004f6e:	bf04      	itt	eq
 8004f70:	6819      	ldreq	r1, [r3, #0]
 8004f72:	685b      	ldreq	r3, [r3, #4]
 8004f74:	6063      	str	r3, [r4, #4]
 8004f76:	bf04      	itt	eq
 8004f78:	1949      	addeq	r1, r1, r5
 8004f7a:	6021      	streq	r1, [r4, #0]
 8004f7c:	6054      	str	r4, [r2, #4]
 8004f7e:	e7ca      	b.n	8004f16 <_free_r+0x26>
 8004f80:	b003      	add	sp, #12
 8004f82:	bd30      	pop	{r4, r5, pc}
 8004f84:	2000028c 	.word	0x2000028c

08004f88 <sbrk_aligned>:
 8004f88:	b570      	push	{r4, r5, r6, lr}
 8004f8a:	4e0e      	ldr	r6, [pc, #56]	; (8004fc4 <sbrk_aligned+0x3c>)
 8004f8c:	460c      	mov	r4, r1
 8004f8e:	6831      	ldr	r1, [r6, #0]
 8004f90:	4605      	mov	r5, r0
 8004f92:	b911      	cbnz	r1, 8004f9a <sbrk_aligned+0x12>
 8004f94:	f000 f8bc 	bl	8005110 <_sbrk_r>
 8004f98:	6030      	str	r0, [r6, #0]
 8004f9a:	4621      	mov	r1, r4
 8004f9c:	4628      	mov	r0, r5
 8004f9e:	f000 f8b7 	bl	8005110 <_sbrk_r>
 8004fa2:	1c43      	adds	r3, r0, #1
 8004fa4:	d00a      	beq.n	8004fbc <sbrk_aligned+0x34>
 8004fa6:	1cc4      	adds	r4, r0, #3
 8004fa8:	f024 0403 	bic.w	r4, r4, #3
 8004fac:	42a0      	cmp	r0, r4
 8004fae:	d007      	beq.n	8004fc0 <sbrk_aligned+0x38>
 8004fb0:	1a21      	subs	r1, r4, r0
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	f000 f8ac 	bl	8005110 <_sbrk_r>
 8004fb8:	3001      	adds	r0, #1
 8004fba:	d101      	bne.n	8004fc0 <sbrk_aligned+0x38>
 8004fbc:	f04f 34ff 	mov.w	r4, #4294967295
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	bd70      	pop	{r4, r5, r6, pc}
 8004fc4:	20000290 	.word	0x20000290

08004fc8 <_malloc_r>:
 8004fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fcc:	1ccd      	adds	r5, r1, #3
 8004fce:	f025 0503 	bic.w	r5, r5, #3
 8004fd2:	3508      	adds	r5, #8
 8004fd4:	2d0c      	cmp	r5, #12
 8004fd6:	bf38      	it	cc
 8004fd8:	250c      	movcc	r5, #12
 8004fda:	2d00      	cmp	r5, #0
 8004fdc:	4607      	mov	r7, r0
 8004fde:	db01      	blt.n	8004fe4 <_malloc_r+0x1c>
 8004fe0:	42a9      	cmp	r1, r5
 8004fe2:	d905      	bls.n	8004ff0 <_malloc_r+0x28>
 8004fe4:	230c      	movs	r3, #12
 8004fe6:	603b      	str	r3, [r7, #0]
 8004fe8:	2600      	movs	r6, #0
 8004fea:	4630      	mov	r0, r6
 8004fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ff0:	4e2e      	ldr	r6, [pc, #184]	; (80050ac <_malloc_r+0xe4>)
 8004ff2:	f000 f89d 	bl	8005130 <__malloc_lock>
 8004ff6:	6833      	ldr	r3, [r6, #0]
 8004ff8:	461c      	mov	r4, r3
 8004ffa:	bb34      	cbnz	r4, 800504a <_malloc_r+0x82>
 8004ffc:	4629      	mov	r1, r5
 8004ffe:	4638      	mov	r0, r7
 8005000:	f7ff ffc2 	bl	8004f88 <sbrk_aligned>
 8005004:	1c43      	adds	r3, r0, #1
 8005006:	4604      	mov	r4, r0
 8005008:	d14d      	bne.n	80050a6 <_malloc_r+0xde>
 800500a:	6834      	ldr	r4, [r6, #0]
 800500c:	4626      	mov	r6, r4
 800500e:	2e00      	cmp	r6, #0
 8005010:	d140      	bne.n	8005094 <_malloc_r+0xcc>
 8005012:	6823      	ldr	r3, [r4, #0]
 8005014:	4631      	mov	r1, r6
 8005016:	4638      	mov	r0, r7
 8005018:	eb04 0803 	add.w	r8, r4, r3
 800501c:	f000 f878 	bl	8005110 <_sbrk_r>
 8005020:	4580      	cmp	r8, r0
 8005022:	d13a      	bne.n	800509a <_malloc_r+0xd2>
 8005024:	6821      	ldr	r1, [r4, #0]
 8005026:	3503      	adds	r5, #3
 8005028:	1a6d      	subs	r5, r5, r1
 800502a:	f025 0503 	bic.w	r5, r5, #3
 800502e:	3508      	adds	r5, #8
 8005030:	2d0c      	cmp	r5, #12
 8005032:	bf38      	it	cc
 8005034:	250c      	movcc	r5, #12
 8005036:	4629      	mov	r1, r5
 8005038:	4638      	mov	r0, r7
 800503a:	f7ff ffa5 	bl	8004f88 <sbrk_aligned>
 800503e:	3001      	adds	r0, #1
 8005040:	d02b      	beq.n	800509a <_malloc_r+0xd2>
 8005042:	6823      	ldr	r3, [r4, #0]
 8005044:	442b      	add	r3, r5
 8005046:	6023      	str	r3, [r4, #0]
 8005048:	e00e      	b.n	8005068 <_malloc_r+0xa0>
 800504a:	6822      	ldr	r2, [r4, #0]
 800504c:	1b52      	subs	r2, r2, r5
 800504e:	d41e      	bmi.n	800508e <_malloc_r+0xc6>
 8005050:	2a0b      	cmp	r2, #11
 8005052:	d916      	bls.n	8005082 <_malloc_r+0xba>
 8005054:	1961      	adds	r1, r4, r5
 8005056:	42a3      	cmp	r3, r4
 8005058:	6025      	str	r5, [r4, #0]
 800505a:	bf18      	it	ne
 800505c:	6059      	strne	r1, [r3, #4]
 800505e:	6863      	ldr	r3, [r4, #4]
 8005060:	bf08      	it	eq
 8005062:	6031      	streq	r1, [r6, #0]
 8005064:	5162      	str	r2, [r4, r5]
 8005066:	604b      	str	r3, [r1, #4]
 8005068:	4638      	mov	r0, r7
 800506a:	f104 060b 	add.w	r6, r4, #11
 800506e:	f000 f865 	bl	800513c <__malloc_unlock>
 8005072:	f026 0607 	bic.w	r6, r6, #7
 8005076:	1d23      	adds	r3, r4, #4
 8005078:	1af2      	subs	r2, r6, r3
 800507a:	d0b6      	beq.n	8004fea <_malloc_r+0x22>
 800507c:	1b9b      	subs	r3, r3, r6
 800507e:	50a3      	str	r3, [r4, r2]
 8005080:	e7b3      	b.n	8004fea <_malloc_r+0x22>
 8005082:	6862      	ldr	r2, [r4, #4]
 8005084:	42a3      	cmp	r3, r4
 8005086:	bf0c      	ite	eq
 8005088:	6032      	streq	r2, [r6, #0]
 800508a:	605a      	strne	r2, [r3, #4]
 800508c:	e7ec      	b.n	8005068 <_malloc_r+0xa0>
 800508e:	4623      	mov	r3, r4
 8005090:	6864      	ldr	r4, [r4, #4]
 8005092:	e7b2      	b.n	8004ffa <_malloc_r+0x32>
 8005094:	4634      	mov	r4, r6
 8005096:	6876      	ldr	r6, [r6, #4]
 8005098:	e7b9      	b.n	800500e <_malloc_r+0x46>
 800509a:	230c      	movs	r3, #12
 800509c:	603b      	str	r3, [r7, #0]
 800509e:	4638      	mov	r0, r7
 80050a0:	f000 f84c 	bl	800513c <__malloc_unlock>
 80050a4:	e7a1      	b.n	8004fea <_malloc_r+0x22>
 80050a6:	6025      	str	r5, [r4, #0]
 80050a8:	e7de      	b.n	8005068 <_malloc_r+0xa0>
 80050aa:	bf00      	nop
 80050ac:	2000028c 	.word	0x2000028c

080050b0 <_realloc_r>:
 80050b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050b4:	4680      	mov	r8, r0
 80050b6:	4614      	mov	r4, r2
 80050b8:	460e      	mov	r6, r1
 80050ba:	b921      	cbnz	r1, 80050c6 <_realloc_r+0x16>
 80050bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050c0:	4611      	mov	r1, r2
 80050c2:	f7ff bf81 	b.w	8004fc8 <_malloc_r>
 80050c6:	b92a      	cbnz	r2, 80050d4 <_realloc_r+0x24>
 80050c8:	f7ff ff12 	bl	8004ef0 <_free_r>
 80050cc:	4625      	mov	r5, r4
 80050ce:	4628      	mov	r0, r5
 80050d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050d4:	f000 f838 	bl	8005148 <_malloc_usable_size_r>
 80050d8:	4284      	cmp	r4, r0
 80050da:	4607      	mov	r7, r0
 80050dc:	d802      	bhi.n	80050e4 <_realloc_r+0x34>
 80050de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80050e2:	d812      	bhi.n	800510a <_realloc_r+0x5a>
 80050e4:	4621      	mov	r1, r4
 80050e6:	4640      	mov	r0, r8
 80050e8:	f7ff ff6e 	bl	8004fc8 <_malloc_r>
 80050ec:	4605      	mov	r5, r0
 80050ee:	2800      	cmp	r0, #0
 80050f0:	d0ed      	beq.n	80050ce <_realloc_r+0x1e>
 80050f2:	42bc      	cmp	r4, r7
 80050f4:	4622      	mov	r2, r4
 80050f6:	4631      	mov	r1, r6
 80050f8:	bf28      	it	cs
 80050fa:	463a      	movcs	r2, r7
 80050fc:	f7ff fed0 	bl	8004ea0 <memcpy>
 8005100:	4631      	mov	r1, r6
 8005102:	4640      	mov	r0, r8
 8005104:	f7ff fef4 	bl	8004ef0 <_free_r>
 8005108:	e7e1      	b.n	80050ce <_realloc_r+0x1e>
 800510a:	4635      	mov	r5, r6
 800510c:	e7df      	b.n	80050ce <_realloc_r+0x1e>
	...

08005110 <_sbrk_r>:
 8005110:	b538      	push	{r3, r4, r5, lr}
 8005112:	4d06      	ldr	r5, [pc, #24]	; (800512c <_sbrk_r+0x1c>)
 8005114:	2300      	movs	r3, #0
 8005116:	4604      	mov	r4, r0
 8005118:	4608      	mov	r0, r1
 800511a:	602b      	str	r3, [r5, #0]
 800511c:	f7fc fb42 	bl	80017a4 <_sbrk>
 8005120:	1c43      	adds	r3, r0, #1
 8005122:	d102      	bne.n	800512a <_sbrk_r+0x1a>
 8005124:	682b      	ldr	r3, [r5, #0]
 8005126:	b103      	cbz	r3, 800512a <_sbrk_r+0x1a>
 8005128:	6023      	str	r3, [r4, #0]
 800512a:	bd38      	pop	{r3, r4, r5, pc}
 800512c:	20000294 	.word	0x20000294

08005130 <__malloc_lock>:
 8005130:	4801      	ldr	r0, [pc, #4]	; (8005138 <__malloc_lock+0x8>)
 8005132:	f000 b811 	b.w	8005158 <__retarget_lock_acquire_recursive>
 8005136:	bf00      	nop
 8005138:	20000298 	.word	0x20000298

0800513c <__malloc_unlock>:
 800513c:	4801      	ldr	r0, [pc, #4]	; (8005144 <__malloc_unlock+0x8>)
 800513e:	f000 b80c 	b.w	800515a <__retarget_lock_release_recursive>
 8005142:	bf00      	nop
 8005144:	20000298 	.word	0x20000298

08005148 <_malloc_usable_size_r>:
 8005148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800514c:	1f18      	subs	r0, r3, #4
 800514e:	2b00      	cmp	r3, #0
 8005150:	bfbc      	itt	lt
 8005152:	580b      	ldrlt	r3, [r1, r0]
 8005154:	18c0      	addlt	r0, r0, r3
 8005156:	4770      	bx	lr

08005158 <__retarget_lock_acquire_recursive>:
 8005158:	4770      	bx	lr

0800515a <__retarget_lock_release_recursive>:
 800515a:	4770      	bx	lr

0800515c <_init>:
 800515c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800515e:	bf00      	nop
 8005160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005162:	bc08      	pop	{r3}
 8005164:	469e      	mov	lr, r3
 8005166:	4770      	bx	lr

08005168 <_fini>:
 8005168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800516a:	bf00      	nop
 800516c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800516e:	bc08      	pop	{r3}
 8005170:	469e      	mov	lr, r3
 8005172:	4770      	bx	lr
