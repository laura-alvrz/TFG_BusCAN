
MANDO_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003470  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080035f8  080035f8  000135f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003608  08003608  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003608  08003608  00013608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003610  08003610  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003610  08003610  00013610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003614  08003614  00013614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003618  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000000ec  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000fc  200000fc  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b505  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018ca  00000000  00000000  0002b545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af0  00000000  00000000  0002ce10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a38  00000000  00000000  0002d900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000200e5  00000000  00000000  0002e338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b0f9  00000000  00000000  0004e41d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c70b8  00000000  00000000  00059516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001205ce  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e00  00000000  00000000  00120620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080035e0 	.word	0x080035e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080035e0 	.word	0x080035e0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <SEND_MESSAGE>:
uint8_t LC = 0; //Launch control

volatile int buttonUP=0;
volatile int buttonDOWN=0;

void SEND_MESSAGE(){ //Mandar una secuencia de datos u otra segun el mapa activo
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
    TxHeader.DLC = 2; //Data length (envio 2 bytes)
 80004d0:	4b35      	ldr	r3, [pc, #212]	; (80005a8 <SEND_MESSAGE+0xdc>)
 80004d2:	2202      	movs	r2, #2
 80004d4:	611a      	str	r2, [r3, #16]
    TxHeader.IDE = CAN_ID_STD;
 80004d6:	4b34      	ldr	r3, [pc, #208]	; (80005a8 <SEND_MESSAGE+0xdc>)
 80004d8:	2200      	movs	r2, #0
 80004da:	609a      	str	r2, [r3, #8]
    TxHeader.RTR = CAN_RTR_DATA;
 80004dc:	4b32      	ldr	r3, [pc, #200]	; (80005a8 <SEND_MESSAGE+0xdc>)
 80004de:	2200      	movs	r2, #0
 80004e0:	60da      	str	r2, [r3, #12]
    TxHeader.StdId = 0x650; //ID (identificador del enviador)
 80004e2:	4b31      	ldr	r3, [pc, #196]	; (80005a8 <SEND_MESSAGE+0xdc>)
 80004e4:	f44f 62ca 	mov.w	r2, #1616	; 0x650
 80004e8:	601a      	str	r2, [r3, #0]

    switch (mapaACT){
 80004ea:	4b30      	ldr	r3, [pc, #192]	; (80005ac <SEND_MESSAGE+0xe0>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	3b01      	subs	r3, #1
 80004f0:	2b04      	cmp	r3, #4
 80004f2:	d821      	bhi.n	8000538 <SEND_MESSAGE+0x6c>
 80004f4:	a201      	add	r2, pc, #4	; (adr r2, 80004fc <SEND_MESSAGE+0x30>)
 80004f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004fa:	bf00      	nop
 80004fc:	08000511 	.word	0x08000511
 8000500:	08000519 	.word	0x08000519
 8000504:	08000521 	.word	0x08000521
 8000508:	08000529 	.word	0x08000529
 800050c:	08000531 	.word	0x08000531
        case 1:
        	TxData[0] = 0x01;
 8000510:	4b27      	ldr	r3, [pc, #156]	; (80005b0 <SEND_MESSAGE+0xe4>)
 8000512:	2201      	movs	r2, #1
 8000514:	701a      	strb	r2, [r3, #0]
        	break;
 8000516:	e00f      	b.n	8000538 <SEND_MESSAGE+0x6c>
        case 2:
        	TxData[0] = 0x02;
 8000518:	4b25      	ldr	r3, [pc, #148]	; (80005b0 <SEND_MESSAGE+0xe4>)
 800051a:	2202      	movs	r2, #2
 800051c:	701a      	strb	r2, [r3, #0]
        	break;
 800051e:	e00b      	b.n	8000538 <SEND_MESSAGE+0x6c>
        case 3:
        	TxData[0] = 0x04;
 8000520:	4b23      	ldr	r3, [pc, #140]	; (80005b0 <SEND_MESSAGE+0xe4>)
 8000522:	2204      	movs	r2, #4
 8000524:	701a      	strb	r2, [r3, #0]
        	break;
 8000526:	e007      	b.n	8000538 <SEND_MESSAGE+0x6c>
        case 4:
        	TxData[0] = 0x08;
 8000528:	4b21      	ldr	r3, [pc, #132]	; (80005b0 <SEND_MESSAGE+0xe4>)
 800052a:	2208      	movs	r2, #8
 800052c:	701a      	strb	r2, [r3, #0]
        	break;
 800052e:	e003      	b.n	8000538 <SEND_MESSAGE+0x6c>
        case 5:
        	TxData[0] = 0x10;
 8000530:	4b1f      	ldr	r3, [pc, #124]	; (80005b0 <SEND_MESSAGE+0xe4>)
 8000532:	2210      	movs	r2, #16
 8000534:	701a      	strb	r2, [r3, #0]
        	break;
 8000536:	bf00      	nop
        }

    if (TC == 0 && LC == 0){
 8000538:	4b1e      	ldr	r3, [pc, #120]	; (80005b4 <SEND_MESSAGE+0xe8>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d107      	bne.n	8000550 <SEND_MESSAGE+0x84>
 8000540:	4b1d      	ldr	r3, [pc, #116]	; (80005b8 <SEND_MESSAGE+0xec>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d103      	bne.n	8000550 <SEND_MESSAGE+0x84>
        	TxData[1] = 0x00;
 8000548:	4b19      	ldr	r3, [pc, #100]	; (80005b0 <SEND_MESSAGE+0xe4>)
 800054a:	2200      	movs	r2, #0
 800054c:	705a      	strb	r2, [r3, #1]
 800054e:	e022      	b.n	8000596 <SEND_MESSAGE+0xca>
        } else if (TC == 1 && LC == 0){
 8000550:	4b18      	ldr	r3, [pc, #96]	; (80005b4 <SEND_MESSAGE+0xe8>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d107      	bne.n	8000568 <SEND_MESSAGE+0x9c>
 8000558:	4b17      	ldr	r3, [pc, #92]	; (80005b8 <SEND_MESSAGE+0xec>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d103      	bne.n	8000568 <SEND_MESSAGE+0x9c>
        	TxData[1] = 0x01;
 8000560:	4b13      	ldr	r3, [pc, #76]	; (80005b0 <SEND_MESSAGE+0xe4>)
 8000562:	2201      	movs	r2, #1
 8000564:	705a      	strb	r2, [r3, #1]
 8000566:	e016      	b.n	8000596 <SEND_MESSAGE+0xca>
        } else if (TC == 0 && LC == 1){
 8000568:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <SEND_MESSAGE+0xe8>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d107      	bne.n	8000580 <SEND_MESSAGE+0xb4>
 8000570:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <SEND_MESSAGE+0xec>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b01      	cmp	r3, #1
 8000576:	d103      	bne.n	8000580 <SEND_MESSAGE+0xb4>
            TxData[1] = 0x02;
 8000578:	4b0d      	ldr	r3, [pc, #52]	; (80005b0 <SEND_MESSAGE+0xe4>)
 800057a:	2202      	movs	r2, #2
 800057c:	705a      	strb	r2, [r3, #1]
 800057e:	e00a      	b.n	8000596 <SEND_MESSAGE+0xca>
        } else if (TC == 1 && LC == 1){
 8000580:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <SEND_MESSAGE+0xe8>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d106      	bne.n	8000596 <SEND_MESSAGE+0xca>
 8000588:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <SEND_MESSAGE+0xec>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b01      	cmp	r3, #1
 800058e:	d102      	bne.n	8000596 <SEND_MESSAGE+0xca>
        	TxData[1] = 0x03;
 8000590:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <SEND_MESSAGE+0xe4>)
 8000592:	2203      	movs	r2, #3
 8000594:	705a      	strb	r2, [r3, #1]
        }

    	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000596:	4b09      	ldr	r3, [pc, #36]	; (80005bc <SEND_MESSAGE+0xf0>)
 8000598:	4a05      	ldr	r2, [pc, #20]	; (80005b0 <SEND_MESSAGE+0xe4>)
 800059a:	4903      	ldr	r1, [pc, #12]	; (80005a8 <SEND_MESSAGE+0xdc>)
 800059c:	4808      	ldr	r0, [pc, #32]	; (80005c0 <SEND_MESSAGE+0xf4>)
 800059e:	f000 ff87 	bl	80014b0 <HAL_CAN_AddTxMessage>
    }
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	2000009c 	.word	0x2000009c
 80005ac:	20000000 	.word	0x20000000
 80005b0:	200000d0 	.word	0x200000d0
 80005b4:	200000e4 	.word	0x200000e4
 80005b8:	200000e5 	.word	0x200000e5
 80005bc:	200000e0 	.word	0x200000e0
 80005c0:	2000002c 	.word	0x2000002c

080005c4 <debouncer>:

int debouncer(volatile int* button_int, GPIO_TypeDef* GPIO_port, uint16_t GPIO_number){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	4613      	mov	r3, r2
 80005d0:	80fb      	strh	r3, [r7, #6]
	static uint8_t button_count=0;
	static int counter=0;

	if (*button_int==1){
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d13b      	bne.n	8000652 <debouncer+0x8e>
		if (button_count==0) {
 80005da:	4b20      	ldr	r3, [pc, #128]	; (800065c <debouncer+0x98>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d10b      	bne.n	80005fa <debouncer+0x36>
			counter=HAL_GetTick();
 80005e2:	f000 fd39 	bl	8001058 <HAL_GetTick>
 80005e6:	4603      	mov	r3, r0
 80005e8:	461a      	mov	r2, r3
 80005ea:	4b1d      	ldr	r3, [pc, #116]	; (8000660 <debouncer+0x9c>)
 80005ec:	601a      	str	r2, [r3, #0]
			button_count++;
 80005ee:	4b1b      	ldr	r3, [pc, #108]	; (800065c <debouncer+0x98>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	3301      	adds	r3, #1
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	4b19      	ldr	r3, [pc, #100]	; (800065c <debouncer+0x98>)
 80005f8:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick()-counter>=20){
 80005fa:	f000 fd2d 	bl	8001058 <HAL_GetTick>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a17      	ldr	r2, [pc, #92]	; (8000660 <debouncer+0x9c>)
 8000602:	6812      	ldr	r2, [r2, #0]
 8000604:	1a9b      	subs	r3, r3, r2
 8000606:	2b13      	cmp	r3, #19
 8000608:	d923      	bls.n	8000652 <debouncer+0x8e>
			counter=HAL_GetTick();
 800060a:	f000 fd25 	bl	8001058 <HAL_GetTick>
 800060e:	4603      	mov	r3, r0
 8000610:	461a      	mov	r2, r3
 8000612:	4b13      	ldr	r3, [pc, #76]	; (8000660 <debouncer+0x9c>)
 8000614:	601a      	str	r2, [r3, #0]
			if (HAL_GPIO_ReadPin(GPIO_port, GPIO_number)!=1){
 8000616:	88fb      	ldrh	r3, [r7, #6]
 8000618:	4619      	mov	r1, r3
 800061a:	68b8      	ldr	r0, [r7, #8]
 800061c:	f001 fe6a 	bl	80022f4 <HAL_GPIO_ReadPin>
 8000620:	4603      	mov	r3, r0
 8000622:	2b01      	cmp	r3, #1
 8000624:	d003      	beq.n	800062e <debouncer+0x6a>
				button_count=1;
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <debouncer+0x98>)
 8000628:	2201      	movs	r2, #1
 800062a:	701a      	strb	r2, [r3, #0]
 800062c:	e005      	b.n	800063a <debouncer+0x76>
			}
			else{
				button_count++;
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <debouncer+0x98>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	3301      	adds	r3, #1
 8000634:	b2da      	uxtb	r2, r3
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <debouncer+0x98>)
 8000638:	701a      	strb	r2, [r3, #0]
			}
			if (button_count==4){ //Periodo antirebotes
 800063a:	4b08      	ldr	r3, [pc, #32]	; (800065c <debouncer+0x98>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	2b04      	cmp	r3, #4
 8000640:	d107      	bne.n	8000652 <debouncer+0x8e>
				button_count=0;
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <debouncer+0x98>)
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]
				*button_int=0;
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
				return 1;
 800064e:	2301      	movs	r3, #1
 8000650:	e000      	b.n	8000654 <debouncer+0x90>
			}
		}
	}
	return 0;
 8000652:	2300      	movs	r3, #0
}
 8000654:	4618      	mov	r0, r3
 8000656:	3710      	adds	r7, #16
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	200000f0 	.word	0x200000f0
 8000660:	200000f4 	.word	0x200000f4

08000664 <MAPChange>:


void MAPChange(){
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	if (debouncer(&buttonUP, GPIOA, GPIO_PIN_1)){
 8000668:	2202      	movs	r2, #2
 800066a:	4918      	ldr	r1, [pc, #96]	; (80006cc <MAPChange+0x68>)
 800066c:	4818      	ldr	r0, [pc, #96]	; (80006d0 <MAPChange+0x6c>)
 800066e:	f7ff ffa9 	bl	80005c4 <debouncer>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d00f      	beq.n	8000698 <MAPChange+0x34>
		if (mapaACT < 5){
 8000678:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <MAPChange+0x70>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b04      	cmp	r3, #4
 800067e:	d806      	bhi.n	800068e <MAPChange+0x2a>
			mapaACT++;
 8000680:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MAPChange+0x70>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	3301      	adds	r3, #1
 8000686:	b2da      	uxtb	r2, r3
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <MAPChange+0x70>)
 800068a:	701a      	strb	r2, [r3, #0]
 800068c:	e002      	b.n	8000694 <MAPChange+0x30>
		} else {
			mapaACT = 1;
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MAPChange+0x70>)
 8000690:	2201      	movs	r2, #1
 8000692:	701a      	strb	r2, [r3, #0]
		}
		SEND_MESSAGE();
 8000694:	f7ff ff1a 	bl	80004cc <SEND_MESSAGE>
	}
	if (debouncer(&buttonDOWN, GPIOA, GPIO_PIN_2)){
 8000698:	2204      	movs	r2, #4
 800069a:	490c      	ldr	r1, [pc, #48]	; (80006cc <MAPChange+0x68>)
 800069c:	480e      	ldr	r0, [pc, #56]	; (80006d8 <MAPChange+0x74>)
 800069e:	f7ff ff91 	bl	80005c4 <debouncer>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d00f      	beq.n	80006c8 <MAPChange+0x64>
		if (mapaACT > 1 ){
 80006a8:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <MAPChange+0x70>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d906      	bls.n	80006be <MAPChange+0x5a>
			mapaACT--;
 80006b0:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <MAPChange+0x70>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	3b01      	subs	r3, #1
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MAPChange+0x70>)
 80006ba:	701a      	strb	r2, [r3, #0]
 80006bc:	e002      	b.n	80006c4 <MAPChange+0x60>
		} else {
			mapaACT = 5;
 80006be:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <MAPChange+0x70>)
 80006c0:	2205      	movs	r2, #5
 80006c2:	701a      	strb	r2, [r3, #0]
		}
		SEND_MESSAGE();
 80006c4:	f7ff ff02 	bl	80004cc <SEND_MESSAGE>
	}
}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40020000 	.word	0x40020000
 80006d0:	200000e8 	.word	0x200000e8
 80006d4:	20000000 	.word	0x20000000
 80006d8:	200000ec 	.word	0x200000ec

080006dc <HAL_GPIO_EXTI_Callback>:
	//SEND_MESSAGE();
}



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){ //Cambio de mapa activo segun el botón que se pulse
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_1){ //Al pulsar el boton amarillo se sube de mapa
 80006e6:	88fb      	ldrh	r3, [r7, #6]
 80006e8:	2b02      	cmp	r3, #2
 80006ea:	d102      	bne.n	80006f2 <HAL_GPIO_EXTI_Callback+0x16>
		buttonUP = 1;
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <HAL_GPIO_EXTI_Callback+0x30>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	601a      	str	r2, [r3, #0]
	}

	if (GPIO_Pin == GPIO_PIN_2){ //Al pulsar el boton rojo se baja de mapa
 80006f2:	88fb      	ldrh	r3, [r7, #6]
 80006f4:	2b04      	cmp	r3, #4
 80006f6:	d102      	bne.n	80006fe <HAL_GPIO_EXTI_Callback+0x22>
		buttonDOWN = 1;
 80006f8:	4b05      	ldr	r3, [pc, #20]	; (8000710 <HAL_GPIO_EXTI_Callback+0x34>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	601a      	str	r2, [r3, #0]
	}
	if (GPIO_Pin == GPIO_PIN_3){ //Al pulsar el boton azul
		//Start timer y activar algo
	}
} //<-- falta traction y launch control
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	200000e8 	.word	0x200000e8
 8000710:	200000ec 	.word	0x200000ec

08000714 <RECEIVE_MESSAGE>:



void RECEIVE_MESSAGE(){
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	switch (RxData[0]){
 8000718:	4b6a      	ldr	r3, [pc, #424]	; (80008c4 <RECEIVE_MESSAGE+0x1b0>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	3b81      	subs	r3, #129	; 0x81
 800071e:	2b0f      	cmp	r3, #15
 8000720:	f200 8089 	bhi.w	8000836 <RECEIVE_MESSAGE+0x122>
 8000724:	a201      	add	r2, pc, #4	; (adr r2, 800072c <RECEIVE_MESSAGE+0x18>)
 8000726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072a:	bf00      	nop
 800072c:	0800076d 	.word	0x0800076d
 8000730:	080007ab 	.word	0x080007ab
 8000734:	08000837 	.word	0x08000837
 8000738:	080007c5 	.word	0x080007c5
 800073c:	08000837 	.word	0x08000837
 8000740:	08000837 	.word	0x08000837
 8000744:	08000837 	.word	0x08000837
 8000748:	080007df 	.word	0x080007df
 800074c:	08000837 	.word	0x08000837
 8000750:	08000837 	.word	0x08000837
 8000754:	08000837 	.word	0x08000837
 8000758:	08000837 	.word	0x08000837
 800075c:	08000837 	.word	0x08000837
 8000760:	08000837 	.word	0x08000837
 8000764:	08000837 	.word	0x08000837
 8000768:	080007f9 	.word	0x080007f9
	    case 0x81:
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 800076c:	2201      	movs	r2, #1
 800076e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000772:	4855      	ldr	r0, [pc, #340]	; (80008c8 <RECEIVE_MESSAGE+0x1b4>)
 8000774:	f001 fdd6 	bl	8002324 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8000778:	2200      	movs	r2, #0
 800077a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800077e:	4852      	ldr	r0, [pc, #328]	; (80008c8 <RECEIVE_MESSAGE+0x1b4>)
 8000780:	f001 fdd0 	bl	8002324 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000784:	2200      	movs	r2, #0
 8000786:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800078a:	484f      	ldr	r0, [pc, #316]	; (80008c8 <RECEIVE_MESSAGE+0x1b4>)
 800078c:	f001 fdca 	bl	8002324 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8000790:	2200      	movs	r2, #0
 8000792:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000796:	484c      	ldr	r0, [pc, #304]	; (80008c8 <RECEIVE_MESSAGE+0x1b4>)
 8000798:	f001 fdc4 	bl	8002324 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, 0);
 800079c:	2200      	movs	r2, #0
 800079e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007a2:	4849      	ldr	r0, [pc, #292]	; (80008c8 <RECEIVE_MESSAGE+0x1b4>)
 80007a4:	f001 fdbe 	bl	8002324 <HAL_GPIO_WritePin>
	    	break;
 80007a8:	e045      	b.n	8000836 <RECEIVE_MESSAGE+0x122>
	    case 0x82:
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 80007aa:	2201      	movs	r2, #1
 80007ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007b0:	4845      	ldr	r0, [pc, #276]	; (80008c8 <RECEIVE_MESSAGE+0x1b4>)
 80007b2:	f001 fdb7 	bl	8002324 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007bc:	4842      	ldr	r0, [pc, #264]	; (80008c8 <RECEIVE_MESSAGE+0x1b4>)
 80007be:	f001 fdb1 	bl	8002324 <HAL_GPIO_WritePin>
	    	break;
 80007c2:	e038      	b.n	8000836 <RECEIVE_MESSAGE+0x122>
	    case 0x84:
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 80007c4:	2201      	movs	r2, #1
 80007c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ca:	483f      	ldr	r0, [pc, #252]	; (80008c8 <RECEIVE_MESSAGE+0x1b4>)
 80007cc:	f001 fdaa 	bl	8002324 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007d6:	483c      	ldr	r0, [pc, #240]	; (80008c8 <RECEIVE_MESSAGE+0x1b4>)
 80007d8:	f001 fda4 	bl	8002324 <HAL_GPIO_WritePin>
	    	break;
 80007dc:	e02b      	b.n	8000836 <RECEIVE_MESSAGE+0x122>
	    case 0x88:
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 80007de:	2201      	movs	r2, #1
 80007e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007e4:	4838      	ldr	r0, [pc, #224]	; (80008c8 <RECEIVE_MESSAGE+0x1b4>)
 80007e6:	f001 fd9d 	bl	8002324 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, 0);
 80007ea:	2200      	movs	r2, #0
 80007ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007f0:	4835      	ldr	r0, [pc, #212]	; (80008c8 <RECEIVE_MESSAGE+0x1b4>)
 80007f2:	f001 fd97 	bl	8002324 <HAL_GPIO_WritePin>
	    	break;
 80007f6:	e01e      	b.n	8000836 <RECEIVE_MESSAGE+0x122>
	    case 0x90:
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 80007f8:	2201      	movs	r2, #1
 80007fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007fe:	4832      	ldr	r0, [pc, #200]	; (80008c8 <RECEIVE_MESSAGE+0x1b4>)
 8000800:	f001 fd90 	bl	8002324 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 8000804:	2201      	movs	r2, #1
 8000806:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800080a:	482f      	ldr	r0, [pc, #188]	; (80008c8 <RECEIVE_MESSAGE+0x1b4>)
 800080c:	f001 fd8a 	bl	8002324 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000810:	2201      	movs	r2, #1
 8000812:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000816:	482c      	ldr	r0, [pc, #176]	; (80008c8 <RECEIVE_MESSAGE+0x1b4>)
 8000818:	f001 fd84 	bl	8002324 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 800081c:	2201      	movs	r2, #1
 800081e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000822:	4829      	ldr	r0, [pc, #164]	; (80008c8 <RECEIVE_MESSAGE+0x1b4>)
 8000824:	f001 fd7e 	bl	8002324 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, 1);
 8000828:	2201      	movs	r2, #1
 800082a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800082e:	4826      	ldr	r0, [pc, #152]	; (80008c8 <RECEIVE_MESSAGE+0x1b4>)
 8000830:	f001 fd78 	bl	8002324 <HAL_GPIO_WritePin>
	    	break;
 8000834:	bf00      	nop
	}

	switch (RxData[1]){
 8000836:	4b23      	ldr	r3, [pc, #140]	; (80008c4 <RECEIVE_MESSAGE+0x1b0>)
 8000838:	785b      	ldrb	r3, [r3, #1]
 800083a:	3b80      	subs	r3, #128	; 0x80
 800083c:	2b03      	cmp	r3, #3
 800083e:	d83f      	bhi.n	80008c0 <RECEIVE_MESSAGE+0x1ac>
 8000840:	a201      	add	r2, pc, #4	; (adr r2, 8000848 <RECEIVE_MESSAGE+0x134>)
 8000842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000846:	bf00      	nop
 8000848:	08000859 	.word	0x08000859
 800084c:	08000873 	.word	0x08000873
 8000850:	0800088d 	.word	0x0800088d
 8000854:	080008a7 	.word	0x080008a7
	    case 0x80:
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, 0);
 8000858:	2200      	movs	r2, #0
 800085a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800085e:	481a      	ldr	r0, [pc, #104]	; (80008c8 <RECEIVE_MESSAGE+0x1b4>)
 8000860:	f001 fd60 	bl	8002324 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 8000864:	2200      	movs	r2, #0
 8000866:	f44f 7100 	mov.w	r1, #512	; 0x200
 800086a:	4817      	ldr	r0, [pc, #92]	; (80008c8 <RECEIVE_MESSAGE+0x1b4>)
 800086c:	f001 fd5a 	bl	8002324 <HAL_GPIO_WritePin>
	    	break;
 8000870:	e026      	b.n	80008c0 <RECEIVE_MESSAGE+0x1ac>
	    case 0x81:
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, 1);
 8000872:	2201      	movs	r2, #1
 8000874:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000878:	4813      	ldr	r0, [pc, #76]	; (80008c8 <RECEIVE_MESSAGE+0x1b4>)
 800087a:	f001 fd53 	bl	8002324 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000884:	4810      	ldr	r0, [pc, #64]	; (80008c8 <RECEIVE_MESSAGE+0x1b4>)
 8000886:	f001 fd4d 	bl	8002324 <HAL_GPIO_WritePin>
	    	break;
 800088a:	e019      	b.n	80008c0 <RECEIVE_MESSAGE+0x1ac>
	    case 0x82:
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, 0);
 800088c:	2200      	movs	r2, #0
 800088e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000892:	480d      	ldr	r0, [pc, #52]	; (80008c8 <RECEIVE_MESSAGE+0x1b4>)
 8000894:	f001 fd46 	bl	8002324 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000898:	2201      	movs	r2, #1
 800089a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800089e:	480a      	ldr	r0, [pc, #40]	; (80008c8 <RECEIVE_MESSAGE+0x1b4>)
 80008a0:	f001 fd40 	bl	8002324 <HAL_GPIO_WritePin>
	    	break;
 80008a4:	e00c      	b.n	80008c0 <RECEIVE_MESSAGE+0x1ac>
	    case 0x83:
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, 1);
 80008a6:	2201      	movs	r2, #1
 80008a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ac:	4806      	ldr	r0, [pc, #24]	; (80008c8 <RECEIVE_MESSAGE+0x1b4>)
 80008ae:	f001 fd39 	bl	8002324 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 80008b2:	2201      	movs	r2, #1
 80008b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008b8:	4803      	ldr	r0, [pc, #12]	; (80008c8 <RECEIVE_MESSAGE+0x1b4>)
 80008ba:	f001 fd33 	bl	8002324 <HAL_GPIO_WritePin>
	    	break;
 80008be:	bf00      	nop
	}
}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	200000d8 	.word	0x200000d8
 80008c8:	40020c00 	.word	0x40020c00

080008cc <HAL_CAN_RxFifo0MsgPendingCallback>:



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){ //Para recibir mensajes del bus //<-- REVISAR hcan o hcan1
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 80008d6:	4a10      	ldr	r2, [pc, #64]	; (8000918 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 80008d8:	2100      	movs	r1, #0
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f000 fec3 	bl	8001666 <HAL_CAN_GetRxMessage>
	if (RxHeader.DLC == 2){
 80008e0:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 80008e2:	691b      	ldr	r3, [r3, #16]
 80008e4:	2b02      	cmp	r3, #2
 80008e6:	d101      	bne.n	80008ec <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
		RECEIVE_MESSAGE();
 80008e8:	f7ff ff14 	bl	8000714 <RECEIVE_MESSAGE>
	}
	if (RxHeader.StdId == 0x100){
 80008ec:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008f4:	d10a      	bne.n	800090c <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_8); //Heartbeat
 80008f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008fa:	4808      	ldr	r0, [pc, #32]	; (800091c <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80008fc:	f001 fd2b 	bl	8002356 <HAL_GPIO_TogglePin>
		//Activar las interrupciones
	//	if(HAL_NVIC_DisableIRQ(EXTI1_IRQn) || HAL_NVIC_EnableIRQ(EXTI2_IRQn)){
			HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000900:	2007      	movs	r0, #7
 8000902:	f001 fb32 	bl	8001f6a <HAL_NVIC_EnableIRQ>
			HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000906:	2008      	movs	r0, #8
 8000908:	f001 fb2f 	bl	8001f6a <HAL_NVIC_EnableIRQ>
	//	}
	}
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	200000d8 	.word	0x200000d8
 8000918:	200000b4 	.word	0x200000b4
 800091c:	40020c00 	.word	0x40020c00

08000920 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){ //Heartbeat
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2){
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000930:	d112      	bne.n	8000958 <HAL_TIM_PeriodElapsedCallback+0x38>
	    TxHeader.DLC = 0; //Data length
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
	    TxHeader.IDE = CAN_ID_STD;
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
	    TxHeader.RTR = CAN_RTR_DATA;
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000940:	2200      	movs	r2, #0
 8000942:	60da      	str	r2, [r3, #12]
	    TxHeader.StdId = 0x600; //ID (identificador del enviador)
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000946:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800094a:	601a      	str	r2, [r3, #0]

	    HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800094e:	4a06      	ldr	r2, [pc, #24]	; (8000968 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000950:	4903      	ldr	r1, [pc, #12]	; (8000960 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000952:	4806      	ldr	r0, [pc, #24]	; (800096c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000954:	f000 fdac 	bl	80014b0 <HAL_CAN_AddTxMessage>
	}
}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	2000009c 	.word	0x2000009c
 8000964:	200000e0 	.word	0x200000e0
 8000968:	200000d0 	.word	0x200000d0
 800096c:	2000002c 	.word	0x2000002c

08000970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000974:	f000 fb0a 	bl	8000f8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000978:	f000 f832 	bl	80009e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097c:	f000 f93c 	bl	8000bf8 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000980:	f000 f898 	bl	8000ab4 <MX_CAN1_Init>
  MX_TIM2_Init();
 8000984:	f000 f8ea 	bl	8000b5c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000988:	4810      	ldr	r0, [pc, #64]	; (80009cc <main+0x5c>)
 800098a:	f000 fd4d 	bl	8001428 <HAL_CAN_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 800098e:	4810      	ldr	r0, [pc, #64]	; (80009d0 <main+0x60>)
 8000990:	f002 f9c8 	bl	8002d24 <HAL_TIM_Base_Start_IT>

    //Activar la notificacion de que hay mensajes para recibir
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000994:	2102      	movs	r1, #2
 8000996:	480d      	ldr	r0, [pc, #52]	; (80009cc <main+0x5c>)
 8000998:	f000 ff77 	bl	800188a <HAL_CAN_ActivateNotification>

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 800099c:	2201      	movs	r2, #1
 800099e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009a2:	480c      	ldr	r0, [pc, #48]	; (80009d4 <main+0x64>)
 80009a4:	f001 fcbe 	bl	8002324 <HAL_GPIO_WritePin>


    //Al principio están desactivadas las interrrupciones de los botones
    HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 80009a8:	2007      	movs	r0, #7
 80009aa:	f001 faec 	bl	8001f86 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 80009ae:	2008      	movs	r0, #8
 80009b0:	f001 fae9 	bl	8001f86 <HAL_NVIC_DisableIRQ>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
	  HAL_Delay(1000);
*/

	  if (buttonUP==1 || buttonDOWN==1){
 80009b4:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <main+0x68>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d003      	beq.n	80009c4 <main+0x54>
 80009bc:	4b07      	ldr	r3, [pc, #28]	; (80009dc <main+0x6c>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d1f7      	bne.n	80009b4 <main+0x44>
		  MAPChange();
 80009c4:	f7ff fe4e 	bl	8000664 <MAPChange>
	  if (buttonUP==1 || buttonDOWN==1){
 80009c8:	e7f4      	b.n	80009b4 <main+0x44>
 80009ca:	bf00      	nop
 80009cc:	2000002c 	.word	0x2000002c
 80009d0:	20000054 	.word	0x20000054
 80009d4:	40020c00 	.word	0x40020c00
 80009d8:	200000e8 	.word	0x200000e8
 80009dc:	200000ec 	.word	0x200000ec

080009e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b094      	sub	sp, #80	; 0x50
 80009e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e6:	f107 0320 	add.w	r3, r7, #32
 80009ea:	2230      	movs	r2, #48	; 0x30
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f002 fdee 	bl	80035d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a04:	2300      	movs	r3, #0
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	4b28      	ldr	r3, [pc, #160]	; (8000aac <SystemClock_Config+0xcc>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	4a27      	ldr	r2, [pc, #156]	; (8000aac <SystemClock_Config+0xcc>)
 8000a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a12:	6413      	str	r3, [r2, #64]	; 0x40
 8000a14:	4b25      	ldr	r3, [pc, #148]	; (8000aac <SystemClock_Config+0xcc>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a20:	2300      	movs	r3, #0
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <SystemClock_Config+0xd0>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a21      	ldr	r2, [pc, #132]	; (8000ab0 <SystemClock_Config+0xd0>)
 8000a2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a2e:	6013      	str	r3, [r2, #0]
 8000a30:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <SystemClock_Config+0xd0>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a46:	2302      	movs	r3, #2
 8000a48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a50:	2304      	movs	r3, #4
 8000a52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a54:	23a8      	movs	r3, #168	; 0xa8
 8000a56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a5c:	2307      	movs	r3, #7
 8000a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a60:	f107 0320 	add.w	r3, r7, #32
 8000a64:	4618      	mov	r0, r3
 8000a66:	f001 fca9 	bl	80023bc <HAL_RCC_OscConfig>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a70:	f000 f94e 	bl	8000d10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a74:	230f      	movs	r3, #15
 8000a76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a80:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	2105      	movs	r1, #5
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 ff0a 	bl	80028ac <HAL_RCC_ClockConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a9e:	f000 f937 	bl	8000d10 <Error_Handler>
  }
}
 8000aa2:	bf00      	nop
 8000aa4:	3750      	adds	r7, #80	; 0x50
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40007000 	.word	0x40007000

08000ab4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08a      	sub	sp, #40	; 0x28
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000aba:	4b26      	ldr	r3, [pc, #152]	; (8000b54 <MX_CAN1_Init+0xa0>)
 8000abc:	4a26      	ldr	r2, [pc, #152]	; (8000b58 <MX_CAN1_Init+0xa4>)
 8000abe:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 8000ac0:	4b24      	ldr	r3, [pc, #144]	; (8000b54 <MX_CAN1_Init+0xa0>)
 8000ac2:	2215      	movs	r2, #21
 8000ac4:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ac6:	4b23      	ldr	r3, [pc, #140]	; (8000b54 <MX_CAN1_Init+0xa0>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000acc:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <MX_CAN1_Init+0xa0>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000ad2:	4b20      	ldr	r3, [pc, #128]	; (8000b54 <MX_CAN1_Init+0xa0>)
 8000ad4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ad8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000ada:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <MX_CAN1_Init+0xa0>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ae0:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <MX_CAN1_Init+0xa0>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000ae6:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <MX_CAN1_Init+0xa0>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000aec:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <MX_CAN1_Init+0xa0>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000af2:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <MX_CAN1_Init+0xa0>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000af8:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <MX_CAN1_Init+0xa0>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000afe:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <MX_CAN1_Init+0xa0>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000b04:	4813      	ldr	r0, [pc, #76]	; (8000b54 <MX_CAN1_Init+0xa0>)
 8000b06:	f000 fab3 	bl	8001070 <HAL_CAN_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000b10:	f000 f8fe 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

      canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000b14:	2301      	movs	r3, #1
 8000b16:	623b      	str	r3, [r7, #32]
      canfilterconfig.FilterBank = 18; //which filter bank to use from the assigned ones
 8000b18:	2312      	movs	r3, #18
 8000b1a:	617b      	str	r3, [r7, #20]
      canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0; //Para guardar el mensaje entrante
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	613b      	str	r3, [r7, #16]
      canfilterconfig.FilterIdHigh = 0x100<<5;
 8000b20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b24:	603b      	str	r3, [r7, #0]
      canfilterconfig.FilterIdLow = 0x0000;
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
      canfilterconfig.FilterMaskIdHigh = 0x100<<5; //Escribo en la posicion 5
 8000b2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b2e:	60bb      	str	r3, [r7, #8]
      canfilterconfig.FilterMaskIdLow = 0x0000;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
      canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61bb      	str	r3, [r7, #24]
      canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	61fb      	str	r3, [r7, #28]
      canfilterconfig.SlaveStartFilterBank = 20; //how many filters to assign to the CAN1 (master can)
 8000b3c:	2314      	movs	r3, #20
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24

      HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000b40:	463b      	mov	r3, r7
 8000b42:	4619      	mov	r1, r3
 8000b44:	4803      	ldr	r0, [pc, #12]	; (8000b54 <MX_CAN1_Init+0xa0>)
 8000b46:	f000 fb8f 	bl	8001268 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	3728      	adds	r7, #40	; 0x28
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	2000002c 	.word	0x2000002c
 8000b58:	40006400 	.word	0x40006400

08000b5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b62:	f107 0308 	add.w	r3, r7, #8
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b70:	463b      	mov	r3, r7
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b78:	4b1e      	ldr	r3, [pc, #120]	; (8000bf4 <MX_TIM2_Init+0x98>)
 8000b7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42000;
 8000b80:	4b1c      	ldr	r3, [pc, #112]	; (8000bf4 <MX_TIM2_Init+0x98>)
 8000b82:	f24a 4210 	movw	r2, #42000	; 0xa410
 8000b86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b88:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <MX_TIM2_Init+0x98>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000b8e:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <MX_TIM2_Init+0x98>)
 8000b90:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000b94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b96:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <MX_TIM2_Init+0x98>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b9c:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <MX_TIM2_Init+0x98>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ba2:	4814      	ldr	r0, [pc, #80]	; (8000bf4 <MX_TIM2_Init+0x98>)
 8000ba4:	f002 f86e 	bl	8002c84 <HAL_TIM_Base_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000bae:	f000 f8af 	bl	8000d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bb8:	f107 0308 	add.w	r3, r7, #8
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	480d      	ldr	r0, [pc, #52]	; (8000bf4 <MX_TIM2_Init+0x98>)
 8000bc0:	f002 fa28 	bl	8003014 <HAL_TIM_ConfigClockSource>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000bca:	f000 f8a1 	bl	8000d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4806      	ldr	r0, [pc, #24]	; (8000bf4 <MX_TIM2_Init+0x98>)
 8000bdc:	f002 fc44 	bl	8003468 <HAL_TIMEx_MasterConfigSynchronization>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000be6:	f000 f893 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000054 	.word	0x20000054

08000bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	4b3c      	ldr	r3, [pc, #240]	; (8000d04 <MX_GPIO_Init+0x10c>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a3b      	ldr	r2, [pc, #236]	; (8000d04 <MX_GPIO_Init+0x10c>)
 8000c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b39      	ldr	r3, [pc, #228]	; (8000d04 <MX_GPIO_Init+0x10c>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	4b35      	ldr	r3, [pc, #212]	; (8000d04 <MX_GPIO_Init+0x10c>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a34      	ldr	r2, [pc, #208]	; (8000d04 <MX_GPIO_Init+0x10c>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b32      	ldr	r3, [pc, #200]	; (8000d04 <MX_GPIO_Init+0x10c>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	4b2e      	ldr	r3, [pc, #184]	; (8000d04 <MX_GPIO_Init+0x10c>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a2d      	ldr	r2, [pc, #180]	; (8000d04 <MX_GPIO_Init+0x10c>)
 8000c50:	f043 0308 	orr.w	r3, r3, #8
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b2b      	ldr	r3, [pc, #172]	; (8000d04 <MX_GPIO_Init+0x10c>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0308 	and.w	r3, r3, #8
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	4b27      	ldr	r3, [pc, #156]	; (8000d04 <MX_GPIO_Init+0x10c>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a26      	ldr	r2, [pc, #152]	; (8000d04 <MX_GPIO_Init+0x10c>)
 8000c6c:	f043 0302 	orr.w	r3, r3, #2
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b24      	ldr	r3, [pc, #144]	; (8000d04 <MX_GPIO_Init+0x10c>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000c84:	4820      	ldr	r0, [pc, #128]	; (8000d08 <MX_GPIO_Init+0x110>)
 8000c86:	f001 fb4d 	bl	8002324 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000c8a:	2309      	movs	r3, #9
 8000c8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c8e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	481b      	ldr	r0, [pc, #108]	; (8000d0c <MX_GPIO_Init+0x114>)
 8000ca0:	f001 f98c 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000ca4:	2306      	movs	r3, #6
 8000ca6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ca8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4814      	ldr	r0, [pc, #80]	; (8000d0c <MX_GPIO_Init+0x114>)
 8000cba:	f001 f97f 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000cbe:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000cc2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	480c      	ldr	r0, [pc, #48]	; (8000d08 <MX_GPIO_Init+0x110>)
 8000cd8:	f001 f970 	bl	8001fbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2100      	movs	r1, #0
 8000ce0:	2007      	movs	r0, #7
 8000ce2:	f001 f926 	bl	8001f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000ce6:	2007      	movs	r0, #7
 8000ce8:	f001 f93f 	bl	8001f6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2100      	movs	r1, #0
 8000cf0:	2008      	movs	r0, #8
 8000cf2:	f001 f91e 	bl	8001f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000cf6:	2008      	movs	r0, #8
 8000cf8:	f001 f937 	bl	8001f6a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8000cfc:	bf00      	nop
 8000cfe:	3728      	adds	r7, #40	; 0x28
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40020c00 	.word	0x40020c00
 8000d0c:	40020000 	.word	0x40020000

08000d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d14:	b672      	cpsid	i
}
 8000d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <Error_Handler+0x8>
	...

08000d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	4a0f      	ldr	r2, [pc, #60]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d30:	6453      	str	r3, [r2, #68]	; 0x44
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	603b      	str	r3, [r7, #0]
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	4a08      	ldr	r2, [pc, #32]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d5a:	2007      	movs	r0, #7
 8000d5c:	f001 f8de 	bl	8001f1c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40023800 	.word	0x40023800

08000d6c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	; 0x28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a26      	ldr	r2, [pc, #152]	; (8000e24 <HAL_CAN_MspInit+0xb8>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d145      	bne.n	8000e1a <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	4b25      	ldr	r3, [pc, #148]	; (8000e28 <HAL_CAN_MspInit+0xbc>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	4a24      	ldr	r2, [pc, #144]	; (8000e28 <HAL_CAN_MspInit+0xbc>)
 8000d98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9e:	4b22      	ldr	r3, [pc, #136]	; (8000e28 <HAL_CAN_MspInit+0xbc>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	4b1e      	ldr	r3, [pc, #120]	; (8000e28 <HAL_CAN_MspInit+0xbc>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a1d      	ldr	r2, [pc, #116]	; (8000e28 <HAL_CAN_MspInit+0xbc>)
 8000db4:	f043 0302 	orr.w	r3, r3, #2
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b1b      	ldr	r3, [pc, #108]	; (8000e28 <HAL_CAN_MspInit+0xbc>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000dc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000dd8:	2309      	movs	r3, #9
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	4619      	mov	r1, r3
 8000de2:	4812      	ldr	r0, [pc, #72]	; (8000e2c <HAL_CAN_MspInit+0xc0>)
 8000de4:	f001 f8ea 	bl	8001fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000de8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df6:	2303      	movs	r3, #3
 8000df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000dfa:	2309      	movs	r3, #9
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4619      	mov	r1, r3
 8000e04:	4809      	ldr	r0, [pc, #36]	; (8000e2c <HAL_CAN_MspInit+0xc0>)
 8000e06:	f001 f8d9 	bl	8001fbc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	2014      	movs	r0, #20
 8000e10:	f001 f88f 	bl	8001f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000e14:	2014      	movs	r0, #20
 8000e16:	f001 f8a8 	bl	8001f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000e1a:	bf00      	nop
 8000e1c:	3728      	adds	r7, #40	; 0x28
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40006400 	.word	0x40006400
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40020400 	.word	0x40020400

08000e30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e40:	d115      	bne.n	8000e6e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <HAL_TIM_Base_MspInit+0x48>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	4a0b      	ldr	r2, [pc, #44]	; (8000e78 <HAL_TIM_Base_MspInit+0x48>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6413      	str	r3, [r2, #64]	; 0x40
 8000e52:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <HAL_TIM_Base_MspInit+0x48>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2100      	movs	r1, #0
 8000e62:	201c      	movs	r0, #28
 8000e64:	f001 f865 	bl	8001f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e68:	201c      	movs	r0, #28
 8000e6a:	f001 f87e 	bl	8001f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e6e:	bf00      	nop
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40023800 	.word	0x40023800

08000e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <NMI_Handler+0x4>

08000e82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <HardFault_Handler+0x4>

08000e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <MemManage_Handler+0x4>

08000e8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e92:	e7fe      	b.n	8000e92 <BusFault_Handler+0x4>

08000e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <UsageFault_Handler+0x4>

08000e9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec8:	f000 f8b2 	bl	8001030 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000ed4:	2002      	movs	r0, #2
 8000ed6:	f001 fa59 	bl	800238c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}

08000ede <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000ee2:	2004      	movs	r0, #4
 8000ee4:	f001 fa52 	bl	800238c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}

08000eec <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ef0:	4802      	ldr	r0, [pc, #8]	; (8000efc <CAN1_RX0_IRQHandler+0x10>)
 8000ef2:	f000 fcf0 	bl	80018d6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	2000002c 	.word	0x2000002c

08000f00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f04:	4802      	ldr	r0, [pc, #8]	; (8000f10 <TIM2_IRQHandler+0x10>)
 8000f06:	f001 ff7d 	bl	8002e04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000054 	.word	0x20000054

08000f14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <SystemInit+0x20>)
 8000f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f1e:	4a05      	ldr	r2, [pc, #20]	; (8000f34 <SystemInit+0x20>)
 8000f20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f3c:	480d      	ldr	r0, [pc, #52]	; (8000f74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f3e:	490e      	ldr	r1, [pc, #56]	; (8000f78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f40:	4a0e      	ldr	r2, [pc, #56]	; (8000f7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f44:	e002      	b.n	8000f4c <LoopCopyDataInit>

08000f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4a:	3304      	adds	r3, #4

08000f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f50:	d3f9      	bcc.n	8000f46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f52:	4a0b      	ldr	r2, [pc, #44]	; (8000f80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f54:	4c0b      	ldr	r4, [pc, #44]	; (8000f84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f58:	e001      	b.n	8000f5e <LoopFillZerobss>

08000f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f5c:	3204      	adds	r2, #4

08000f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f60:	d3fb      	bcc.n	8000f5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f62:	f7ff ffd7 	bl	8000f14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f66:	f002 fb0f 	bl	8003588 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6a:	f7ff fd01 	bl	8000970 <main>
  bx  lr    
 8000f6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f78:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f7c:	08003618 	.word	0x08003618
  ldr r2, =_sbss
 8000f80:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f84:	200000fc 	.word	0x200000fc

08000f88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f88:	e7fe      	b.n	8000f88 <ADC_IRQHandler>
	...

08000f8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f90:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <HAL_Init+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0d      	ldr	r2, [pc, #52]	; (8000fcc <HAL_Init+0x40>)
 8000f96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <HAL_Init+0x40>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <HAL_Init+0x40>)
 8000fa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <HAL_Init+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a07      	ldr	r2, [pc, #28]	; (8000fcc <HAL_Init+0x40>)
 8000fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb4:	2003      	movs	r0, #3
 8000fb6:	f000 ffb1 	bl	8001f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f000 f808 	bl	8000fd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc0:	f7ff feac 	bl	8000d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40023c00 	.word	0x40023c00

08000fd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_InitTick+0x54>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <HAL_InitTick+0x58>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 ffd7 	bl	8001fa2 <HAL_SYSTICK_Config>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e00e      	b.n	800101c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b0f      	cmp	r3, #15
 8001002:	d80a      	bhi.n	800101a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001004:	2200      	movs	r2, #0
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	f04f 30ff 	mov.w	r0, #4294967295
 800100c:	f000 ff91 	bl	8001f32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001010:	4a06      	ldr	r2, [pc, #24]	; (800102c <HAL_InitTick+0x5c>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001016:	2300      	movs	r3, #0
 8001018:	e000      	b.n	800101c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
}
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000004 	.word	0x20000004
 8001028:	2000000c 	.word	0x2000000c
 800102c:	20000008 	.word	0x20000008

08001030 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_IncTick+0x20>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_IncTick+0x24>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4413      	add	r3, r2
 8001040:	4a04      	ldr	r2, [pc, #16]	; (8001054 <HAL_IncTick+0x24>)
 8001042:	6013      	str	r3, [r2, #0]
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	2000000c 	.word	0x2000000c
 8001054:	200000f8 	.word	0x200000f8

08001058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return uwTick;
 800105c:	4b03      	ldr	r3, [pc, #12]	; (800106c <HAL_GetTick+0x14>)
 800105e:	681b      	ldr	r3, [r3, #0]
}
 8001060:	4618      	mov	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	200000f8 	.word	0x200000f8

08001070 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e0ed      	b.n	800125e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d102      	bne.n	8001094 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff fe6c 	bl	8000d6c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f042 0201 	orr.w	r2, r2, #1
 80010a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010a4:	f7ff ffd8 	bl	8001058 <HAL_GetTick>
 80010a8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010aa:	e012      	b.n	80010d2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010ac:	f7ff ffd4 	bl	8001058 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b0a      	cmp	r3, #10
 80010b8:	d90b      	bls.n	80010d2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2205      	movs	r2, #5
 80010ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e0c5      	b.n	800125e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d0e5      	beq.n	80010ac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f022 0202 	bic.w	r2, r2, #2
 80010ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010f0:	f7ff ffb2 	bl	8001058 <HAL_GetTick>
 80010f4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010f6:	e012      	b.n	800111e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010f8:	f7ff ffae 	bl	8001058 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b0a      	cmp	r3, #10
 8001104:	d90b      	bls.n	800111e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2205      	movs	r2, #5
 8001116:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e09f      	b.n	800125e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1e5      	bne.n	80010f8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	7e1b      	ldrb	r3, [r3, #24]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d108      	bne.n	8001146 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	e007      	b.n	8001156 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001154:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	7e5b      	ldrb	r3, [r3, #25]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d108      	bne.n	8001170 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	e007      	b.n	8001180 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800117e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	7e9b      	ldrb	r3, [r3, #26]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d108      	bne.n	800119a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f042 0220 	orr.w	r2, r2, #32
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	e007      	b.n	80011aa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f022 0220 	bic.w	r2, r2, #32
 80011a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	7edb      	ldrb	r3, [r3, #27]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d108      	bne.n	80011c4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f022 0210 	bic.w	r2, r2, #16
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	e007      	b.n	80011d4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f042 0210 	orr.w	r2, r2, #16
 80011d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	7f1b      	ldrb	r3, [r3, #28]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d108      	bne.n	80011ee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f042 0208 	orr.w	r2, r2, #8
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	e007      	b.n	80011fe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f022 0208 	bic.w	r2, r2, #8
 80011fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	7f5b      	ldrb	r3, [r3, #29]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d108      	bne.n	8001218 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f042 0204 	orr.w	r2, r2, #4
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	e007      	b.n	8001228 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f022 0204 	bic.w	r2, r2, #4
 8001226:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	431a      	orrs	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	431a      	orrs	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	ea42 0103 	orr.w	r1, r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	1e5a      	subs	r2, r3, #1
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	430a      	orrs	r2, r1
 800124c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2201      	movs	r2, #1
 8001258:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001268:	b480      	push	{r7}
 800126a:	b087      	sub	sp, #28
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800127e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001280:	7cfb      	ldrb	r3, [r7, #19]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d003      	beq.n	800128e <HAL_CAN_ConfigFilter+0x26>
 8001286:	7cfb      	ldrb	r3, [r7, #19]
 8001288:	2b02      	cmp	r3, #2
 800128a:	f040 80be 	bne.w	800140a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800128e:	4b65      	ldr	r3, [pc, #404]	; (8001424 <HAL_CAN_ConfigFilter+0x1bc>)
 8001290:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001298:	f043 0201 	orr.w	r2, r3, #1
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012a8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012bc:	021b      	lsls	r3, r3, #8
 80012be:	431a      	orrs	r2, r3
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	f003 031f 	and.w	r3, r3, #31
 80012ce:	2201      	movs	r2, #1
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	43db      	mvns	r3, r3
 80012e0:	401a      	ands	r2, r3
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	69db      	ldr	r3, [r3, #28]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d123      	bne.n	8001338 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	401a      	ands	r2, r3
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001312:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	3248      	adds	r2, #72	; 0x48
 8001318:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800132c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800132e:	6979      	ldr	r1, [r7, #20]
 8001330:	3348      	adds	r3, #72	; 0x48
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	440b      	add	r3, r1
 8001336:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	69db      	ldr	r3, [r3, #28]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d122      	bne.n	8001386 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	431a      	orrs	r2, r3
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001360:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	3248      	adds	r2, #72	; 0x48
 8001366:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800137a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800137c:	6979      	ldr	r1, [r7, #20]
 800137e:	3348      	adds	r3, #72	; 0x48
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	440b      	add	r3, r1
 8001384:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d109      	bne.n	80013a2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	43db      	mvns	r3, r3
 8001398:	401a      	ands	r2, r3
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80013a0:	e007      	b.n	80013b2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	431a      	orrs	r2, r3
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d109      	bne.n	80013ce <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	43db      	mvns	r3, r3
 80013c4:	401a      	ands	r2, r3
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80013cc:	e007      	b.n	80013de <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	431a      	orrs	r2, r3
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	6a1b      	ldr	r3, [r3, #32]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d107      	bne.n	80013f6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	431a      	orrs	r2, r3
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013fc:	f023 0201 	bic.w	r2, r3, #1
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	e006      	b.n	8001418 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
  }
}
 8001418:	4618      	mov	r0, r3
 800141a:	371c      	adds	r7, #28
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	40006400 	.word	0x40006400

08001428 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b01      	cmp	r3, #1
 800143a:	d12e      	bne.n	800149a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2202      	movs	r2, #2
 8001440:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f022 0201 	bic.w	r2, r2, #1
 8001452:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001454:	f7ff fe00 	bl	8001058 <HAL_GetTick>
 8001458:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800145a:	e012      	b.n	8001482 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800145c:	f7ff fdfc 	bl	8001058 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b0a      	cmp	r3, #10
 8001468:	d90b      	bls.n	8001482 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2205      	movs	r2, #5
 800147a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e012      	b.n	80014a8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1e5      	bne.n	800145c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001496:	2300      	movs	r3, #0
 8001498:	e006      	b.n	80014a8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
  }
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b089      	sub	sp, #36	; 0x24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
 80014bc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014c4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80014ce:	7ffb      	ldrb	r3, [r7, #31]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d003      	beq.n	80014dc <HAL_CAN_AddTxMessage+0x2c>
 80014d4:	7ffb      	ldrb	r3, [r7, #31]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	f040 80b8 	bne.w	800164c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d10a      	bne.n	80014fc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d105      	bne.n	80014fc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 80a0 	beq.w	800163c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	0e1b      	lsrs	r3, r3, #24
 8001500:	f003 0303 	and.w	r3, r3, #3
 8001504:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	2b02      	cmp	r3, #2
 800150a:	d907      	bls.n	800151c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001510:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e09e      	b.n	800165a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800151c:	2201      	movs	r2, #1
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	409a      	lsls	r2, r3
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10d      	bne.n	800154a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001538:	68f9      	ldr	r1, [r7, #12]
 800153a:	6809      	ldr	r1, [r1, #0]
 800153c:	431a      	orrs	r2, r3
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	3318      	adds	r3, #24
 8001542:	011b      	lsls	r3, r3, #4
 8001544:	440b      	add	r3, r1
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	e00f      	b.n	800156a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001554:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800155a:	68f9      	ldr	r1, [r7, #12]
 800155c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800155e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	3318      	adds	r3, #24
 8001564:	011b      	lsls	r3, r3, #4
 8001566:	440b      	add	r3, r1
 8001568:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6819      	ldr	r1, [r3, #0]
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	691a      	ldr	r2, [r3, #16]
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	3318      	adds	r3, #24
 8001576:	011b      	lsls	r3, r3, #4
 8001578:	440b      	add	r3, r1
 800157a:	3304      	adds	r3, #4
 800157c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	7d1b      	ldrb	r3, [r3, #20]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d111      	bne.n	80015aa <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	3318      	adds	r3, #24
 800158e:	011b      	lsls	r3, r3, #4
 8001590:	4413      	add	r3, r2
 8001592:	3304      	adds	r3, #4
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	6811      	ldr	r1, [r2, #0]
 800159a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	3318      	adds	r3, #24
 80015a2:	011b      	lsls	r3, r3, #4
 80015a4:	440b      	add	r3, r1
 80015a6:	3304      	adds	r3, #4
 80015a8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	3307      	adds	r3, #7
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	061a      	lsls	r2, r3, #24
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	3306      	adds	r3, #6
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	041b      	lsls	r3, r3, #16
 80015ba:	431a      	orrs	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3305      	adds	r3, #5
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	021b      	lsls	r3, r3, #8
 80015c4:	4313      	orrs	r3, r2
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	3204      	adds	r2, #4
 80015ca:	7812      	ldrb	r2, [r2, #0]
 80015cc:	4610      	mov	r0, r2
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	6811      	ldr	r1, [r2, #0]
 80015d2:	ea43 0200 	orr.w	r2, r3, r0
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	011b      	lsls	r3, r3, #4
 80015da:	440b      	add	r3, r1
 80015dc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80015e0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3303      	adds	r3, #3
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	061a      	lsls	r2, r3, #24
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3302      	adds	r3, #2
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	041b      	lsls	r3, r3, #16
 80015f2:	431a      	orrs	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3301      	adds	r3, #1
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	021b      	lsls	r3, r3, #8
 80015fc:	4313      	orrs	r3, r2
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	7812      	ldrb	r2, [r2, #0]
 8001602:	4610      	mov	r0, r2
 8001604:	68fa      	ldr	r2, [r7, #12]
 8001606:	6811      	ldr	r1, [r2, #0]
 8001608:	ea43 0200 	orr.w	r2, r3, r0
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	011b      	lsls	r3, r3, #4
 8001610:	440b      	add	r3, r1
 8001612:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001616:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	3318      	adds	r3, #24
 8001620:	011b      	lsls	r3, r3, #4
 8001622:	4413      	add	r3, r2
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	6811      	ldr	r1, [r2, #0]
 800162a:	f043 0201 	orr.w	r2, r3, #1
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	3318      	adds	r3, #24
 8001632:	011b      	lsls	r3, r3, #4
 8001634:	440b      	add	r3, r1
 8001636:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001638:	2300      	movs	r3, #0
 800163a:	e00e      	b.n	800165a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001640:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e006      	b.n	800165a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001650:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
  }
}
 800165a:	4618      	mov	r0, r3
 800165c:	3724      	adds	r7, #36	; 0x24
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001666:	b480      	push	{r7}
 8001668:	b087      	sub	sp, #28
 800166a:	af00      	add	r7, sp, #0
 800166c:	60f8      	str	r0, [r7, #12]
 800166e:	60b9      	str	r1, [r7, #8]
 8001670:	607a      	str	r2, [r7, #4]
 8001672:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f893 3020 	ldrb.w	r3, [r3, #32]
 800167a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800167c:	7dfb      	ldrb	r3, [r7, #23]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d003      	beq.n	800168a <HAL_CAN_GetRxMessage+0x24>
 8001682:	7dfb      	ldrb	r3, [r7, #23]
 8001684:	2b02      	cmp	r3, #2
 8001686:	f040 80f3 	bne.w	8001870 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d10e      	bne.n	80016ae <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	f003 0303 	and.w	r3, r3, #3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d116      	bne.n	80016cc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e0e7      	b.n	800187e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d107      	bne.n	80016cc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e0d8      	b.n	800187e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	331b      	adds	r3, #27
 80016d4:	011b      	lsls	r3, r3, #4
 80016d6:	4413      	add	r3, r2
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0204 	and.w	r2, r3, #4
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d10c      	bne.n	8001704 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	331b      	adds	r3, #27
 80016f2:	011b      	lsls	r3, r3, #4
 80016f4:	4413      	add	r3, r2
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	0d5b      	lsrs	r3, r3, #21
 80016fa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	e00b      	b.n	800171c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	331b      	adds	r3, #27
 800170c:	011b      	lsls	r3, r3, #4
 800170e:	4413      	add	r3, r2
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	08db      	lsrs	r3, r3, #3
 8001714:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	331b      	adds	r3, #27
 8001724:	011b      	lsls	r3, r3, #4
 8001726:	4413      	add	r3, r2
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0202 	and.w	r2, r3, #2
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	331b      	adds	r3, #27
 800173a:	011b      	lsls	r3, r3, #4
 800173c:	4413      	add	r3, r2
 800173e:	3304      	adds	r3, #4
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 020f 	and.w	r2, r3, #15
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	331b      	adds	r3, #27
 8001752:	011b      	lsls	r3, r3, #4
 8001754:	4413      	add	r3, r2
 8001756:	3304      	adds	r3, #4
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	0a1b      	lsrs	r3, r3, #8
 800175c:	b2da      	uxtb	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	331b      	adds	r3, #27
 800176a:	011b      	lsls	r3, r3, #4
 800176c:	4413      	add	r3, r2
 800176e:	3304      	adds	r3, #4
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	0c1b      	lsrs	r3, r3, #16
 8001774:	b29a      	uxth	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	011b      	lsls	r3, r3, #4
 8001782:	4413      	add	r3, r2
 8001784:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	b2da      	uxtb	r2, r3
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	011b      	lsls	r3, r3, #4
 8001798:	4413      	add	r3, r2
 800179a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	0a1a      	lsrs	r2, r3, #8
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	3301      	adds	r3, #1
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	011b      	lsls	r3, r3, #4
 80017b2:	4413      	add	r3, r2
 80017b4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	0c1a      	lsrs	r2, r3, #16
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	3302      	adds	r3, #2
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	011b      	lsls	r3, r3, #4
 80017cc:	4413      	add	r3, r2
 80017ce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	0e1a      	lsrs	r2, r3, #24
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	3303      	adds	r3, #3
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	011b      	lsls	r3, r3, #4
 80017e6:	4413      	add	r3, r2
 80017e8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	3304      	adds	r3, #4
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	011b      	lsls	r3, r3, #4
 80017fe:	4413      	add	r3, r2
 8001800:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	0a1a      	lsrs	r2, r3, #8
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	3305      	adds	r3, #5
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	011b      	lsls	r3, r3, #4
 8001818:	4413      	add	r3, r2
 800181a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	0c1a      	lsrs	r2, r3, #16
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	3306      	adds	r3, #6
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	011b      	lsls	r3, r3, #4
 8001832:	4413      	add	r3, r2
 8001834:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	0e1a      	lsrs	r2, r3, #24
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	3307      	adds	r3, #7
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d108      	bne.n	800185c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68da      	ldr	r2, [r3, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f042 0220 	orr.w	r2, r2, #32
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	e007      	b.n	800186c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	691a      	ldr	r2, [r3, #16]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f042 0220 	orr.w	r2, r2, #32
 800186a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800186c:	2300      	movs	r3, #0
 800186e:	e006      	b.n	800187e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001874:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
  }
}
 800187e:	4618      	mov	r0, r3
 8001880:	371c      	adds	r7, #28
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800188a:	b480      	push	{r7}
 800188c:	b085      	sub	sp, #20
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
 8001892:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f893 3020 	ldrb.w	r3, [r3, #32]
 800189a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d002      	beq.n	80018a8 <HAL_CAN_ActivateNotification+0x1e>
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d109      	bne.n	80018bc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6959      	ldr	r1, [r3, #20]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	430a      	orrs	r2, r1
 80018b6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80018b8:	2300      	movs	r3, #0
 80018ba:	e006      	b.n	80018ca <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
  }
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b08a      	sub	sp, #40	; 0x28
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80018de:	2300      	movs	r3, #0
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001912:	6a3b      	ldr	r3, [r7, #32]
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b00      	cmp	r3, #0
 800191a:	d07c      	beq.n	8001a16 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b00      	cmp	r3, #0
 8001924:	d023      	beq.n	800196e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2201      	movs	r2, #1
 800192c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d003      	beq.n	8001940 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f000 f983 	bl	8001c44 <HAL_CAN_TxMailbox0CompleteCallback>
 800193e:	e016      	b.n	800196e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	f003 0304 	and.w	r3, r3, #4
 8001946:	2b00      	cmp	r3, #0
 8001948:	d004      	beq.n	8001954 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
 8001952:	e00c      	b.n	800196e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	f003 0308 	and.w	r3, r3, #8
 800195a:	2b00      	cmp	r3, #0
 800195c:	d004      	beq.n	8001968 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
 8001966:	e002      	b.n	800196e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 f989 	bl	8001c80 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001974:	2b00      	cmp	r3, #0
 8001976:	d024      	beq.n	80019c2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001980:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f000 f963 	bl	8001c58 <HAL_CAN_TxMailbox1CompleteCallback>
 8001992:	e016      	b.n	80019c2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800199a:	2b00      	cmp	r3, #0
 800199c:	d004      	beq.n	80019a8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
 80019a6:	e00c      	b.n	80019c2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d004      	beq.n	80019bc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
 80019ba:	e002      	b.n	80019c2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 f969 	bl	8001c94 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d024      	beq.n	8001a16 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019d4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 f943 	bl	8001c6c <HAL_CAN_TxMailbox2CompleteCallback>
 80019e6:	e016      	b.n	8001a16 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d004      	beq.n	80019fc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80019f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
 80019fa:	e00c      	b.n	8001a16 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d004      	beq.n	8001a10 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a0e:	e002      	b.n	8001a16 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 f949 	bl	8001ca8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001a16:	6a3b      	ldr	r3, [r7, #32]
 8001a18:	f003 0308 	and.w	r3, r3, #8
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d00c      	beq.n	8001a3a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	f003 0310 	and.w	r3, r3, #16
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d007      	beq.n	8001a3a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2210      	movs	r2, #16
 8001a38:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a3a:	6a3b      	ldr	r3, [r7, #32]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d00b      	beq.n	8001a5c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	f003 0308 	and.w	r3, r3, #8
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d006      	beq.n	8001a5c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2208      	movs	r2, #8
 8001a54:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 f930 	bl	8001cbc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a5c:	6a3b      	ldr	r3, [r7, #32]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d009      	beq.n	8001a7a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	f003 0303 	and.w	r3, r3, #3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d002      	beq.n	8001a7a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7fe ff29 	bl	80008cc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001a7a:	6a3b      	ldr	r3, [r7, #32]
 8001a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d00c      	beq.n	8001a9e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	f003 0310 	and.w	r3, r3, #16
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d007      	beq.n	8001a9e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2210      	movs	r2, #16
 8001a9c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001a9e:	6a3b      	ldr	r3, [r7, #32]
 8001aa0:	f003 0320 	and.w	r3, r3, #32
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d00b      	beq.n	8001ac0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d006      	beq.n	8001ac0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2208      	movs	r2, #8
 8001ab8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f912 	bl	8001ce4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ac0:	6a3b      	ldr	r3, [r7, #32]
 8001ac2:	f003 0310 	and.w	r3, r3, #16
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d009      	beq.n	8001ade <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d002      	beq.n	8001ade <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 f8f9 	bl	8001cd0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001ade:	6a3b      	ldr	r3, [r7, #32]
 8001ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d00b      	beq.n	8001b00 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f003 0310 	and.w	r3, r3, #16
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d006      	beq.n	8001b00 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2210      	movs	r2, #16
 8001af8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f8fc 	bl	8001cf8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b00:	6a3b      	ldr	r3, [r7, #32]
 8001b02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d00b      	beq.n	8001b22 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	f003 0308 	and.w	r3, r3, #8
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d006      	beq.n	8001b22 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2208      	movs	r2, #8
 8001b1a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 f8f5 	bl	8001d0c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001b22:	6a3b      	ldr	r3, [r7, #32]
 8001b24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d07b      	beq.n	8001c24 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d072      	beq.n	8001c1c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b36:	6a3b      	ldr	r3, [r7, #32]
 8001b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d008      	beq.n	8001b52 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b52:	6a3b      	ldr	r3, [r7, #32]
 8001b54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d008      	beq.n	8001b6e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	f043 0302 	orr.w	r3, r3, #2
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d008      	beq.n	8001b8a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	f043 0304 	orr.w	r3, r3, #4
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b8a:	6a3b      	ldr	r3, [r7, #32]
 8001b8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d043      	beq.n	8001c1c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d03e      	beq.n	8001c1c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ba4:	2b60      	cmp	r3, #96	; 0x60
 8001ba6:	d02b      	beq.n	8001c00 <HAL_CAN_IRQHandler+0x32a>
 8001ba8:	2b60      	cmp	r3, #96	; 0x60
 8001baa:	d82e      	bhi.n	8001c0a <HAL_CAN_IRQHandler+0x334>
 8001bac:	2b50      	cmp	r3, #80	; 0x50
 8001bae:	d022      	beq.n	8001bf6 <HAL_CAN_IRQHandler+0x320>
 8001bb0:	2b50      	cmp	r3, #80	; 0x50
 8001bb2:	d82a      	bhi.n	8001c0a <HAL_CAN_IRQHandler+0x334>
 8001bb4:	2b40      	cmp	r3, #64	; 0x40
 8001bb6:	d019      	beq.n	8001bec <HAL_CAN_IRQHandler+0x316>
 8001bb8:	2b40      	cmp	r3, #64	; 0x40
 8001bba:	d826      	bhi.n	8001c0a <HAL_CAN_IRQHandler+0x334>
 8001bbc:	2b30      	cmp	r3, #48	; 0x30
 8001bbe:	d010      	beq.n	8001be2 <HAL_CAN_IRQHandler+0x30c>
 8001bc0:	2b30      	cmp	r3, #48	; 0x30
 8001bc2:	d822      	bhi.n	8001c0a <HAL_CAN_IRQHandler+0x334>
 8001bc4:	2b10      	cmp	r3, #16
 8001bc6:	d002      	beq.n	8001bce <HAL_CAN_IRQHandler+0x2f8>
 8001bc8:	2b20      	cmp	r3, #32
 8001bca:	d005      	beq.n	8001bd8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001bcc:	e01d      	b.n	8001c0a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	f043 0308 	orr.w	r3, r3, #8
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bd6:	e019      	b.n	8001c0c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	f043 0310 	orr.w	r3, r3, #16
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001be0:	e014      	b.n	8001c0c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	f043 0320 	orr.w	r3, r3, #32
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bea:	e00f      	b.n	8001c0c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bf4:	e00a      	b.n	8001c0c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bfe:	e005      	b.n	8001c0c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c08:	e000      	b.n	8001c0c <HAL_CAN_IRQHandler+0x336>
            break;
 8001c0a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	699a      	ldr	r2, [r3, #24]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c1a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2204      	movs	r2, #4
 8001c22:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d008      	beq.n	8001c3c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	431a      	orrs	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f872 	bl	8001d20 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	3728      	adds	r7, #40	; 0x28
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d44:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <__NVIC_SetPriorityGrouping+0x44>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d50:	4013      	ands	r3, r2
 8001d52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d66:	4a04      	ldr	r2, [pc, #16]	; (8001d78 <__NVIC_SetPriorityGrouping+0x44>)
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	60d3      	str	r3, [r2, #12]
}
 8001d6c:	bf00      	nop
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d80:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <__NVIC_GetPriorityGrouping+0x18>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	0a1b      	lsrs	r3, r3, #8
 8001d86:	f003 0307 	and.w	r3, r3, #7
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	db0b      	blt.n	8001dc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	f003 021f 	and.w	r2, r3, #31
 8001db0:	4907      	ldr	r1, [pc, #28]	; (8001dd0 <__NVIC_EnableIRQ+0x38>)
 8001db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db6:	095b      	lsrs	r3, r3, #5
 8001db8:	2001      	movs	r0, #1
 8001dba:	fa00 f202 	lsl.w	r2, r0, r2
 8001dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000e100 	.word	0xe000e100

08001dd4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	db12      	blt.n	8001e0c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	f003 021f 	and.w	r2, r3, #31
 8001dec:	490a      	ldr	r1, [pc, #40]	; (8001e18 <__NVIC_DisableIRQ+0x44>)
 8001dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df2:	095b      	lsrs	r3, r3, #5
 8001df4:	2001      	movs	r0, #1
 8001df6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dfa:	3320      	adds	r3, #32
 8001dfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001e00:	f3bf 8f4f 	dsb	sy
}
 8001e04:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e06:	f3bf 8f6f 	isb	sy
}
 8001e0a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000e100 	.word	0xe000e100

08001e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	6039      	str	r1, [r7, #0]
 8001e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	db0a      	blt.n	8001e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	490c      	ldr	r1, [pc, #48]	; (8001e68 <__NVIC_SetPriority+0x4c>)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	0112      	lsls	r2, r2, #4
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	440b      	add	r3, r1
 8001e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e44:	e00a      	b.n	8001e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	4908      	ldr	r1, [pc, #32]	; (8001e6c <__NVIC_SetPriority+0x50>)
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	3b04      	subs	r3, #4
 8001e54:	0112      	lsls	r2, r2, #4
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	440b      	add	r3, r1
 8001e5a:	761a      	strb	r2, [r3, #24]
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	e000e100 	.word	0xe000e100
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b089      	sub	sp, #36	; 0x24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	f1c3 0307 	rsb	r3, r3, #7
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	bf28      	it	cs
 8001e8e:	2304      	movcs	r3, #4
 8001e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	3304      	adds	r3, #4
 8001e96:	2b06      	cmp	r3, #6
 8001e98:	d902      	bls.n	8001ea0 <NVIC_EncodePriority+0x30>
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3b03      	subs	r3, #3
 8001e9e:	e000      	b.n	8001ea2 <NVIC_EncodePriority+0x32>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43da      	mvns	r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	401a      	ands	r2, r3
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec2:	43d9      	mvns	r1, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec8:	4313      	orrs	r3, r2
         );
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3724      	adds	r7, #36	; 0x24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ee8:	d301      	bcc.n	8001eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eea:	2301      	movs	r3, #1
 8001eec:	e00f      	b.n	8001f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eee:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <SysTick_Config+0x40>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ef6:	210f      	movs	r1, #15
 8001ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8001efc:	f7ff ff8e 	bl	8001e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f00:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <SysTick_Config+0x40>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f06:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <SysTick_Config+0x40>)
 8001f08:	2207      	movs	r2, #7
 8001f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	e000e010 	.word	0xe000e010

08001f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff ff05 	bl	8001d34 <__NVIC_SetPriorityGrouping>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b086      	sub	sp, #24
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	4603      	mov	r3, r0
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
 8001f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f44:	f7ff ff1a 	bl	8001d7c <__NVIC_GetPriorityGrouping>
 8001f48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	68b9      	ldr	r1, [r7, #8]
 8001f4e:	6978      	ldr	r0, [r7, #20]
 8001f50:	f7ff ff8e 	bl	8001e70 <NVIC_EncodePriority>
 8001f54:	4602      	mov	r2, r0
 8001f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff ff5d 	bl	8001e1c <__NVIC_SetPriority>
}
 8001f62:	bf00      	nop
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	4603      	mov	r3, r0
 8001f72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff ff0d 	bl	8001d98 <__NVIC_EnableIRQ>
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff ff1d 	bl	8001dd4 <__NVIC_DisableIRQ>
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff ff94 	bl	8001ed8 <SysTick_Config>
 8001fb0:	4603      	mov	r3, r0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b089      	sub	sp, #36	; 0x24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
 8001fd6:	e16b      	b.n	80022b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fd8:	2201      	movs	r2, #1
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	f040 815a 	bne.w	80022aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d005      	beq.n	800200e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800200a:	2b02      	cmp	r3, #2
 800200c:	d130      	bne.n	8002070 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	2203      	movs	r2, #3
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43db      	mvns	r3, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4013      	ands	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	68da      	ldr	r2, [r3, #12]
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4313      	orrs	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002044:	2201      	movs	r2, #1
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4013      	ands	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	091b      	lsrs	r3, r3, #4
 800205a:	f003 0201 	and.w	r2, r3, #1
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	2b03      	cmp	r3, #3
 800207a:	d017      	beq.n	80020ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	2203      	movs	r2, #3
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4013      	ands	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 0303 	and.w	r3, r3, #3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d123      	bne.n	8002100 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	08da      	lsrs	r2, r3, #3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3208      	adds	r2, #8
 80020c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	220f      	movs	r2, #15
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4013      	ands	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	691a      	ldr	r2, [r3, #16]
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	08da      	lsrs	r2, r3, #3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	3208      	adds	r2, #8
 80020fa:	69b9      	ldr	r1, [r7, #24]
 80020fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	2203      	movs	r2, #3
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 0203 	and.w	r2, r3, #3
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4313      	orrs	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 80b4 	beq.w	80022aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	4b60      	ldr	r3, [pc, #384]	; (80022c8 <HAL_GPIO_Init+0x30c>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214a:	4a5f      	ldr	r2, [pc, #380]	; (80022c8 <HAL_GPIO_Init+0x30c>)
 800214c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002150:	6453      	str	r3, [r2, #68]	; 0x44
 8002152:	4b5d      	ldr	r3, [pc, #372]	; (80022c8 <HAL_GPIO_Init+0x30c>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800215e:	4a5b      	ldr	r2, [pc, #364]	; (80022cc <HAL_GPIO_Init+0x310>)
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	089b      	lsrs	r3, r3, #2
 8002164:	3302      	adds	r3, #2
 8002166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	220f      	movs	r2, #15
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4013      	ands	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a52      	ldr	r2, [pc, #328]	; (80022d0 <HAL_GPIO_Init+0x314>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d02b      	beq.n	80021e2 <HAL_GPIO_Init+0x226>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a51      	ldr	r2, [pc, #324]	; (80022d4 <HAL_GPIO_Init+0x318>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d025      	beq.n	80021de <HAL_GPIO_Init+0x222>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a50      	ldr	r2, [pc, #320]	; (80022d8 <HAL_GPIO_Init+0x31c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d01f      	beq.n	80021da <HAL_GPIO_Init+0x21e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a4f      	ldr	r2, [pc, #316]	; (80022dc <HAL_GPIO_Init+0x320>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d019      	beq.n	80021d6 <HAL_GPIO_Init+0x21a>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a4e      	ldr	r2, [pc, #312]	; (80022e0 <HAL_GPIO_Init+0x324>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d013      	beq.n	80021d2 <HAL_GPIO_Init+0x216>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a4d      	ldr	r2, [pc, #308]	; (80022e4 <HAL_GPIO_Init+0x328>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d00d      	beq.n	80021ce <HAL_GPIO_Init+0x212>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a4c      	ldr	r2, [pc, #304]	; (80022e8 <HAL_GPIO_Init+0x32c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d007      	beq.n	80021ca <HAL_GPIO_Init+0x20e>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a4b      	ldr	r2, [pc, #300]	; (80022ec <HAL_GPIO_Init+0x330>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d101      	bne.n	80021c6 <HAL_GPIO_Init+0x20a>
 80021c2:	2307      	movs	r3, #7
 80021c4:	e00e      	b.n	80021e4 <HAL_GPIO_Init+0x228>
 80021c6:	2308      	movs	r3, #8
 80021c8:	e00c      	b.n	80021e4 <HAL_GPIO_Init+0x228>
 80021ca:	2306      	movs	r3, #6
 80021cc:	e00a      	b.n	80021e4 <HAL_GPIO_Init+0x228>
 80021ce:	2305      	movs	r3, #5
 80021d0:	e008      	b.n	80021e4 <HAL_GPIO_Init+0x228>
 80021d2:	2304      	movs	r3, #4
 80021d4:	e006      	b.n	80021e4 <HAL_GPIO_Init+0x228>
 80021d6:	2303      	movs	r3, #3
 80021d8:	e004      	b.n	80021e4 <HAL_GPIO_Init+0x228>
 80021da:	2302      	movs	r3, #2
 80021dc:	e002      	b.n	80021e4 <HAL_GPIO_Init+0x228>
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <HAL_GPIO_Init+0x228>
 80021e2:	2300      	movs	r3, #0
 80021e4:	69fa      	ldr	r2, [r7, #28]
 80021e6:	f002 0203 	and.w	r2, r2, #3
 80021ea:	0092      	lsls	r2, r2, #2
 80021ec:	4093      	lsls	r3, r2
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021f4:	4935      	ldr	r1, [pc, #212]	; (80022cc <HAL_GPIO_Init+0x310>)
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	089b      	lsrs	r3, r3, #2
 80021fa:	3302      	adds	r3, #2
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002202:	4b3b      	ldr	r3, [pc, #236]	; (80022f0 <HAL_GPIO_Init+0x334>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	43db      	mvns	r3, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4013      	ands	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002226:	4a32      	ldr	r2, [pc, #200]	; (80022f0 <HAL_GPIO_Init+0x334>)
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800222c:	4b30      	ldr	r3, [pc, #192]	; (80022f0 <HAL_GPIO_Init+0x334>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	43db      	mvns	r3, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002250:	4a27      	ldr	r2, [pc, #156]	; (80022f0 <HAL_GPIO_Init+0x334>)
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002256:	4b26      	ldr	r3, [pc, #152]	; (80022f0 <HAL_GPIO_Init+0x334>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	43db      	mvns	r3, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4013      	ands	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	4313      	orrs	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800227a:	4a1d      	ldr	r2, [pc, #116]	; (80022f0 <HAL_GPIO_Init+0x334>)
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002280:	4b1b      	ldr	r3, [pc, #108]	; (80022f0 <HAL_GPIO_Init+0x334>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022a4:	4a12      	ldr	r2, [pc, #72]	; (80022f0 <HAL_GPIO_Init+0x334>)
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	3301      	adds	r3, #1
 80022ae:	61fb      	str	r3, [r7, #28]
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	2b0f      	cmp	r3, #15
 80022b4:	f67f ae90 	bls.w	8001fd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022b8:	bf00      	nop
 80022ba:	bf00      	nop
 80022bc:	3724      	adds	r7, #36	; 0x24
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	40023800 	.word	0x40023800
 80022cc:	40013800 	.word	0x40013800
 80022d0:	40020000 	.word	0x40020000
 80022d4:	40020400 	.word	0x40020400
 80022d8:	40020800 	.word	0x40020800
 80022dc:	40020c00 	.word	0x40020c00
 80022e0:	40021000 	.word	0x40021000
 80022e4:	40021400 	.word	0x40021400
 80022e8:	40021800 	.word	0x40021800
 80022ec:	40021c00 	.word	0x40021c00
 80022f0:	40013c00 	.word	0x40013c00

080022f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691a      	ldr	r2, [r3, #16]
 8002304:	887b      	ldrh	r3, [r7, #2]
 8002306:	4013      	ands	r3, r2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d002      	beq.n	8002312 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800230c:	2301      	movs	r3, #1
 800230e:	73fb      	strb	r3, [r7, #15]
 8002310:	e001      	b.n	8002316 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002312:	2300      	movs	r3, #0
 8002314:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002316:	7bfb      	ldrb	r3, [r7, #15]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	807b      	strh	r3, [r7, #2]
 8002330:	4613      	mov	r3, r2
 8002332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002334:	787b      	ldrb	r3, [r7, #1]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800233a:	887a      	ldrh	r2, [r7, #2]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002340:	e003      	b.n	800234a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002342:	887b      	ldrh	r3, [r7, #2]
 8002344:	041a      	lsls	r2, r3, #16
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	619a      	str	r2, [r3, #24]
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002356:	b480      	push	{r7}
 8002358:	b085      	sub	sp, #20
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	460b      	mov	r3, r1
 8002360:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002368:	887a      	ldrh	r2, [r7, #2]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	4013      	ands	r3, r2
 800236e:	041a      	lsls	r2, r3, #16
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	43d9      	mvns	r1, r3
 8002374:	887b      	ldrh	r3, [r7, #2]
 8002376:	400b      	ands	r3, r1
 8002378:	431a      	orrs	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	619a      	str	r2, [r3, #24]
}
 800237e:	bf00      	nop
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
	...

0800238c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002396:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002398:	695a      	ldr	r2, [r3, #20]
 800239a:	88fb      	ldrh	r3, [r7, #6]
 800239c:	4013      	ands	r3, r2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d006      	beq.n	80023b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023a2:	4a05      	ldr	r2, [pc, #20]	; (80023b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023a4:	88fb      	ldrh	r3, [r7, #6]
 80023a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023a8:	88fb      	ldrh	r3, [r7, #6]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe f996 	bl	80006dc <HAL_GPIO_EXTI_Callback>
  }
}
 80023b0:	bf00      	nop
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40013c00 	.word	0x40013c00

080023bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e267      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d075      	beq.n	80024c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023da:	4b88      	ldr	r3, [pc, #544]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 030c 	and.w	r3, r3, #12
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	d00c      	beq.n	8002400 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023e6:	4b85      	ldr	r3, [pc, #532]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023ee:	2b08      	cmp	r3, #8
 80023f0:	d112      	bne.n	8002418 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023f2:	4b82      	ldr	r3, [pc, #520]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023fe:	d10b      	bne.n	8002418 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002400:	4b7e      	ldr	r3, [pc, #504]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d05b      	beq.n	80024c4 <HAL_RCC_OscConfig+0x108>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d157      	bne.n	80024c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e242      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002420:	d106      	bne.n	8002430 <HAL_RCC_OscConfig+0x74>
 8002422:	4b76      	ldr	r3, [pc, #472]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a75      	ldr	r2, [pc, #468]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 8002428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	e01d      	b.n	800246c <HAL_RCC_OscConfig+0xb0>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002438:	d10c      	bne.n	8002454 <HAL_RCC_OscConfig+0x98>
 800243a:	4b70      	ldr	r3, [pc, #448]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a6f      	ldr	r2, [pc, #444]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 8002440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	4b6d      	ldr	r3, [pc, #436]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a6c      	ldr	r2, [pc, #432]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 800244c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	e00b      	b.n	800246c <HAL_RCC_OscConfig+0xb0>
 8002454:	4b69      	ldr	r3, [pc, #420]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a68      	ldr	r2, [pc, #416]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 800245a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800245e:	6013      	str	r3, [r2, #0]
 8002460:	4b66      	ldr	r3, [pc, #408]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a65      	ldr	r2, [pc, #404]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 8002466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800246a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d013      	beq.n	800249c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002474:	f7fe fdf0 	bl	8001058 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800247c:	f7fe fdec 	bl	8001058 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b64      	cmp	r3, #100	; 0x64
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e207      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248e:	4b5b      	ldr	r3, [pc, #364]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0f0      	beq.n	800247c <HAL_RCC_OscConfig+0xc0>
 800249a:	e014      	b.n	80024c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249c:	f7fe fddc 	bl	8001058 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024a4:	f7fe fdd8 	bl	8001058 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b64      	cmp	r3, #100	; 0x64
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e1f3      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024b6:	4b51      	ldr	r3, [pc, #324]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f0      	bne.n	80024a4 <HAL_RCC_OscConfig+0xe8>
 80024c2:	e000      	b.n	80024c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d063      	beq.n	800259a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024d2:	4b4a      	ldr	r3, [pc, #296]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 030c 	and.w	r3, r3, #12
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00b      	beq.n	80024f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024de:	4b47      	ldr	r3, [pc, #284]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024e6:	2b08      	cmp	r3, #8
 80024e8:	d11c      	bne.n	8002524 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ea:	4b44      	ldr	r3, [pc, #272]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d116      	bne.n	8002524 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024f6:	4b41      	ldr	r3, [pc, #260]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d005      	beq.n	800250e <HAL_RCC_OscConfig+0x152>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d001      	beq.n	800250e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e1c7      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800250e:	4b3b      	ldr	r3, [pc, #236]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	4937      	ldr	r1, [pc, #220]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 800251e:	4313      	orrs	r3, r2
 8002520:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002522:	e03a      	b.n	800259a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d020      	beq.n	800256e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800252c:	4b34      	ldr	r3, [pc, #208]	; (8002600 <HAL_RCC_OscConfig+0x244>)
 800252e:	2201      	movs	r2, #1
 8002530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002532:	f7fe fd91 	bl	8001058 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800253a:	f7fe fd8d 	bl	8001058 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e1a8      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800254c:	4b2b      	ldr	r3, [pc, #172]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0f0      	beq.n	800253a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002558:	4b28      	ldr	r3, [pc, #160]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	4925      	ldr	r1, [pc, #148]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 8002568:	4313      	orrs	r3, r2
 800256a:	600b      	str	r3, [r1, #0]
 800256c:	e015      	b.n	800259a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800256e:	4b24      	ldr	r3, [pc, #144]	; (8002600 <HAL_RCC_OscConfig+0x244>)
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002574:	f7fe fd70 	bl	8001058 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800257c:	f7fe fd6c 	bl	8001058 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e187      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800258e:	4b1b      	ldr	r3, [pc, #108]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d036      	beq.n	8002614 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d016      	beq.n	80025dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ae:	4b15      	ldr	r3, [pc, #84]	; (8002604 <HAL_RCC_OscConfig+0x248>)
 80025b0:	2201      	movs	r2, #1
 80025b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b4:	f7fe fd50 	bl	8001058 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025bc:	f7fe fd4c 	bl	8001058 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e167      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ce:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <HAL_RCC_OscConfig+0x240>)
 80025d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0f0      	beq.n	80025bc <HAL_RCC_OscConfig+0x200>
 80025da:	e01b      	b.n	8002614 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025dc:	4b09      	ldr	r3, [pc, #36]	; (8002604 <HAL_RCC_OscConfig+0x248>)
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e2:	f7fe fd39 	bl	8001058 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e8:	e00e      	b.n	8002608 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ea:	f7fe fd35 	bl	8001058 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d907      	bls.n	8002608 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e150      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
 80025fc:	40023800 	.word	0x40023800
 8002600:	42470000 	.word	0x42470000
 8002604:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002608:	4b88      	ldr	r3, [pc, #544]	; (800282c <HAL_RCC_OscConfig+0x470>)
 800260a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1ea      	bne.n	80025ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 8097 	beq.w	8002750 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002622:	2300      	movs	r3, #0
 8002624:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002626:	4b81      	ldr	r3, [pc, #516]	; (800282c <HAL_RCC_OscConfig+0x470>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10f      	bne.n	8002652 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	4b7d      	ldr	r3, [pc, #500]	; (800282c <HAL_RCC_OscConfig+0x470>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	4a7c      	ldr	r2, [pc, #496]	; (800282c <HAL_RCC_OscConfig+0x470>)
 800263c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002640:	6413      	str	r3, [r2, #64]	; 0x40
 8002642:	4b7a      	ldr	r3, [pc, #488]	; (800282c <HAL_RCC_OscConfig+0x470>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264a:	60bb      	str	r3, [r7, #8]
 800264c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800264e:	2301      	movs	r3, #1
 8002650:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002652:	4b77      	ldr	r3, [pc, #476]	; (8002830 <HAL_RCC_OscConfig+0x474>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265a:	2b00      	cmp	r3, #0
 800265c:	d118      	bne.n	8002690 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800265e:	4b74      	ldr	r3, [pc, #464]	; (8002830 <HAL_RCC_OscConfig+0x474>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a73      	ldr	r2, [pc, #460]	; (8002830 <HAL_RCC_OscConfig+0x474>)
 8002664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800266a:	f7fe fcf5 	bl	8001058 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002672:	f7fe fcf1 	bl	8001058 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e10c      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002684:	4b6a      	ldr	r3, [pc, #424]	; (8002830 <HAL_RCC_OscConfig+0x474>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0f0      	beq.n	8002672 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d106      	bne.n	80026a6 <HAL_RCC_OscConfig+0x2ea>
 8002698:	4b64      	ldr	r3, [pc, #400]	; (800282c <HAL_RCC_OscConfig+0x470>)
 800269a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269c:	4a63      	ldr	r2, [pc, #396]	; (800282c <HAL_RCC_OscConfig+0x470>)
 800269e:	f043 0301 	orr.w	r3, r3, #1
 80026a2:	6713      	str	r3, [r2, #112]	; 0x70
 80026a4:	e01c      	b.n	80026e0 <HAL_RCC_OscConfig+0x324>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	2b05      	cmp	r3, #5
 80026ac:	d10c      	bne.n	80026c8 <HAL_RCC_OscConfig+0x30c>
 80026ae:	4b5f      	ldr	r3, [pc, #380]	; (800282c <HAL_RCC_OscConfig+0x470>)
 80026b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b2:	4a5e      	ldr	r2, [pc, #376]	; (800282c <HAL_RCC_OscConfig+0x470>)
 80026b4:	f043 0304 	orr.w	r3, r3, #4
 80026b8:	6713      	str	r3, [r2, #112]	; 0x70
 80026ba:	4b5c      	ldr	r3, [pc, #368]	; (800282c <HAL_RCC_OscConfig+0x470>)
 80026bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026be:	4a5b      	ldr	r2, [pc, #364]	; (800282c <HAL_RCC_OscConfig+0x470>)
 80026c0:	f043 0301 	orr.w	r3, r3, #1
 80026c4:	6713      	str	r3, [r2, #112]	; 0x70
 80026c6:	e00b      	b.n	80026e0 <HAL_RCC_OscConfig+0x324>
 80026c8:	4b58      	ldr	r3, [pc, #352]	; (800282c <HAL_RCC_OscConfig+0x470>)
 80026ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026cc:	4a57      	ldr	r2, [pc, #348]	; (800282c <HAL_RCC_OscConfig+0x470>)
 80026ce:	f023 0301 	bic.w	r3, r3, #1
 80026d2:	6713      	str	r3, [r2, #112]	; 0x70
 80026d4:	4b55      	ldr	r3, [pc, #340]	; (800282c <HAL_RCC_OscConfig+0x470>)
 80026d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d8:	4a54      	ldr	r2, [pc, #336]	; (800282c <HAL_RCC_OscConfig+0x470>)
 80026da:	f023 0304 	bic.w	r3, r3, #4
 80026de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d015      	beq.n	8002714 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e8:	f7fe fcb6 	bl	8001058 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ee:	e00a      	b.n	8002706 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026f0:	f7fe fcb2 	bl	8001058 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fe:	4293      	cmp	r3, r2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e0cb      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002706:	4b49      	ldr	r3, [pc, #292]	; (800282c <HAL_RCC_OscConfig+0x470>)
 8002708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0ee      	beq.n	80026f0 <HAL_RCC_OscConfig+0x334>
 8002712:	e014      	b.n	800273e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002714:	f7fe fca0 	bl	8001058 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800271a:	e00a      	b.n	8002732 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800271c:	f7fe fc9c 	bl	8001058 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	f241 3288 	movw	r2, #5000	; 0x1388
 800272a:	4293      	cmp	r3, r2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e0b5      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002732:	4b3e      	ldr	r3, [pc, #248]	; (800282c <HAL_RCC_OscConfig+0x470>)
 8002734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1ee      	bne.n	800271c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800273e:	7dfb      	ldrb	r3, [r7, #23]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d105      	bne.n	8002750 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002744:	4b39      	ldr	r3, [pc, #228]	; (800282c <HAL_RCC_OscConfig+0x470>)
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	4a38      	ldr	r2, [pc, #224]	; (800282c <HAL_RCC_OscConfig+0x470>)
 800274a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800274e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 80a1 	beq.w	800289c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800275a:	4b34      	ldr	r3, [pc, #208]	; (800282c <HAL_RCC_OscConfig+0x470>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 030c 	and.w	r3, r3, #12
 8002762:	2b08      	cmp	r3, #8
 8002764:	d05c      	beq.n	8002820 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	2b02      	cmp	r3, #2
 800276c:	d141      	bne.n	80027f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800276e:	4b31      	ldr	r3, [pc, #196]	; (8002834 <HAL_RCC_OscConfig+0x478>)
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002774:	f7fe fc70 	bl	8001058 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800277c:	f7fe fc6c 	bl	8001058 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e087      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800278e:	4b27      	ldr	r3, [pc, #156]	; (800282c <HAL_RCC_OscConfig+0x470>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1f0      	bne.n	800277c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69da      	ldr	r2, [r3, #28]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	019b      	lsls	r3, r3, #6
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b0:	085b      	lsrs	r3, r3, #1
 80027b2:	3b01      	subs	r3, #1
 80027b4:	041b      	lsls	r3, r3, #16
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027bc:	061b      	lsls	r3, r3, #24
 80027be:	491b      	ldr	r1, [pc, #108]	; (800282c <HAL_RCC_OscConfig+0x470>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027c4:	4b1b      	ldr	r3, [pc, #108]	; (8002834 <HAL_RCC_OscConfig+0x478>)
 80027c6:	2201      	movs	r2, #1
 80027c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ca:	f7fe fc45 	bl	8001058 <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027d2:	f7fe fc41 	bl	8001058 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e05c      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027e4:	4b11      	ldr	r3, [pc, #68]	; (800282c <HAL_RCC_OscConfig+0x470>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0f0      	beq.n	80027d2 <HAL_RCC_OscConfig+0x416>
 80027f0:	e054      	b.n	800289c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f2:	4b10      	ldr	r3, [pc, #64]	; (8002834 <HAL_RCC_OscConfig+0x478>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f8:	f7fe fc2e 	bl	8001058 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002800:	f7fe fc2a 	bl	8001058 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e045      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002812:	4b06      	ldr	r3, [pc, #24]	; (800282c <HAL_RCC_OscConfig+0x470>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f0      	bne.n	8002800 <HAL_RCC_OscConfig+0x444>
 800281e:	e03d      	b.n	800289c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d107      	bne.n	8002838 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e038      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
 800282c:	40023800 	.word	0x40023800
 8002830:	40007000 	.word	0x40007000
 8002834:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002838:	4b1b      	ldr	r3, [pc, #108]	; (80028a8 <HAL_RCC_OscConfig+0x4ec>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d028      	beq.n	8002898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002850:	429a      	cmp	r2, r3
 8002852:	d121      	bne.n	8002898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800285e:	429a      	cmp	r2, r3
 8002860:	d11a      	bne.n	8002898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002868:	4013      	ands	r3, r2
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800286e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002870:	4293      	cmp	r3, r2
 8002872:	d111      	bne.n	8002898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287e:	085b      	lsrs	r3, r3, #1
 8002880:	3b01      	subs	r3, #1
 8002882:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002884:	429a      	cmp	r2, r3
 8002886:	d107      	bne.n	8002898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002892:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002894:	429a      	cmp	r2, r3
 8002896:	d001      	beq.n	800289c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e000      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3718      	adds	r7, #24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40023800 	.word	0x40023800

080028ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e0cc      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028c0:	4b68      	ldr	r3, [pc, #416]	; (8002a64 <HAL_RCC_ClockConfig+0x1b8>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d90c      	bls.n	80028e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ce:	4b65      	ldr	r3, [pc, #404]	; (8002a64 <HAL_RCC_ClockConfig+0x1b8>)
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d6:	4b63      	ldr	r3, [pc, #396]	; (8002a64 <HAL_RCC_ClockConfig+0x1b8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d001      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e0b8      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d020      	beq.n	8002936 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d005      	beq.n	800290c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002900:	4b59      	ldr	r3, [pc, #356]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	4a58      	ldr	r2, [pc, #352]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002906:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800290a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0308 	and.w	r3, r3, #8
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002918:	4b53      	ldr	r3, [pc, #332]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	4a52      	ldr	r2, [pc, #328]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 800291e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002922:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002924:	4b50      	ldr	r3, [pc, #320]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	494d      	ldr	r1, [pc, #308]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	4313      	orrs	r3, r2
 8002934:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d044      	beq.n	80029cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d107      	bne.n	800295a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294a:	4b47      	ldr	r3, [pc, #284]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d119      	bne.n	800298a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e07f      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b02      	cmp	r3, #2
 8002960:	d003      	beq.n	800296a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002966:	2b03      	cmp	r3, #3
 8002968:	d107      	bne.n	800297a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800296a:	4b3f      	ldr	r3, [pc, #252]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d109      	bne.n	800298a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e06f      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800297a:	4b3b      	ldr	r3, [pc, #236]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e067      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800298a:	4b37      	ldr	r3, [pc, #220]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f023 0203 	bic.w	r2, r3, #3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	4934      	ldr	r1, [pc, #208]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002998:	4313      	orrs	r3, r2
 800299a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800299c:	f7fe fb5c 	bl	8001058 <HAL_GetTick>
 80029a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a2:	e00a      	b.n	80029ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a4:	f7fe fb58 	bl	8001058 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e04f      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ba:	4b2b      	ldr	r3, [pc, #172]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 020c 	and.w	r2, r3, #12
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d1eb      	bne.n	80029a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029cc:	4b25      	ldr	r3, [pc, #148]	; (8002a64 <HAL_RCC_ClockConfig+0x1b8>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d20c      	bcs.n	80029f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029da:	4b22      	ldr	r3, [pc, #136]	; (8002a64 <HAL_RCC_ClockConfig+0x1b8>)
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e2:	4b20      	ldr	r3, [pc, #128]	; (8002a64 <HAL_RCC_ClockConfig+0x1b8>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d001      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e032      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d008      	beq.n	8002a12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a00:	4b19      	ldr	r3, [pc, #100]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	4916      	ldr	r1, [pc, #88]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0308 	and.w	r3, r3, #8
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d009      	beq.n	8002a32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a1e:	4b12      	ldr	r3, [pc, #72]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	490e      	ldr	r1, [pc, #56]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a32:	f000 f821 	bl	8002a78 <HAL_RCC_GetSysClockFreq>
 8002a36:	4602      	mov	r2, r0
 8002a38:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	091b      	lsrs	r3, r3, #4
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	490a      	ldr	r1, [pc, #40]	; (8002a6c <HAL_RCC_ClockConfig+0x1c0>)
 8002a44:	5ccb      	ldrb	r3, [r1, r3]
 8002a46:	fa22 f303 	lsr.w	r3, r2, r3
 8002a4a:	4a09      	ldr	r2, [pc, #36]	; (8002a70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a4e:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <HAL_RCC_ClockConfig+0x1c8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fe fabc 	bl	8000fd0 <HAL_InitTick>

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40023c00 	.word	0x40023c00
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	080035f8 	.word	0x080035f8
 8002a70:	20000004 	.word	0x20000004
 8002a74:	20000008 	.word	0x20000008

08002a78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a7c:	b094      	sub	sp, #80	; 0x50
 8002a7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	647b      	str	r3, [r7, #68]	; 0x44
 8002a84:	2300      	movs	r3, #0
 8002a86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a88:	2300      	movs	r3, #0
 8002a8a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a90:	4b79      	ldr	r3, [pc, #484]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 030c 	and.w	r3, r3, #12
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	d00d      	beq.n	8002ab8 <HAL_RCC_GetSysClockFreq+0x40>
 8002a9c:	2b08      	cmp	r3, #8
 8002a9e:	f200 80e1 	bhi.w	8002c64 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d002      	beq.n	8002aac <HAL_RCC_GetSysClockFreq+0x34>
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	d003      	beq.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002aaa:	e0db      	b.n	8002c64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002aac:	4b73      	ldr	r3, [pc, #460]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x204>)
 8002aae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ab0:	e0db      	b.n	8002c6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ab2:	4b73      	ldr	r3, [pc, #460]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ab4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ab6:	e0d8      	b.n	8002c6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ab8:	4b6f      	ldr	r3, [pc, #444]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ac0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ac2:	4b6d      	ldr	r3, [pc, #436]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d063      	beq.n	8002b96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ace:	4b6a      	ldr	r3, [pc, #424]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	099b      	lsrs	r3, r3, #6
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ad8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ae0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ae6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002aea:	4622      	mov	r2, r4
 8002aec:	462b      	mov	r3, r5
 8002aee:	f04f 0000 	mov.w	r0, #0
 8002af2:	f04f 0100 	mov.w	r1, #0
 8002af6:	0159      	lsls	r1, r3, #5
 8002af8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002afc:	0150      	lsls	r0, r2, #5
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	4621      	mov	r1, r4
 8002b04:	1a51      	subs	r1, r2, r1
 8002b06:	6139      	str	r1, [r7, #16]
 8002b08:	4629      	mov	r1, r5
 8002b0a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b0e:	617b      	str	r3, [r7, #20]
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	f04f 0300 	mov.w	r3, #0
 8002b18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b1c:	4659      	mov	r1, fp
 8002b1e:	018b      	lsls	r3, r1, #6
 8002b20:	4651      	mov	r1, sl
 8002b22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b26:	4651      	mov	r1, sl
 8002b28:	018a      	lsls	r2, r1, #6
 8002b2a:	4651      	mov	r1, sl
 8002b2c:	ebb2 0801 	subs.w	r8, r2, r1
 8002b30:	4659      	mov	r1, fp
 8002b32:	eb63 0901 	sbc.w	r9, r3, r1
 8002b36:	f04f 0200 	mov.w	r2, #0
 8002b3a:	f04f 0300 	mov.w	r3, #0
 8002b3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b4a:	4690      	mov	r8, r2
 8002b4c:	4699      	mov	r9, r3
 8002b4e:	4623      	mov	r3, r4
 8002b50:	eb18 0303 	adds.w	r3, r8, r3
 8002b54:	60bb      	str	r3, [r7, #8]
 8002b56:	462b      	mov	r3, r5
 8002b58:	eb49 0303 	adc.w	r3, r9, r3
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	f04f 0200 	mov.w	r2, #0
 8002b62:	f04f 0300 	mov.w	r3, #0
 8002b66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b6a:	4629      	mov	r1, r5
 8002b6c:	024b      	lsls	r3, r1, #9
 8002b6e:	4621      	mov	r1, r4
 8002b70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b74:	4621      	mov	r1, r4
 8002b76:	024a      	lsls	r2, r1, #9
 8002b78:	4610      	mov	r0, r2
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b7e:	2200      	movs	r2, #0
 8002b80:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b88:	f7fd fb1e 	bl	80001c8 <__aeabi_uldivmod>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4613      	mov	r3, r2
 8002b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b94:	e058      	b.n	8002c48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b96:	4b38      	ldr	r3, [pc, #224]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	099b      	lsrs	r3, r3, #6
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ba6:	623b      	str	r3, [r7, #32]
 8002ba8:	2300      	movs	r3, #0
 8002baa:	627b      	str	r3, [r7, #36]	; 0x24
 8002bac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002bb0:	4642      	mov	r2, r8
 8002bb2:	464b      	mov	r3, r9
 8002bb4:	f04f 0000 	mov.w	r0, #0
 8002bb8:	f04f 0100 	mov.w	r1, #0
 8002bbc:	0159      	lsls	r1, r3, #5
 8002bbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bc2:	0150      	lsls	r0, r2, #5
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4641      	mov	r1, r8
 8002bca:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bce:	4649      	mov	r1, r9
 8002bd0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bd4:	f04f 0200 	mov.w	r2, #0
 8002bd8:	f04f 0300 	mov.w	r3, #0
 8002bdc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002be0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002be4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002be8:	ebb2 040a 	subs.w	r4, r2, sl
 8002bec:	eb63 050b 	sbc.w	r5, r3, fp
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	f04f 0300 	mov.w	r3, #0
 8002bf8:	00eb      	lsls	r3, r5, #3
 8002bfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bfe:	00e2      	lsls	r2, r4, #3
 8002c00:	4614      	mov	r4, r2
 8002c02:	461d      	mov	r5, r3
 8002c04:	4643      	mov	r3, r8
 8002c06:	18e3      	adds	r3, r4, r3
 8002c08:	603b      	str	r3, [r7, #0]
 8002c0a:	464b      	mov	r3, r9
 8002c0c:	eb45 0303 	adc.w	r3, r5, r3
 8002c10:	607b      	str	r3, [r7, #4]
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	f04f 0300 	mov.w	r3, #0
 8002c1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c1e:	4629      	mov	r1, r5
 8002c20:	028b      	lsls	r3, r1, #10
 8002c22:	4621      	mov	r1, r4
 8002c24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c28:	4621      	mov	r1, r4
 8002c2a:	028a      	lsls	r2, r1, #10
 8002c2c:	4610      	mov	r0, r2
 8002c2e:	4619      	mov	r1, r3
 8002c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c32:	2200      	movs	r2, #0
 8002c34:	61bb      	str	r3, [r7, #24]
 8002c36:	61fa      	str	r2, [r7, #28]
 8002c38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c3c:	f7fd fac4 	bl	80001c8 <__aeabi_uldivmod>
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	4613      	mov	r3, r2
 8002c46:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c48:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	0c1b      	lsrs	r3, r3, #16
 8002c4e:	f003 0303 	and.w	r3, r3, #3
 8002c52:	3301      	adds	r3, #1
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c62:	e002      	b.n	8002c6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c64:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x204>)
 8002c66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3750      	adds	r7, #80	; 0x50
 8002c70:	46bd      	mov	sp, r7
 8002c72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c76:	bf00      	nop
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	00f42400 	.word	0x00f42400
 8002c80:	007a1200 	.word	0x007a1200

08002c84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e041      	b.n	8002d1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d106      	bne.n	8002cb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7fe f8c0 	bl	8000e30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	f000 fa96 	bl	80031f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d001      	beq.n	8002d3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e04e      	b.n	8002dda <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f042 0201 	orr.w	r2, r2, #1
 8002d52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a23      	ldr	r2, [pc, #140]	; (8002de8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d022      	beq.n	8002da4 <HAL_TIM_Base_Start_IT+0x80>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d66:	d01d      	beq.n	8002da4 <HAL_TIM_Base_Start_IT+0x80>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a1f      	ldr	r2, [pc, #124]	; (8002dec <HAL_TIM_Base_Start_IT+0xc8>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d018      	beq.n	8002da4 <HAL_TIM_Base_Start_IT+0x80>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a1e      	ldr	r2, [pc, #120]	; (8002df0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d013      	beq.n	8002da4 <HAL_TIM_Base_Start_IT+0x80>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a1c      	ldr	r2, [pc, #112]	; (8002df4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d00e      	beq.n	8002da4 <HAL_TIM_Base_Start_IT+0x80>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a1b      	ldr	r2, [pc, #108]	; (8002df8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d009      	beq.n	8002da4 <HAL_TIM_Base_Start_IT+0x80>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a19      	ldr	r2, [pc, #100]	; (8002dfc <HAL_TIM_Base_Start_IT+0xd8>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d004      	beq.n	8002da4 <HAL_TIM_Base_Start_IT+0x80>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a18      	ldr	r2, [pc, #96]	; (8002e00 <HAL_TIM_Base_Start_IT+0xdc>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d111      	bne.n	8002dc8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2b06      	cmp	r3, #6
 8002db4:	d010      	beq.n	8002dd8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f042 0201 	orr.w	r2, r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dc6:	e007      	b.n	8002dd8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0201 	orr.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40010000 	.word	0x40010000
 8002dec:	40000400 	.word	0x40000400
 8002df0:	40000800 	.word	0x40000800
 8002df4:	40000c00 	.word	0x40000c00
 8002df8:	40010400 	.word	0x40010400
 8002dfc:	40014000 	.word	0x40014000
 8002e00:	40001800 	.word	0x40001800

08002e04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d122      	bne.n	8002e60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d11b      	bne.n	8002e60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f06f 0202 	mvn.w	r2, #2
 8002e30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f9b5 	bl	80031b6 <HAL_TIM_IC_CaptureCallback>
 8002e4c:	e005      	b.n	8002e5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f9a7 	bl	80031a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f9b8 	bl	80031ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	f003 0304 	and.w	r3, r3, #4
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d122      	bne.n	8002eb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b04      	cmp	r3, #4
 8002e7a:	d11b      	bne.n	8002eb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f06f 0204 	mvn.w	r2, #4
 8002e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2202      	movs	r2, #2
 8002e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f98b 	bl	80031b6 <HAL_TIM_IC_CaptureCallback>
 8002ea0:	e005      	b.n	8002eae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f97d 	bl	80031a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 f98e 	bl	80031ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	d122      	bne.n	8002f08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d11b      	bne.n	8002f08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f06f 0208 	mvn.w	r2, #8
 8002ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2204      	movs	r2, #4
 8002ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f961 	bl	80031b6 <HAL_TIM_IC_CaptureCallback>
 8002ef4:	e005      	b.n	8002f02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f953 	bl	80031a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 f964 	bl	80031ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	f003 0310 	and.w	r3, r3, #16
 8002f12:	2b10      	cmp	r3, #16
 8002f14:	d122      	bne.n	8002f5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	f003 0310 	and.w	r3, r3, #16
 8002f20:	2b10      	cmp	r3, #16
 8002f22:	d11b      	bne.n	8002f5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f06f 0210 	mvn.w	r2, #16
 8002f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2208      	movs	r2, #8
 8002f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f937 	bl	80031b6 <HAL_TIM_IC_CaptureCallback>
 8002f48:	e005      	b.n	8002f56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f929 	bl	80031a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 f93a 	bl	80031ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d10e      	bne.n	8002f88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d107      	bne.n	8002f88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f06f 0201 	mvn.w	r2, #1
 8002f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7fd fccc 	bl	8000920 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f92:	2b80      	cmp	r3, #128	; 0x80
 8002f94:	d10e      	bne.n	8002fb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa0:	2b80      	cmp	r3, #128	; 0x80
 8002fa2:	d107      	bne.n	8002fb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 fae0 	bl	8003574 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fbe:	2b40      	cmp	r3, #64	; 0x40
 8002fc0:	d10e      	bne.n	8002fe0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fcc:	2b40      	cmp	r3, #64	; 0x40
 8002fce:	d107      	bne.n	8002fe0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f8ff 	bl	80031de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	f003 0320 	and.w	r3, r3, #32
 8002fea:	2b20      	cmp	r3, #32
 8002fec:	d10e      	bne.n	800300c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	f003 0320 	and.w	r3, r3, #32
 8002ff8:	2b20      	cmp	r3, #32
 8002ffa:	d107      	bne.n	800300c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f06f 0220 	mvn.w	r2, #32
 8003004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 faaa 	bl	8003560 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800300c:	bf00      	nop
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800301e:	2300      	movs	r3, #0
 8003020:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_TIM_ConfigClockSource+0x1c>
 800302c:	2302      	movs	r3, #2
 800302e:	e0b4      	b.n	800319a <HAL_TIM_ConfigClockSource+0x186>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2202      	movs	r2, #2
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800304e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003056:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003068:	d03e      	beq.n	80030e8 <HAL_TIM_ConfigClockSource+0xd4>
 800306a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800306e:	f200 8087 	bhi.w	8003180 <HAL_TIM_ConfigClockSource+0x16c>
 8003072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003076:	f000 8086 	beq.w	8003186 <HAL_TIM_ConfigClockSource+0x172>
 800307a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800307e:	d87f      	bhi.n	8003180 <HAL_TIM_ConfigClockSource+0x16c>
 8003080:	2b70      	cmp	r3, #112	; 0x70
 8003082:	d01a      	beq.n	80030ba <HAL_TIM_ConfigClockSource+0xa6>
 8003084:	2b70      	cmp	r3, #112	; 0x70
 8003086:	d87b      	bhi.n	8003180 <HAL_TIM_ConfigClockSource+0x16c>
 8003088:	2b60      	cmp	r3, #96	; 0x60
 800308a:	d050      	beq.n	800312e <HAL_TIM_ConfigClockSource+0x11a>
 800308c:	2b60      	cmp	r3, #96	; 0x60
 800308e:	d877      	bhi.n	8003180 <HAL_TIM_ConfigClockSource+0x16c>
 8003090:	2b50      	cmp	r3, #80	; 0x50
 8003092:	d03c      	beq.n	800310e <HAL_TIM_ConfigClockSource+0xfa>
 8003094:	2b50      	cmp	r3, #80	; 0x50
 8003096:	d873      	bhi.n	8003180 <HAL_TIM_ConfigClockSource+0x16c>
 8003098:	2b40      	cmp	r3, #64	; 0x40
 800309a:	d058      	beq.n	800314e <HAL_TIM_ConfigClockSource+0x13a>
 800309c:	2b40      	cmp	r3, #64	; 0x40
 800309e:	d86f      	bhi.n	8003180 <HAL_TIM_ConfigClockSource+0x16c>
 80030a0:	2b30      	cmp	r3, #48	; 0x30
 80030a2:	d064      	beq.n	800316e <HAL_TIM_ConfigClockSource+0x15a>
 80030a4:	2b30      	cmp	r3, #48	; 0x30
 80030a6:	d86b      	bhi.n	8003180 <HAL_TIM_ConfigClockSource+0x16c>
 80030a8:	2b20      	cmp	r3, #32
 80030aa:	d060      	beq.n	800316e <HAL_TIM_ConfigClockSource+0x15a>
 80030ac:	2b20      	cmp	r3, #32
 80030ae:	d867      	bhi.n	8003180 <HAL_TIM_ConfigClockSource+0x16c>
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d05c      	beq.n	800316e <HAL_TIM_ConfigClockSource+0x15a>
 80030b4:	2b10      	cmp	r3, #16
 80030b6:	d05a      	beq.n	800316e <HAL_TIM_ConfigClockSource+0x15a>
 80030b8:	e062      	b.n	8003180 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6818      	ldr	r0, [r3, #0]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	6899      	ldr	r1, [r3, #8]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f000 f9ad 	bl	8003428 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	609a      	str	r2, [r3, #8]
      break;
 80030e6:	e04f      	b.n	8003188 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6818      	ldr	r0, [r3, #0]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	6899      	ldr	r1, [r3, #8]
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f000 f996 	bl	8003428 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689a      	ldr	r2, [r3, #8]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800310a:	609a      	str	r2, [r3, #8]
      break;
 800310c:	e03c      	b.n	8003188 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6818      	ldr	r0, [r3, #0]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	6859      	ldr	r1, [r3, #4]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	461a      	mov	r2, r3
 800311c:	f000 f90a 	bl	8003334 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2150      	movs	r1, #80	; 0x50
 8003126:	4618      	mov	r0, r3
 8003128:	f000 f963 	bl	80033f2 <TIM_ITRx_SetConfig>
      break;
 800312c:	e02c      	b.n	8003188 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6818      	ldr	r0, [r3, #0]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	6859      	ldr	r1, [r3, #4]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	461a      	mov	r2, r3
 800313c:	f000 f929 	bl	8003392 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2160      	movs	r1, #96	; 0x60
 8003146:	4618      	mov	r0, r3
 8003148:	f000 f953 	bl	80033f2 <TIM_ITRx_SetConfig>
      break;
 800314c:	e01c      	b.n	8003188 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6818      	ldr	r0, [r3, #0]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	6859      	ldr	r1, [r3, #4]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	461a      	mov	r2, r3
 800315c:	f000 f8ea 	bl	8003334 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2140      	movs	r1, #64	; 0x40
 8003166:	4618      	mov	r0, r3
 8003168:	f000 f943 	bl	80033f2 <TIM_ITRx_SetConfig>
      break;
 800316c:	e00c      	b.n	8003188 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4619      	mov	r1, r3
 8003178:	4610      	mov	r0, r2
 800317a:	f000 f93a 	bl	80033f2 <TIM_ITRx_SetConfig>
      break;
 800317e:	e003      	b.n	8003188 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	73fb      	strb	r3, [r7, #15]
      break;
 8003184:	e000      	b.n	8003188 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003186:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003198:	7bfb      	ldrb	r3, [r7, #15]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
	...

080031f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a40      	ldr	r2, [pc, #256]	; (8003308 <TIM_Base_SetConfig+0x114>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d013      	beq.n	8003234 <TIM_Base_SetConfig+0x40>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003212:	d00f      	beq.n	8003234 <TIM_Base_SetConfig+0x40>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a3d      	ldr	r2, [pc, #244]	; (800330c <TIM_Base_SetConfig+0x118>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d00b      	beq.n	8003234 <TIM_Base_SetConfig+0x40>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a3c      	ldr	r2, [pc, #240]	; (8003310 <TIM_Base_SetConfig+0x11c>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d007      	beq.n	8003234 <TIM_Base_SetConfig+0x40>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a3b      	ldr	r2, [pc, #236]	; (8003314 <TIM_Base_SetConfig+0x120>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d003      	beq.n	8003234 <TIM_Base_SetConfig+0x40>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a3a      	ldr	r2, [pc, #232]	; (8003318 <TIM_Base_SetConfig+0x124>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d108      	bne.n	8003246 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800323a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	4313      	orrs	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a2f      	ldr	r2, [pc, #188]	; (8003308 <TIM_Base_SetConfig+0x114>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d02b      	beq.n	80032a6 <TIM_Base_SetConfig+0xb2>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003254:	d027      	beq.n	80032a6 <TIM_Base_SetConfig+0xb2>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a2c      	ldr	r2, [pc, #176]	; (800330c <TIM_Base_SetConfig+0x118>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d023      	beq.n	80032a6 <TIM_Base_SetConfig+0xb2>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a2b      	ldr	r2, [pc, #172]	; (8003310 <TIM_Base_SetConfig+0x11c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d01f      	beq.n	80032a6 <TIM_Base_SetConfig+0xb2>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a2a      	ldr	r2, [pc, #168]	; (8003314 <TIM_Base_SetConfig+0x120>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d01b      	beq.n	80032a6 <TIM_Base_SetConfig+0xb2>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a29      	ldr	r2, [pc, #164]	; (8003318 <TIM_Base_SetConfig+0x124>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d017      	beq.n	80032a6 <TIM_Base_SetConfig+0xb2>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a28      	ldr	r2, [pc, #160]	; (800331c <TIM_Base_SetConfig+0x128>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d013      	beq.n	80032a6 <TIM_Base_SetConfig+0xb2>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a27      	ldr	r2, [pc, #156]	; (8003320 <TIM_Base_SetConfig+0x12c>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d00f      	beq.n	80032a6 <TIM_Base_SetConfig+0xb2>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a26      	ldr	r2, [pc, #152]	; (8003324 <TIM_Base_SetConfig+0x130>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d00b      	beq.n	80032a6 <TIM_Base_SetConfig+0xb2>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a25      	ldr	r2, [pc, #148]	; (8003328 <TIM_Base_SetConfig+0x134>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d007      	beq.n	80032a6 <TIM_Base_SetConfig+0xb2>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a24      	ldr	r2, [pc, #144]	; (800332c <TIM_Base_SetConfig+0x138>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d003      	beq.n	80032a6 <TIM_Base_SetConfig+0xb2>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a23      	ldr	r2, [pc, #140]	; (8003330 <TIM_Base_SetConfig+0x13c>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d108      	bne.n	80032b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a0a      	ldr	r2, [pc, #40]	; (8003308 <TIM_Base_SetConfig+0x114>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d003      	beq.n	80032ec <TIM_Base_SetConfig+0xf8>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a0c      	ldr	r2, [pc, #48]	; (8003318 <TIM_Base_SetConfig+0x124>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d103      	bne.n	80032f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	691a      	ldr	r2, [r3, #16]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	615a      	str	r2, [r3, #20]
}
 80032fa:	bf00      	nop
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	40010000 	.word	0x40010000
 800330c:	40000400 	.word	0x40000400
 8003310:	40000800 	.word	0x40000800
 8003314:	40000c00 	.word	0x40000c00
 8003318:	40010400 	.word	0x40010400
 800331c:	40014000 	.word	0x40014000
 8003320:	40014400 	.word	0x40014400
 8003324:	40014800 	.word	0x40014800
 8003328:	40001800 	.word	0x40001800
 800332c:	40001c00 	.word	0x40001c00
 8003330:	40002000 	.word	0x40002000

08003334 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003334:	b480      	push	{r7}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	f023 0201 	bic.w	r2, r3, #1
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800335e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f023 030a 	bic.w	r3, r3, #10
 8003370:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	4313      	orrs	r3, r2
 8003378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	621a      	str	r2, [r3, #32]
}
 8003386:	bf00      	nop
 8003388:	371c      	adds	r7, #28
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003392:	b480      	push	{r7}
 8003394:	b087      	sub	sp, #28
 8003396:	af00      	add	r7, sp, #0
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	f023 0210 	bic.w	r2, r3, #16
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	031b      	lsls	r3, r3, #12
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	011b      	lsls	r3, r3, #4
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	621a      	str	r2, [r3, #32]
}
 80033e6:	bf00      	nop
 80033e8:	371c      	adds	r7, #28
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b085      	sub	sp, #20
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003408:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4313      	orrs	r3, r2
 8003410:	f043 0307 	orr.w	r3, r3, #7
 8003414:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	609a      	str	r2, [r3, #8]
}
 800341c:	bf00      	nop
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003428:	b480      	push	{r7}
 800342a:	b087      	sub	sp, #28
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003442:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	021a      	lsls	r2, r3, #8
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	431a      	orrs	r2, r3
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	4313      	orrs	r3, r2
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	4313      	orrs	r3, r2
 8003454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	609a      	str	r2, [r3, #8]
}
 800345c:	bf00      	nop
 800345e:	371c      	adds	r7, #28
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003478:	2b01      	cmp	r3, #1
 800347a:	d101      	bne.n	8003480 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800347c:	2302      	movs	r3, #2
 800347e:	e05a      	b.n	8003536 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a21      	ldr	r2, [pc, #132]	; (8003544 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d022      	beq.n	800350a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034cc:	d01d      	beq.n	800350a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a1d      	ldr	r2, [pc, #116]	; (8003548 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d018      	beq.n	800350a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a1b      	ldr	r2, [pc, #108]	; (800354c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d013      	beq.n	800350a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a1a      	ldr	r2, [pc, #104]	; (8003550 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d00e      	beq.n	800350a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a18      	ldr	r2, [pc, #96]	; (8003554 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d009      	beq.n	800350a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a17      	ldr	r2, [pc, #92]	; (8003558 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d004      	beq.n	800350a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a15      	ldr	r2, [pc, #84]	; (800355c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d10c      	bne.n	8003524 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003510:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	4313      	orrs	r3, r2
 800351a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	40010000 	.word	0x40010000
 8003548:	40000400 	.word	0x40000400
 800354c:	40000800 	.word	0x40000800
 8003550:	40000c00 	.word	0x40000c00
 8003554:	40010400 	.word	0x40010400
 8003558:	40014000 	.word	0x40014000
 800355c:	40001800 	.word	0x40001800

08003560 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <__libc_init_array>:
 8003588:	b570      	push	{r4, r5, r6, lr}
 800358a:	4d0d      	ldr	r5, [pc, #52]	; (80035c0 <__libc_init_array+0x38>)
 800358c:	4c0d      	ldr	r4, [pc, #52]	; (80035c4 <__libc_init_array+0x3c>)
 800358e:	1b64      	subs	r4, r4, r5
 8003590:	10a4      	asrs	r4, r4, #2
 8003592:	2600      	movs	r6, #0
 8003594:	42a6      	cmp	r6, r4
 8003596:	d109      	bne.n	80035ac <__libc_init_array+0x24>
 8003598:	4d0b      	ldr	r5, [pc, #44]	; (80035c8 <__libc_init_array+0x40>)
 800359a:	4c0c      	ldr	r4, [pc, #48]	; (80035cc <__libc_init_array+0x44>)
 800359c:	f000 f820 	bl	80035e0 <_init>
 80035a0:	1b64      	subs	r4, r4, r5
 80035a2:	10a4      	asrs	r4, r4, #2
 80035a4:	2600      	movs	r6, #0
 80035a6:	42a6      	cmp	r6, r4
 80035a8:	d105      	bne.n	80035b6 <__libc_init_array+0x2e>
 80035aa:	bd70      	pop	{r4, r5, r6, pc}
 80035ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80035b0:	4798      	blx	r3
 80035b2:	3601      	adds	r6, #1
 80035b4:	e7ee      	b.n	8003594 <__libc_init_array+0xc>
 80035b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80035ba:	4798      	blx	r3
 80035bc:	3601      	adds	r6, #1
 80035be:	e7f2      	b.n	80035a6 <__libc_init_array+0x1e>
 80035c0:	08003610 	.word	0x08003610
 80035c4:	08003610 	.word	0x08003610
 80035c8:	08003610 	.word	0x08003610
 80035cc:	08003614 	.word	0x08003614

080035d0 <memset>:
 80035d0:	4402      	add	r2, r0
 80035d2:	4603      	mov	r3, r0
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d100      	bne.n	80035da <memset+0xa>
 80035d8:	4770      	bx	lr
 80035da:	f803 1b01 	strb.w	r1, [r3], #1
 80035de:	e7f9      	b.n	80035d4 <memset+0x4>

080035e0 <_init>:
 80035e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035e2:	bf00      	nop
 80035e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035e6:	bc08      	pop	{r3}
 80035e8:	469e      	mov	lr, r3
 80035ea:	4770      	bx	lr

080035ec <_fini>:
 80035ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ee:	bf00      	nop
 80035f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035f2:	bc08      	pop	{r3}
 80035f4:	469e      	mov	lr, r3
 80035f6:	4770      	bx	lr
